# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class FunctionTest(unittest.TestCase):

    def test_list_alias(self):
        cmd = """python ../../main.py function list-alias  --function-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_alias(self):
        cmd = """python ../../main.py function create-alias  --function-name 'xxx' --alias-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_alias(self):
        cmd = """python ../../main.py function get-alias  --function-name 'xxx' --alias-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_alias(self):
        cmd = """python ../../main.py function update-alias  --function-name 'xxx' --alias-name 'xxx' --description 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_alias(self):
        cmd = """python ../../main.py function delete-alias  --function-name 'xxx' --alias-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_function(self):
        cmd = """python ../../main.py function list-function """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_function(self):
        cmd = """python ../../main.py function create-function  --name 'xxx' --entrance 'xxx' --memory '5' --run-time 'xxx' --over-time '5' --code '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_function(self):
        cmd = """python ../../main.py function get-function  --function-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_function(self):
        cmd = """python ../../main.py function update-function  --function-name 'xxx' --description 'xxx' --entrance 'xxx' --memory '5' --run-time 'xxx' --over-time '5' --code '{"":""}' --environment '{"":""}' --log-set-id 'xxx' --log-topic-id 'xxx' --vpc-id 'xxx' --subnet-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_function(self):
        cmd = """python ../../main.py function delete-function  --function-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_test_invoke(self):
        cmd = """python ../../main.py function test-invoke  --function-name 'xxx' --version-name 'xxx' --event 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_trigger(self):
        cmd = """python ../../main.py function get-trigger  --function-name 'xxx' --version-name 'xxx' --trigger-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_trigger(self):
        cmd = """python ../../main.py function list-trigger  --function-name 'xxx' --version-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_version(self):
        cmd = """python ../../main.py function list-version  --function-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_version(self):
        cmd = """python ../../main.py function create-version  --function-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_version(self):
        cmd = """python ../../main.py function get-version  --function-name 'xxx' --version-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_version(self):
        cmd = """python ../../main.py function delete-version  --function-name 'xxx' --version-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

