# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class ClouddnsserviceTest(unittest.TestCase):

    def test_get_domains(self):
        cmd = """python ../../main.py clouddnsservice get-domains  --page-number '5' --page-size '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_add_domain(self):
        cmd = """python ../../main.py clouddnsservice add-domain  --pack-id '5' --domain-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_del_domain(self):
        cmd = """python ../../main.py clouddnsservice del-domain  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_domain(self):
        cmd = """python ../../main.py clouddnsservice update-domain  --domain-name 'xxx' --id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_domain_query_count(self):
        cmd = """python ../../main.py clouddnsservice get-domain-query-count  --domain-id 'xxx' --domain-name 'xxx' --start 'xxx' --end 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_domain_query_traffic(self):
        cmd = """python ../../main.py clouddnsservice get-domain-query-traffic  --domain-id 'xxx' --domain-name 'xxx' --start 'xxx' --end 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_monitor(self):
        cmd = """python ../../main.py clouddnsservice get-monitor  --domain-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_add_monitor(self):
        cmd = """python ../../main.py clouddnsservice add-monitor  --domain-id 'xxx' --sub-domain-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_targets(self):
        cmd = """python ../../main.py clouddnsservice get-targets  --domain-id 'xxx' --sub-domain-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_add_monitor_target(self):
        cmd = """python ../../main.py clouddnsservice add-monitor-target  --domain-id 'xxx' --sub-domain-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_operate_monitor(self):
        cmd = """python ../../main.py clouddnsservice operate-monitor  --domain-id 'xxx' --action 'xxx' --ids '[5]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_monitor(self):
        cmd = """python ../../main.py clouddnsservice update-monitor  --domain-id 'xxx' --update-monitor '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_monitor_alarm_info(self):
        cmd = """python ../../main.py clouddnsservice get-monitor-alarm-info  --domain-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_search_rr(self):
        cmd = """python ../../main.py clouddnsservice search-rr  --domain-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_view_tree(self):
        cmd = """python ../../main.py clouddnsservice get-view-tree  --domain-id 'xxx' --pack-id '5' --view-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_add_rr(self):
        cmd = """python ../../main.py clouddnsservice add-rr  --domain-id 'xxx' --req '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_rr(self):
        cmd = """python ../../main.py clouddnsservice update-rr  --domain-id 'xxx' --req '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_operate_rr(self):
        cmd = """python ../../main.py clouddnsservice operate-rr  --domain-id 'xxx' --ids '[5]' --action 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

