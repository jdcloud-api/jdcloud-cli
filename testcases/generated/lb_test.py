# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class LbTest(unittest.TestCase):

    def test_describe_url_maps(self):
        cmd = """python ../../main.py lb describe-url-maps """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_url_map(self):
        cmd = """python ../../main.py lb create-url-map  --url-map-name 'xxx' --load-balancer-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_url_map(self):
        cmd = """python ../../main.py lb describe-url-map  --url-map-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_url_map(self):
        cmd = """python ../../main.py lb update-url-map  --url-map-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_url_map(self):
        cmd = """python ../../main.py lb delete-url-map  --url-map-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_add_rules(self):
        cmd = """python ../../main.py lb add-rules  --url-map-id 'xxx' --rule-specs '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_rules(self):
        cmd = """python ../../main.py lb update-rules  --url-map-id 'xxx' --rule-update-specs '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_rules(self):
        cmd = """python ../../main.py lb delete-rules  --url-map-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_target_groups(self):
        cmd = """python ../../main.py lb describe-target-groups """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_target_group(self):
        cmd = """python ../../main.py lb create-target-group  --target-group-name 'xxx' --load-balancer-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_target_group(self):
        cmd = """python ../../main.py lb describe-target-group  --target-group-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_target_group(self):
        cmd = """python ../../main.py lb update-target-group  --target-group-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_target_group(self):
        cmd = """python ../../main.py lb delete-target-group  --target-group-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_register_targets(self):
        cmd = """python ../../main.py lb register-targets  --target-group-id 'xxx' --target-specs '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_de_register_targets(self):
        cmd = """python ../../main.py lb de-register-targets  --target-group-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_targets(self):
        cmd = """python ../../main.py lb update-targets  --target-group-id 'xxx' --target-update-specs '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_targets(self):
        cmd = """python ../../main.py lb describe-targets  --target-group-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_backends(self):
        cmd = """python ../../main.py lb describe-backends """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_backend(self):
        cmd = """python ../../main.py lb create-backend  --backend-name 'xxx' --load-balancer-id 'xxx' --protocol 'xxx' --port '5' --health-check-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_backend(self):
        cmd = """python ../../main.py lb describe-backend  --backend-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_backend(self):
        cmd = """python ../../main.py lb update-backend  --backend-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_backend(self):
        cmd = """python ../../main.py lb delete-backend  --backend-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_target_health(self):
        cmd = """python ../../main.py lb describe-target-health  --backend-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_load_balancers(self):
        cmd = """python ../../main.py lb describe-load-balancers """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_load_balancer(self):
        cmd = """python ../../main.py lb create-load-balancer  --load-balancer-name 'xxx' --subnet-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_load_balancer(self):
        cmd = """python ../../main.py lb describe-load-balancer  --load-balancer-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_load_balancer(self):
        cmd = """python ../../main.py lb update-load-balancer  --load-balancer-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_load_balancer(self):
        cmd = """python ../../main.py lb delete-load-balancer  --load-balancer-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_associate_elastic_ip(self):
        cmd = """python ../../main.py lb associate-elastic-ip  --load-balancer-id 'xxx' --elastic-ip-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disassociate_elastic_ip(self):
        cmd = """python ../../main.py lb disassociate-elastic-ip  --load-balancer-id 'xxx' --elastic-ip-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_associate_security_group(self):
        cmd = """python ../../main.py lb associate-security-group  --load-balancer-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disassociate_security_group(self):
        cmd = """python ../../main.py lb disassociate-security-group  --load-balancer-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_listeners(self):
        cmd = """python ../../main.py lb describe-listeners """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_listener(self):
        cmd = """python ../../main.py lb create-listener  --listener-name 'xxx' --protocol 'xxx' --port '5' --backend-id 'xxx' --load-balancer-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_listener(self):
        cmd = """python ../../main.py lb describe-listener  --listener-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_listener(self):
        cmd = """python ../../main.py lb update-listener  --listener-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_listener(self):
        cmd = """python ../../main.py lb delete-listener  --listener-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_add_listener_certificates(self):
        cmd = """python ../../main.py lb add-listener-certificates  --listener-id 'xxx' --certificates '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_listener_certificates(self):
        cmd = """python ../../main.py lb update-listener-certificates  --listener-id 'xxx' --certificates '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_listener_certificates(self):
        cmd = """python ../../main.py lb delete-listener-certificates  --listener-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

