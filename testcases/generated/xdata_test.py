# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class XdataTest(unittest.TestCase):

    def test_execute_ras_query(self):
        cmd = """python ../../main.py xdata execute-ras-query  --sql 'xxx' --user-name 'xxx' --instance-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_execute_py_spark_query(self):
        cmd = """python ../../main.py xdata execute-py-spark-query  --script 'xxx' --user-name 'xxx' --instance-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_ras_query_state(self):
        cmd = """python ../../main.py xdata get-ras-query-state  --user-name 'xxx' --query-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_py_spark_execute_state(self):
        cmd = """python ../../main.py xdata get-py-spark-execute-state  --user-name 'xxx' --query-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_ras_query_log(self):
        cmd = """python ../../main.py xdata get-ras-query-log  --user-name 'xxx' --query-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_ras_query_result(self):
        cmd = """python ../../main.py xdata get-ras-query-result  --user-name 'xxx' --query-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_py_spark_execute_result(self):
        cmd = """python ../../main.py xdata get-py-spark-execute-result  --user-name 'xxx' --query-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_cancel_ras_query(self):
        cmd = """python ../../main.py xdata cancel-ras-query  --user-name 'xxx' --query-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_cancel_py_spark_job(self):
        cmd = """python ../../main.py xdata cancel-py-spark-job  --user-name 'xxx' --query-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_database_info(self):
        cmd = """python ../../main.py xdata list-database-info  --instance-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_database_info(self):
        cmd = """python ../../main.py xdata get-database-info  --database-name 'xxx' --instance-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_database(self):
        cmd = """python ../../main.py xdata create-database  --database-name 'xxx' --instance-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_database(self):
        cmd = """python ../../main.py xdata delete-database  --database-name 'xxx' --instance-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_permission(self):
        cmd = """python ../../main.py xdata set-permission  --user-name 'xxx' --path-name 'xxx' --permission 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_initialize_user_root_hdfs_path_not_exist(self):
        cmd = """python ../../main.py xdata initialize-user-root-hdfs-path-not-exist  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_new_folder(self):
        cmd = """python ../../main.py xdata create-new-folder  --user-name 'xxx' --path-name 'xxx' --description 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_file_status(self):
        cmd = """python ../../main.py xdata get-file-status  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_hdfs_root_path(self):
        cmd = """python ../../main.py xdata get-hdfs-root-path  --user-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_file(self):
        cmd = """python ../../main.py xdata create-file  --user-name 'xxx' --file-path 'xxx' --file-content 'xxx' --over-write 'true'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_is_exist(self):
        cmd = """python ../../main.py xdata is-exist  --user-name 'xxx' --file-path 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_file_and_folders(self):
        cmd = """python ../../main.py xdata list-file-and-folders  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_udf_file_and_folders(self):
        cmd = """python ../../main.py xdata list-udf-file-and-folders  --user-name 'xxx' --instance-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_files_and_folders(self):
        cmd = """python ../../main.py xdata list-files-and-folders  --user-name 'xxx' --path-name 'xxx' --pattern 'xxx' --instance-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_file_and_folders_optional(self):
        cmd = """python ../../main.py xdata list-file-and-folders-optional  --user-name 'xxx' --hide-owner-folder-files 'true' --hide-acl-folder-files 'true' --hide-no-permission-folder-files 'true' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_file_or_folder(self):
        cmd = """python ../../main.py xdata delete-file-or-folder  --user-name 'xxx' --path-name 'xxx' --recursive 'true'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_file_cat(self):
        cmd = """python ../../main.py xdata file-cat  --user-name 'xxx' --file-path 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_rename_file(self):
        cmd = """python ../../main.py xdata rename-file  --user-name 'xxx' --parent-path 'xxx' --old-name 'xxx' --new-name 'xxx' --label 'xxx' --description 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_acl_status(self):
        cmd = """python ../../main.py xdata get-acl-status  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_owner(self):
        cmd = """python ../../main.py xdata set-owner  --user-name 'xxx' --path-name 'xxx' --owner-name 'xxx' --group 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_acl(self):
        cmd = """python ../../main.py xdata set-acl  --user-name 'xxx' --path-name 'xxx' --acl-entry-list-json-str 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_remove_acl(self):
        cmd = """python ../../main.py xdata remove-acl  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_acl_entries(self):
        cmd = """python ../../main.py xdata modify-acl-entries  --user-name 'xxx' --path-name 'xxx' --acl-entry-list-json-str 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_remove_acl_entries(self):
        cmd = """python ../../main.py xdata remove-acl-entries  --user-name 'xxx' --path-name 'xxx' --acl-entry-list-json-str 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_remove_default_acl(self):
        cmd = """python ../../main.py xdata remove-default-acl  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_xattr(self):
        cmd = """python ../../main.py xdata set-xattr  --user-name 'xxx' --path-name 'xxx' --key-name 'xxx' --value 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_xattr(self):
        cmd = """python ../../main.py xdata get-xattr  --user-name 'xxx' --path-name 'xxx' --key-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_xattrs(self):
        cmd = """python ../../main.py xdata get-xattrs  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_remove_xattr(self):
        cmd = """python ../../main.py xdata remove-xattr  --user-name 'xxx' --path-name 'xxx' --key-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_files_count(self):
        cmd = """python ../../main.py xdata get-files-count  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_permission_by_ugo(self):
        cmd = """python ../../main.py xdata set-permission-by-ugo  --user-name 'xxx' --path-name 'xxx' --useraction 'xxx' --groupaction 'xxx' --otheraction 'xxx' --sticky-bit 'true'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_content_summary(self):
        cmd = """python ../../main.py xdata get-content-summary  --user-name 'xxx' --path-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_instance_info(self):
        cmd = """python ../../main.py xdata list-instance-info """
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_table_info(self):
        cmd = """python ../../main.py xdata list-table-info  --instance-name 'xxx' --database-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_table(self):
        cmd = """python ../../main.py xdata create-table  --instance-name 'xxx' --db-model-dbtable '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_table_info(self):
        cmd = """python ../../main.py xdata get-table-info  --table-name 'xxx' --instance-name 'xxx' --database-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_table(self):
        cmd = """python ../../main.py xdata delete-table  --table-name 'xxx' --instance-name 'xxx' --database-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print content
        result = json.loads(content)
        self.assertIsInstance(result, dict)

