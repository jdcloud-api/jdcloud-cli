# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class OssopenapiTest(unittest.TestCase):

    def test_get_single_bucket_capacity(self):
        cmd = """python ../../main.py ossopenapi get-single-bucket-capacity  --bucket-name 'xxx' --capacity-types '[5]' --method '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_back_source_configuration(self):
        cmd = """python ../../main.py ossopenapi get-back-source-configuration  --bucket-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_put_back_source_configuration(self):
        cmd = """python ../../main.py ossopenapi put-back-source-configuration  --bucket-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_back_source_configuration(self):
        cmd = """python ../../main.py ossopenapi delete-back-source-configuration  --bucket-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_historical_replicat_task(self):
        cmd = """python ../../main.py ossopenapi get-historical-replicat-task  --bucket-name 'xxx' --task-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_abort_historical_replicat_task(self):
        cmd = """python ../../main.py ossopenapi abort-historical-replicat-task  --bucket-name 'xxx' --task-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_historical_replicat_tasks(self):
        cmd = """python ../../main.py ossopenapi list-historical-replicat-tasks  --bucket-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_historical_replicat_task(self):
        cmd = """python ../../main.py ossopenapi create-historical-replicat-task  --bucket-name 'xxx' --action 'xxx' --bucket-name 'xxx' --bucket-region 'xxx' --target-bucket-name 'xxx' --target-bucket-region 'xxx' --storage-class 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

