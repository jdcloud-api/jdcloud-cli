# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class KmsTest(unittest.TestCase):

    def test_describe_key_list(self):
        cmd = """python ../../main.py kms describe-key-list """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_key(self):
        cmd = """python ../../main.py kms create-key  --key-cfg '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_key(self):
        cmd = """python ../../main.py kms describe-key  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_key_description(self):
        cmd = """python ../../main.py kms update-key-description  --key-id 'xxx' --key-cfg '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_key(self):
        cmd = """python ../../main.py kms enable-key  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_key(self):
        cmd = """python ../../main.py kms disable-key  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_schedule_key_deletion(self):
        cmd = """python ../../main.py kms schedule-key-deletion  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_cancel_key_deletion(self):
        cmd = """python ../../main.py kms cancel-key-deletion  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_key_rotation(self):
        cmd = """python ../../main.py kms key-rotation  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_encrypt(self):
        cmd = """python ../../main.py kms encrypt  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_decrypt(self):
        cmd = """python ../../main.py kms decrypt  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_public_key(self):
        cmd = """python ../../main.py kms get-public-key  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_sign(self):
        cmd = """python ../../main.py kms sign  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_validate(self):
        cmd = """python ../../main.py kms validate  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_generate_data_key(self):
        cmd = """python ../../main.py kms generate-data-key  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_key_detail(self):
        cmd = """python ../../main.py kms describe-key-detail  --key-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_key_version(self):
        cmd = """python ../../main.py kms enable-key-version  --key-id 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_key_version(self):
        cmd = """python ../../main.py kms disable-key-version  --key-id 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_schedule_key_version_deletion(self):
        cmd = """python ../../main.py kms schedule-key-version-deletion  --key-id 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_cancel_key_version_deletion(self):
        cmd = """python ../../main.py kms cancel-key-version-deletion  --key-id 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_secret_list(self):
        cmd = """python ../../main.py kms describe-secret-list """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_secret(self):
        cmd = """python ../../main.py kms create-secret  --secret-cfg '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_import_secret(self):
        cmd = """python ../../main.py kms import-secret """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_secret_version_list(self):
        cmd = """python ../../main.py kms describe-secret-version-list  --secret-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_secret(self):
        cmd = """python ../../main.py kms update-secret  --secret-id 'xxx' --secret-desc-cfg '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_secret(self):
        cmd = """python ../../main.py kms enable-secret  --secret-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_secret(self):
        cmd = """python ../../main.py kms disable-secret  --secret-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_secret(self):
        cmd = """python ../../main.py kms delete-secret  --secret-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_secret_version(self):
        cmd = """python ../../main.py kms create-secret-version  --secret-id 'xxx' --secret-version-cfg '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_export_secret(self):
        cmd = """python ../../main.py kms export-secret  --secret-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_secret_version_info(self):
        cmd = """python ../../main.py kms describe-secret-version-info  --secret-id 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_secret_version(self):
        cmd = """python ../../main.py kms update-secret-version  --secret-id 'xxx' --version 'xxx' --secret-time-cfg '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_secret_version(self):
        cmd = """python ../../main.py kms enable-secret-version  --secret-id 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_secret_version(self):
        cmd = """python ../../main.py kms disable-secret-version  --secret-id 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_secret_version(self):
        cmd = """python ../../main.py kms delete-secret-version  --secret-id 'xxx' --version 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

