# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class VodTest(unittest.TestCase):

    def test_list_categories(self):
        cmd = """python ../../main.py vod list-categories """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_category(self):
        cmd = """python ../../main.py vod create-category  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_category_with_children(self):
        cmd = """python ../../main.py vod get-category-with-children  --category-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_category(self):
        cmd = """python ../../main.py vod get-category  --category-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_category(self):
        cmd = """python ../../main.py vod update-category  --category-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_category(self):
        cmd = """python ../../main.py vod delete-category  --category-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_domains(self):
        cmd = """python ../../main.py vod list-domains """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_domain(self):
        cmd = """python ../../main.py vod create-domain  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_domain(self):
        cmd = """python ../../main.py vod get-domain  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_domain(self):
        cmd = """python ../../main.py vod delete-domain  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_domain(self):
        cmd = """python ../../main.py vod enable-domain  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_domain(self):
        cmd = """python ../../main.py vod disable-domain  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_default_domain(self):
        cmd = """python ../../main.py vod set-default-domain  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_header(self):
        cmd = """python ../../main.py vod set-header  --domain-id '5' --header-name 'xxx' --header-value 'xxx' --header-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_headers(self):
        cmd = """python ../../main.py vod list-headers  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_header(self):
        cmd = """python ../../main.py vod delete-header  --domain-id '5' --header-name 'xxx' --header-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_referer_rule(self):
        cmd = """python ../../main.py vod set-referer-rule  --domain-id '5' --config '{"":""}' --enabled 'true'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_referer_rule(self):
        cmd = """python ../../main.py vod get-referer-rule  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_urlrule(self):
        cmd = """python ../../main.py vod set-urlrule  --domain-id '5' --config '{"":""}' --enabled 'true'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_urlrule(self):
        cmd = """python ../../main.py vod get-urlrule  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_iprule(self):
        cmd = """python ../../main.py vod set-iprule  --domain-id '5' --config '{"":""}' --enabled 'true'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_iprule(self):
        cmd = """python ../../main.py vod get-iprule  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_http_ssl(self):
        cmd = """python ../../main.py vod set-http-ssl  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_http_ssl(self):
        cmd = """python ../../main.py vod get-http-ssl  --domain-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_video_upload_task(self):
        cmd = """python ../../main.py vod create-video-upload-task """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_refresh_video_upload_task(self):
        cmd = """python ../../main.py vod refresh-video-upload-task  --video-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_image_upload_task(self):
        cmd = """python ../../main.py vod create-image-upload-task """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_submit_quality_detection_job(self):
        cmd = """python ../../main.py vod submit-quality-detection-job """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_batch_submit_quality_detection_jobs(self):
        cmd = """python ../../main.py vod batch-submit-quality-detection-jobs """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_quality_detection_templates(self):
        cmd = """python ../../main.py vod list-quality-detection-templates """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_quality_detection_template(self):
        cmd = """python ../../main.py vod create-quality-detection-template  --name 'xxx' --template-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_quality_detection_template(self):
        cmd = """python ../../main.py vod get-quality-detection-template  --template-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_quality_detection_template(self):
        cmd = """python ../../main.py vod update-quality-detection-template  --template-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_quality_detection_template(self):
        cmd = """python ../../main.py vod delete-quality-detection-template  --template-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_submit_transcode_job(self):
        cmd = """python ../../main.py vod submit-transcode-job """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_batch_submit_transcode_jobs(self):
        cmd = """python ../../main.py vod batch-submit-transcode-jobs """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_transcode_templates(self):
        cmd = """python ../../main.py vod list-transcode-templates """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_transcode_template(self):
        cmd = """python ../../main.py vod create-transcode-template  --name 'xxx' --video '{"":""}' --audio '{"":""}' --encapsulation '{"":""}' --definition 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_transcode_template(self):
        cmd = """python ../../main.py vod get-transcode-template  --template-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_transcode_template(self):
        cmd = """python ../../main.py vod update-transcode-template  --template-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_transcode_template(self):
        cmd = """python ../../main.py vod delete-transcode-template  --template-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_videos(self):
        cmd = """python ../../main.py vod list-videos """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_video(self):
        cmd = """python ../../main.py vod get-video  --video-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_video(self):
        cmd = """python ../../main.py vod update-video  --video-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_video(self):
        cmd = """python ../../main.py vod delete-video  --video-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_batch_delete_videos(self):
        cmd = """python ../../main.py vod batch-delete-videos """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_batch_update_videos(self):
        cmd = """python ../../main.py vod batch-update-videos  --bulk-items '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_video_play_info(self):
        cmd = """python ../../main.py vod get-video-play-info  --video-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_video_streams(self):
        cmd = """python ../../main.py vod delete-video-streams  --video-id 'xxx' --task-ids '[5]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_list_watermarks(self):
        cmd = """python ../../main.py vod list-watermarks """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_watermark(self):
        cmd = """python ../../main.py vod create-watermark  --name 'xxx' --img-url 'xxx' --width 'xxx' --height 'xxx' --position 'xxx' --offset-x 'xxx' --offset-y 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_watermark(self):
        cmd = """python ../../main.py vod get-watermark  --watermark-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_watermark(self):
        cmd = """python ../../main.py vod update-watermark  --watermark-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_watermark(self):
        cmd = """python ../../main.py vod delete-watermark  --watermark-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

