# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class LogsTest(unittest.TestCase):

    def test_describe_collect_info(self):
        cmd = """python ../../main.py logs describe-collect-info  --collect-info-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_collect_info(self):
        cmd = """python ../../main.py logs update-collect-info  --collect-info-uid 'xxx' --enabled 'true' --resource-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_collect_resources(self):
        cmd = """python ../../main.py logs describe-collect-resources  --collect-info-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_collect_resources(self):
        cmd = """python ../../main.py logs update-collect-resources  --collect-info-uid 'xxx' --action 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_collect_info(self):
        cmd = """python ../../main.py logs create-collect-info  --logtopic-uid 'xxx' --enabled 'true' --app-code 'xxx' --service-code 'xxx' --resource-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_logd_ca(self):
        cmd = """python ../../main.py logs describe-logd-ca  --instance-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_instance_collect_confs(self):
        cmd = """python ../../main.py logs describe-instance-collect-confs  --instance-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_logsets(self):
        cmd = """python ../../main.py logs describe-logsets """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_logset(self):
        cmd = """python ../../main.py logs create-logset  --name 'xxx' --life-cycle '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_logset(self):
        cmd = """python ../../main.py logs describe-logset  --logset-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_logset(self):
        cmd = """python ../../main.py logs update-logset  --logset-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_logset(self):
        cmd = """python ../../main.py logs delete-logset  --logset-uids 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_logtopics(self):
        cmd = """python ../../main.py logs describe-logtopics  --logset-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_logtopic(self):
        cmd = """python ../../main.py logs create-logtopic  --logset-uid 'xxx' --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_logtopic(self):
        cmd = """python ../../main.py logs delete-logtopic  --logset-uid 'xxx' --logtopic-uids 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_logtopic(self):
        cmd = """python ../../main.py logs describe-logtopic  --logtopic-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_logtopic(self):
        cmd = """python ../../main.py logs update-logtopic  --logtopic-uid 'xxx' --description 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_test_metric_task(self):
        cmd = """python ../../main.py logs test-metric-task  --logset-uid 'xxx' --logtopic-uid 'xxx' --aggregate 'xxx' --data-field 'xxx' --filter-open 'xxx' --filter-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_metric_tasks(self):
        cmd = """python ../../main.py logs describe-metric-tasks  --logset-uid 'xxx' --logtopic-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_metric_task(self):
        cmd = """python ../../main.py logs create-metric-task  --logset-uid 'xxx' --logtopic-uid 'xxx' --aggregate 'xxx' --custom-unit 'xxx' --data-field 'xxx' --filter-open 'xxx' --filter-type 'xxx' --interval '5' --metric 'xxx' --name 'xxx' --unit 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_metric_task(self):
        cmd = """python ../../main.py logs describe-metric-task  --logset-uid 'xxx' --logtopic-uid 'xxx' --logmetrictask-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_metric_task(self):
        cmd = """python ../../main.py logs update-metric-task  --logset-uid 'xxx' --logtopic-uid 'xxx' --logmetrictask-uid 'xxx' --custom-unit 'xxx' --filter-open 'xxx' --filter-type 'xxx' --name 'xxx' --unit 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_metric_task(self):
        cmd = """python ../../main.py logs delete-metric-task  --logset-uid 'xxx' --logtopic-uid 'xxx' --logmetrictask-uid 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_put(self):
        cmd = """python ../../main.py logs put  --logtopic-uid 'xxx' --entries '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_search_log_context(self):
        cmd = """python ../../main.py logs search-log-context  --logset-uid 'xxx' --logtopic-uid 'xxx' --anchor '[{"":""}]' --id 'xxx' --line-size '5' --time '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_search(self):
        cmd = """python ../../main.py logs search  --logset-uid 'xxx' --logtopic-uid 'xxx' --action 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

