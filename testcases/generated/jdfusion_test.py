# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class JdfusionTest(unittest.TestCase):

    def test_get_cloud_infos(self):
        cmd = """python ../../main.py jdfusion get-cloud-infos """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_regist_cloud_info(self):
        cmd = """python ../../main.py jdfusion regist-cloud-info  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_cloud_info_by_id(self):
        cmd = """python ../../main.py jdfusion get-cloud-info-by-id  --cloud-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_unregist_cloud_info(self):
        cmd = """python ../../main.py jdfusion unregist-cloud-info  --cloud-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_disks(self):
        cmd = """python ../../main.py jdfusion get-disks """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_disk(self):
        cmd = """python ../../main.py jdfusion create-disk  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_disk_by_id(self):
        cmd = """python ../../main.py jdfusion get-disk-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_remove_disk_by_id(self):
        cmd = """python ../../main.py jdfusion remove-disk-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_attach_disk_to_vm_instance_by_disk_id(self):
        cmd = """python ../../main.py jdfusion attach-disk-to-vm-instance-by-disk-id  --id 'xxx' --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_detach_disk_to_vm_instance_by_disk_id(self):
        cmd = """python ../../main.py jdfusion detach-disk-to-vm-instance-by-disk-id  --id 'xxx' --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_task_info_history_by_id(self):
        cmd = """python ../../main.py jdfusion get-task-info-history-by-id  --task 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_task_info_by_id(self):
        cmd = """python ../../main.py jdfusion get-task-info-by-id  --task 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_images(self):
        cmd = """python ../../main.py jdfusion get-vm-images """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_instances_by_id(self):
        cmd = """python ../../main.py jdfusion get-vm-instances-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vm_instance_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vm-instance-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_instances(self):
        cmd = """python ../../main.py jdfusion get-vm-instances """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vm_instance(self):
        cmd = """python ../../main.py jdfusion create-vm-instance  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_stop_vm_instance_by_id(self):
        cmd = """python ../../main.py jdfusion stop-vm-instance-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_start_vm_instance_by_id(self):
        cmd = """python ../../main.py jdfusion start-vm-instance-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_reboot_vm_instance_by_id(self):
        cmd = """python ../../main.py jdfusion reboot-vm-instance-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_instance_types(self):
        cmd = """python ../../main.py jdfusion get-vm-instance-types """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_keypairs_by_name(self):
        cmd = """python ../../main.py jdfusion get-vm-keypairs-by-name  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vm_keypair_by_name(self):
        cmd = """python ../../main.py jdfusion delete-vm-keypair-by-name  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_keypairs(self):
        cmd = """python ../../main.py jdfusion get-vm-keypairs """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vm_keypair(self):
        cmd = """python ../../main.py jdfusion create-vm-keypair  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_eips(self):
        cmd = """python ../../main.py jdfusion get-vpc-eips """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_eip(self):
        cmd = """python ../../main.py jdfusion create-vpc-eip  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_eip_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-eip-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_eip_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-eip-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_associate_vpc_eip_by_id(self):
        cmd = """python ../../main.py jdfusion associate-vpc-eip-by-id  --id 'xxx' --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disassociate_vpc_eip_by_id(self):
        cmd = """python ../../main.py jdfusion disassociate-vpc-eip-by-id  --id 'xxx' --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_lbhttp_listener(self):
        cmd = """python ../../main.py jdfusion create-vpc-lbhttp-listener  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_network_interface_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-network-interface-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_network_interface_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-network-interface-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_network_interfaces(self):
        cmd = """python ../../main.py jdfusion get-vpc-network-interfaces """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_network_interface(self):
        cmd = """python ../../main.py jdfusion create-vpc-network-interface  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_attach_vpc_network_interface_by_id(self):
        cmd = """python ../../main.py jdfusion attach-vpc-network-interface-by-id  --id 'xxx' --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_detach_vpc_network_interface_by_id(self):
        cmd = """python ../../main.py jdfusion detach-vpc-network-interface-by-id  --id 'xxx' --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_security_group_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-security-group-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_security_group_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-security-group-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_security_groups(self):
        cmd = """python ../../main.py jdfusion get-vpc-security-groups """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_security_group(self):
        cmd = """python ../../main.py jdfusion create-vpc-security-group  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_slb_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-slb-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_slb_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-slb-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_slbs(self):
        cmd = """python ../../main.py jdfusion get-vpc-slbs """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_slb(self):
        cmd = """python ../../main.py jdfusion create-vpc-slb  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_subnet_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-subnet-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_subnet_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-subnet-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_subnets(self):
        cmd = """python ../../main.py jdfusion get-vpc-subnets """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_subnet(self):
        cmd = """python ../../main.py jdfusion create-vpc-subnet  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpcs(self):
        cmd = """python ../../main.py jdfusion get-vpcs """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc(self):
        cmd = """python ../../main.py jdfusion create-vpc  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_vserver_groups(self):
        cmd = """python ../../main.py jdfusion get-vpc-vserver-groups """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_vserver_group(self):
        cmd = """python ../../main.py jdfusion create-vpc-vserver-group  --body '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

