# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class JdfusionTest(unittest.TestCase):

    def test_get_cloud_infos(self):
        cmd = """python ../../main.py jdfusion get-cloud-infos """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_regist_cloud_info(self):
        cmd = """python ../../main.py jdfusion regist-cloud-info  --cloud '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_cloud_info_by_id(self):
        cmd = """python ../../main.py jdfusion get-cloud-info-by-id  --cloud-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_unregist_cloud_info(self):
        cmd = """python ../../main.py jdfusion unregist-cloud-info  --cloud-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_valid_cloud_info(self):
        cmd = """python ../../main.py jdfusion valid-cloud-info  --cloud-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_deployments(self):
        cmd = """python ../../main.py jdfusion get-deployments """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_deployment(self):
        cmd = """python ../../main.py jdfusion create-deployment  --deployment '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_reverse_deployment(self):
        cmd = """python ../../main.py jdfusion reverse-deployment  --reverse '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_deployments_by_id(self):
        cmd = """python ../../main.py jdfusion get-deployments-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_edit_deployment(self):
        cmd = """python ../../main.py jdfusion edit-deployment  --id 'xxx' --deployment '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_deployment(self):
        cmd = """python ../../main.py jdfusion delete-deployment  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_clone_deployment(self):
        cmd = """python ../../main.py jdfusion clone-deployment  --id 'xxx' --deployment '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_dryrun_deployment(self):
        cmd = """python ../../main.py jdfusion dryrun-deployment  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_apply_deployment(self):
        cmd = """python ../../main.py jdfusion apply-deployment  --id 'xxx' --apply '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_deployment_result(self):
        cmd = """python ../../main.py jdfusion get-deployment-result  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_deployment_versions(self):
        cmd = """python ../../main.py jdfusion get-deployment-versions  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_deployments_version(self):
        cmd = """python ../../main.py jdfusion get-deployments-version  --id 'xxx' --version_id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_rollback_deployments_version(self):
        cmd = """python ../../main.py jdfusion rollback-deployments-version  --id 'xxx' --version_id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_deployments_results_by_id_record(self):
        cmd = """python ../../main.py jdfusion get-deployments-results-by-id-record  --id 'xxx' --record 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_disks(self):
        cmd = """python ../../main.py jdfusion get-disks """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_disk(self):
        cmd = """python ../../main.py jdfusion create-disk  --disk '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_disk_by_id(self):
        cmd = """python ../../main.py jdfusion get-disk-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_remove_disk_by_id(self):
        cmd = """python ../../main.py jdfusion remove-disk-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_attach_disk_to_vm_instance_by_disk_id(self):
        cmd = """python ../../main.py jdfusion attach-disk-to-vm-instance-by-disk-id  --id 'xxx' --attach '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_detach_disk_to_vm_instance_by_disk_id(self):
        cmd = """python ../../main.py jdfusion detach-disk-to-vm-instance-by-disk-id  --id 'xxx' --detach '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_buckets(self):
        cmd = """python ../../main.py jdfusion get-buckets """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_bucket(self):
        cmd = """python ../../main.py jdfusion create-bucket  --bucket '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_bucket_by_name(self):
        cmd = """python ../../main.py jdfusion get-bucket-by-name  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_bucket(self):
        cmd = """python ../../main.py jdfusion delete-bucket  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_bucket_files(self):
        cmd = """python ../../main.py jdfusion get-bucket-files  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_transfer_tasks(self):
        cmd = """python ../../main.py jdfusion get-transfer-tasks """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_transfer_task(self):
        cmd = """python ../../main.py jdfusion create-transfer-task """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_transfer_task_by_id(self):
        cmd = """python ../../main.py jdfusion get-transfer-task-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_edit_transfer_task(self):
        cmd = """python ../../main.py jdfusion edit-transfer-task  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_transfer_task(self):
        cmd = """python ../../main.py jdfusion delete-transfer-task  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_start_transfer_task(self):
        cmd = """python ../../main.py jdfusion start-transfer-task  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_stop_transfer_task(self):
        cmd = """python ../../main.py jdfusion stop-transfer-task  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_transfer_task_progress(self):
        cmd = """python ../../main.py jdfusion get-transfer-task-progress  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_transfer_task_failed_files(self):
        cmd = """python ../../main.py jdfusion get-transfer-task-failed-files  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_rds_accounts_by_inst_id(self):
        cmd = """python ../../main.py jdfusion get-rds-accounts-by-inst-id  --inst-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_rds_accounts(self):
        cmd = """python ../../main.py jdfusion create-rds-accounts  --inst-id 'xxx' --account '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_rds_accounts_by_inst_id_and_account_name(self):
        cmd = """python ../../main.py jdfusion get-rds-accounts-by-inst-id-and-account-name  --inst-id 'xxx' --account-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_rds_account(self):
        cmd = """python ../../main.py jdfusion delete-rds-account  --inst-id 'xxx' --account-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_grant_rds_account(self):
        cmd = """python ../../main.py jdfusion grant-rds-account  --inst-id 'xxx' --account-name 'xxx' --db-privilege-info '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_revoke_rds_account(self):
        cmd = """python ../../main.py jdfusion revoke-rds-account  --inst-id 'xxx' --account-name 'xxx' --db-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_grant_rds_accounts_by_task(self):
        cmd = """python ../../main.py jdfusion grant-rds-accounts-by-task  --inst-id 'xxx' --account-name 'xxx' --info '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_rds_databases_by_inst_id(self):
        cmd = """python ../../main.py jdfusion get-rds-databases-by-inst-id  --inst-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_rds_database(self):
        cmd = """python ../../main.py jdfusion create-rds-database  --inst-id 'xxx' --database '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_rds_database_by_inst_id_and_db_name(self):
        cmd = """python ../../main.py jdfusion get-rds-database-by-inst-id-and-db-name  --inst-id 'xxx' --db-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_rds_database(self):
        cmd = """python ../../main.py jdfusion delete-rds-database  --inst-id 'xxx' --db-name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_rds_instances(self):
        cmd = """python ../../main.py jdfusion get-rds-instances """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_rds_instance(self):
        cmd = """python ../../main.py jdfusion create-rds-instance  --instance '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_rds_by_inst_id(self):
        cmd = """python ../../main.py jdfusion get-rds-by-inst-id  --inst-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_rds_by_inst_id(self):
        cmd = """python ../../main.py jdfusion delete-rds-by-inst-id  --inst-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_channels(self):
        cmd = """python ../../main.py jdfusion get-channels """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_channel(self):
        cmd = """python ../../main.py jdfusion create-channel  --channel '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_channel(self):
        cmd = """python ../../main.py jdfusion delete-channel  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_start_channel(self):
        cmd = """python ../../main.py jdfusion start-channel  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_stop_channel(self):
        cmd = """python ../../main.py jdfusion stop-channel  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_datasources(self):
        cmd = """python ../../main.py jdfusion get-datasources """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_datasource(self):
        cmd = """python ../../main.py jdfusion create-datasource  --datasource '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_datasource(self):
        cmd = """python ../../main.py jdfusion delete-datasource  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_rds_specification(self):
        cmd = """python ../../main.py jdfusion get-rds-specification  --engine 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_regions(self):
        cmd = """python ../../main.py jdfusion get-regions """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_regions_available_zones(self):
        cmd = """python ../../main.py jdfusion get-regions-available-zones  --region 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_task_info_history_by_id(self):
        cmd = """python ../../main.py jdfusion get-task-info-history-by-id  --task 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_task_info_by_id(self):
        cmd = """python ../../main.py jdfusion get-task-info-by-id  --task 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_images(self):
        cmd = """python ../../main.py jdfusion get-vm-images """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_instances_by_id(self):
        cmd = """python ../../main.py jdfusion get-vm-instances-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vm_instance_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vm-instance-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_instances(self):
        cmd = """python ../../main.py jdfusion get-vm-instances """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vm_instance(self):
        cmd = """python ../../main.py jdfusion create-vm-instance  --vm '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_stop_vm_instance_by_id(self):
        cmd = """python ../../main.py jdfusion stop-vm-instance-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_start_vm_instance_by_id(self):
        cmd = """python ../../main.py jdfusion start-vm-instance-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_reboot_vm_instance_by_id(self):
        cmd = """python ../../main.py jdfusion reboot-vm-instance-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_instance_types(self):
        cmd = """python ../../main.py jdfusion get-vm-instance-types """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_keypairs_by_name(self):
        cmd = """python ../../main.py jdfusion get-vm-keypairs-by-name  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vm_keypair_by_name(self):
        cmd = """python ../../main.py jdfusion delete-vm-keypair-by-name  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vm_keypairs(self):
        cmd = """python ../../main.py jdfusion get-vm-keypairs """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vm_keypair(self):
        cmd = """python ../../main.py jdfusion create-vm-keypair  --keypair '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_eips(self):
        cmd = """python ../../main.py jdfusion get-vpc-eips """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_eip(self):
        cmd = """python ../../main.py jdfusion create-vpc-eip  --allocate '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_eip_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-eip-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_eip_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-eip-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_associate_vpc_eip_by_id(self):
        cmd = """python ../../main.py jdfusion associate-vpc-eip-by-id  --id 'xxx' --associate '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disassociate_vpc_eip_by_id(self):
        cmd = """python ../../main.py jdfusion disassociate-vpc-eip-by-id  --id 'xxx' --unassociate '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_lb_http_listener(self):
        cmd = """python ../../main.py jdfusion get-lb-http-listener """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_lbhttp_listener(self):
        cmd = """python ../../main.py jdfusion create-vpc-lbhttp-listener  --http-listener '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_network_interface_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-network-interface-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_network_interface_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-network-interface-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_network_interfaces(self):
        cmd = """python ../../main.py jdfusion get-vpc-network-interfaces """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_network_interface(self):
        cmd = """python ../../main.py jdfusion create-vpc-network-interface  --net-interface '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_attach_vpc_network_interface_by_id(self):
        cmd = """python ../../main.py jdfusion attach-vpc-network-interface-by-id  --id 'xxx' --attach '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_detach_vpc_network_interface_by_id(self):
        cmd = """python ../../main.py jdfusion detach-vpc-network-interface-by-id  --id 'xxx' --detach '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_security_group_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-security-group-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_security_group_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-security-group-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_security_groups(self):
        cmd = """python ../../main.py jdfusion get-vpc-security-groups """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_security_group(self):
        cmd = """python ../../main.py jdfusion create-vpc-security-group  --security-group '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_security_groups_rule(self):
        cmd = """python ../../main.py jdfusion create-security-groups-rule  --id 'xxx' --sg-rule '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_security_groups_rule(self):
        cmd = """python ../../main.py jdfusion delete-security-groups-rule  --id 'xxx' --rule-type 'xxx' --protocol 'xxx' --from-port 'xxx' --to-port 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_slb_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-slb-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_slb_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-slb-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_slbs(self):
        cmd = """python ../../main.py jdfusion get-vpc-slbs """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_slb(self):
        cmd = """python ../../main.py jdfusion create-vpc-slb  --slb '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_start_slb(self):
        cmd = """python ../../main.py jdfusion start-slb  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_stop_slb(self):
        cmd = """python ../../main.py jdfusion stop-slb  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_slbs_listener(self):
        cmd = """python ../../main.py jdfusion delete-slbs-listener  --id 'xxx' --listener-port '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_start_slb_listener(self):
        cmd = """python ../../main.py jdfusion start-slb-listener  --id 'xxx' --listener-port '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_stop_slb_listener(self):
        cmd = """python ../../main.py jdfusion stop-slb-listener  --id 'xxx' --listener-port '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_subnet_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-subnet-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_subnet_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-subnet-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_subnets(self):
        cmd = """python ../../main.py jdfusion get-vpc-subnets """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_subnet(self):
        cmd = """python ../../main.py jdfusion create-vpc-subnet  --subnet '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_by_id(self):
        cmd = """python ../../main.py jdfusion get-vpc-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vpc_by_id(self):
        cmd = """python ../../main.py jdfusion delete-vpc-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpcs(self):
        cmd = """python ../../main.py jdfusion get-vpcs """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc(self):
        cmd = """python ../../main.py jdfusion create-vpc  --vpc '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vpc_vserver_groups(self):
        cmd = """python ../../main.py jdfusion get-vpc-vserver-groups """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_vpc_vserver_group(self):
        cmd = """python ../../main.py jdfusion create-vpc-vserver-group  --vserver-group '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_vserver_groups_by_id(self):
        cmd = """python ../../main.py jdfusion get-vserver-groups-by-id  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_vserver_group(self):
        cmd = """python ../../main.py jdfusion delete-vserver-group  --id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

