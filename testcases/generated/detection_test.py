# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class DetectionTest(unittest.TestCase):

    def test_describe_agent_status(self):
        cmd = """python ../../main.py detection describe-agent-status  --filters '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_metric_data_am(self):
        cmd = """python ../../main.py detection describe-metric-data-am  --resource-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_probe_task(self):
        cmd = """python ../../main.py detection create-probe-task  --client-token 'xxx' --create-probe-task-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_probe_task(self):
        cmd = """python ../../main.py detection delete-probe-task  --probe-task-ids 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_probe_task(self):
        cmd = """python ../../main.py detection describe-probe-task  --probe-task-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_probe_task(self):
        cmd = """python ../../main.py detection update-probe-task  --probe-task-id 'xxx' --probes '[{"":""}]'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_probe_history(self):
        cmd = """python ../../main.py detection describe-probe-history  --probe-task-id 'xxx' --probe-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_discribe_probes(self):
        cmd = """python ../../main.py detection discribe-probes  --probe-task-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_probe_task_enable(self):
        cmd = """python ../../main.py detection probe-task-enable """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_probe_tasks(self):
        cmd = """python ../../main.py detection describe-probe-tasks """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_site_monitor(self):
        cmd = """python ../../main.py detection get-site-monitor """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_site_monitor(self):
        cmd = """python ../../main.py detection create-site-monitor  --address 'xxx' --cycle '5' --name 'xxx' --source '[{"":""}]' --task-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_site_monitor(self):
        cmd = """python ../../main.py detection update-site-monitor  --address 'xxx' --cycle '5' --name 'xxx' --source '[{"":""}]' --task-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_site_monitor(self):
        cmd = """python ../../main.py detection delete-site-monitor """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_site_monitor(self):
        cmd = """python ../../main.py detection enable-site-monitor """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_validate_site_monitor_address(self):
        cmd = """python ../../main.py detection validate-site-monitor-address """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_site_monitor_data_points(self):
        cmd = """python ../../main.py detection get-site-monitor-data-points """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_get_site_monitor_source(self):
        cmd = """python ../../main.py detection get-site-monitor-source """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_test_site_monitor(self):
        cmd = """python ../../main.py detection test-site-monitor  --address 'xxx' --cycle '5' --name 'xxx' --source '[{"":""}]' --task-type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

