# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class DiskTest(unittest.TestCase):

    def test_describe_disks(self):
        cmd = """python ../../main.py disk describe-disks """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_disks(self):
        cmd = """python ../../main.py disk create-disks  --disk-spec '{"":""}' --max-count '5' --client-token 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_disk(self):
        cmd = """python ../../main.py disk describe-disk  --disk-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_disk_attribute(self):
        cmd = """python ../../main.py disk modify-disk-attribute  --disk-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_disk(self):
        cmd = """python ../../main.py disk delete-disk  --disk-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_restore_disk(self):
        cmd = """python ../../main.py disk restore-disk  --disk-id 'xxx' --snapshot-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_extend_disk(self):
        cmd = """python ../../main.py disk extend-disk  --disk-id 'xxx' --disk-size-gb '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_volumes_ignore_service_code(self):
        cmd = """python ../../main.py disk describe-volumes-ignore-service-code """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_quota(self):
        cmd = """python ../../main.py disk describe-quota  --type 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_snapshots(self):
        cmd = """python ../../main.py disk describe-snapshots """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_snapshot(self):
        cmd = """python ../../main.py disk create-snapshot  --snapshot-spec '{"":""}' --client-token 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_snapshots(self):
        cmd = """python ../../main.py disk delete-snapshots """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_snapshot(self):
        cmd = """python ../../main.py disk describe-snapshot  --snapshot-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_snapshot_attribute(self):
        cmd = """python ../../main.py disk modify-snapshot-attribute  --snapshot-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_snapshot(self):
        cmd = """python ../../main.py disk delete-snapshot  --snapshot-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_snapshots_capacity(self):
        cmd = """python ../../main.py disk describe-snapshots-capacity """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_snapshot_chain(self):
        cmd = """python ../../main.py disk describe-snapshot-chain """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_soldout(self):
        cmd = """python ../../main.py disk describe-soldout """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_snapshot_policy(self):
        cmd = """python ../../main.py disk create-snapshot-policy  --name 'xxx' --interval '5' --effective-time 'xxx' --snapshot-lifecycle '5' --status '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_update_snapshot_policy(self):
        cmd = """python ../../main.py disk update-snapshot-policy  --policy-id 'xxx' --name 'xxx' --interval '5' --effective-time 'xxx' --snapshot-lifecycle '5' --status '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_snapshot_policy(self):
        cmd = """python ../../main.py disk delete-snapshot-policy  --policy-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_snapshot_policies(self):
        cmd = """python ../../main.py disk describe-snapshot-policies """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_snap_polices(self):
        cmd = """python ../../main.py disk describe-snap-polices """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_apply_snapshot_policies(self):
        cmd = """python ../../main.py disk apply-snapshot-policies """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_snapshot_policy_disk_relations(self):
        cmd = """python ../../main.py disk describe-snapshot-policy-disk-relations """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

