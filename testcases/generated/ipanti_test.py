# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class IpantiTest(unittest.TestCase):

    def test_describe_ddo_sattack_logs(self):
        cmd = """python ../../main.py ipanti describe-ddo-sattack-logs  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccattack_logs(self):
        cmd = """python ../../main.py ipanti describe-ccattack-logs  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccattack_log_details(self):
        cmd = """python ../../main.py ipanti describe-ccattack-log-details  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_attack_statistics(self):
        cmd = """python ../../main.py ipanti describe-attack-statistics  --start-time 'xxx' --end-time 'xxx' --type '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_attack_type_count(self):
        cmd = """python ../../main.py ipanti describe-attack-type-count  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ddo_sgraph(self):
        cmd = """python ../../main.py ipanti describe-ddo-sgraph  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_fwd_graph(self):
        cmd = """python ../../main.py ipanti describe-fwd-graph  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccgraph(self):
        cmd = """python ../../main.py ipanti describe-ccgraph  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_forward_rules(self):
        cmd = """python ../../main.py ipanti describe-forward-rules  --instance-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_forward_rule(self):
        cmd = """python ../../main.py ipanti create-forward-rule  --instance-id 'xxx' --forward-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_forward_rule(self):
        cmd = """python ../../main.py ipanti describe-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_forward_rule(self):
        cmd = """python ../../main.py ipanti modify-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx' --forward-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_forward_rule(self):
        cmd = """python ../../main.py ipanti delete-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_switch_forward_rule_protect(self):
        cmd = """python ../../main.py ipanti switch-forward-rule-protect  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_switch_forward_rule_origin(self):
        cmd = """python ../../main.py ipanti switch-forward-rule-origin  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_protection_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti describe-protection-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_protection_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti modify-protection-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx' --forward-protection-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_geo_areas(self):
        cmd = """python ../../main.py ipanti describe-geo-areas """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_black_list_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti describe-black-list-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_black_list_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti modify-black-list-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx' --modify-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_black_list_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti enable-black-list-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_black_list_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti disable-black-list-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_white_list_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti describe-white-list-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_white_list_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti modify-white-list-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx' --modify-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_white_list_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti enable-white-list-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_white_list_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti disable-white-list-rule-of-forward-rule  --instance-id 'xxx' --forward-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_instances(self):
        cmd = """python ../../main.py ipanti describe-instances """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_instance(self):
        cmd = """python ../../main.py ipanti create-instance  --create-instance-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_instance(self):
        cmd = """python ../../main.py ipanti describe-instance  --instance-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_instance_name(self):
        cmd = """python ../../main.py ipanti modify-instance-name  --instance-id 'xxx' --rename-instance-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_epb(self):
        cmd = """python ../../main.py ipanti modify-epb  --instance-id 'xxx' --modify-instance-epbspec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_alarm_config(self):
        cmd = """python ../../main.py ipanti describe-alarm-config  --instance-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_alarm_config(self):
        cmd = """python ../../main.py ipanti modify-alarm-config  --instance-id 'xxx' --alarm-config-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_name_list(self):
        cmd = """python ../../main.py ipanti describe-name-list """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_protection_statistics(self):
        cmd = """python ../../main.py ipanti describe-protection-statistics """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_check_name(self):
        cmd = """python ../../main.py ipanti check-name  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_vpc_ip_list(self):
        cmd = """python ../../main.py ipanti describe-vpc-ip-list """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_cps_ip_list(self):
        cmd = """python ../../main.py ipanti describe-cps-ip-list """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ip_sets(self):
        cmd = """python ../../main.py ipanti describe-ip-sets  --instance-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_ip_set(self):
        cmd = """python ../../main.py ipanti create-ip-set  --instance-id 'xxx' --ip-set-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ip_set(self):
        cmd = """python ../../main.py ipanti describe-ip-set  --instance-id 'xxx' --ip-set-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_ip_set(self):
        cmd = """python ../../main.py ipanti delete-ip-set  --instance-id 'xxx' --ip-set-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ip_set_usage(self):
        cmd = """python ../../main.py ipanti describe-ip-set-usage  --instance-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_web_rules(self):
        cmd = """python ../../main.py ipanti describe-web-rules  --instance-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_web_rule(self):
        cmd = """python ../../main.py ipanti create-web-rule  --instance-id 'xxx' --web-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_web_rule(self):
        cmd = """python ../../main.py ipanti describe-web-rule  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_web_rule(self):
        cmd = """python ../../main.py ipanti modify-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_web_rule(self):
        cmd = """python ../../main.py ipanti delete-web-rule  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_switch_web_rule_protect(self):
        cmd = """python ../../main.py ipanti switch-web-rule-protect  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_switch_web_rule_origin(self):
        cmd = """python ../../main.py ipanti switch-web-rule-origin  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_web_rule_cc(self):
        cmd = """python ../../main.py ipanti enable-web-rule-cc  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_web_rule_cc(self):
        cmd = """python ../../main.py ipanti disable-web-rule-cc  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_web_rule_ccobserver_mode(self):
        cmd = """python ../../main.py ipanti enable-web-rule-ccobserver-mode  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_web_rule_ccobserver_mode(self):
        cmd = """python ../../main.py ipanti disable-web-rule-ccobserver-mode  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccprotection_rules_of_web_rule(self):
        cmd = """python ../../main.py ipanti describe-ccprotection-rules-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_ccprotection_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti create-ccprotection-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --cc-protection-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccprotection_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti describe-ccprotection-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --cc-protection-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_ccprotection_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti modify-ccprotection-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --cc-protection-rule-id 'xxx' --cc-protection-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_ccprotection_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti delete-ccprotection-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --cc-protection-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_ccprotection_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti enable-ccprotection-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --cc-protection-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_ccprotection_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti disable-ccprotection-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --cc-protection-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccprotection_config_of_web_rule(self):
        cmd = """python ../../main.py ipanti describe-ccprotection-config-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_ccprotection_config_of_web_rule(self):
        cmd = """python ../../main.py ipanti modify-ccprotection-config-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --cc-protection-config-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccprotection_default_config_of_web_rule(self):
        cmd = """python ../../main.py ipanti describe-ccprotection-default-config-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_cert_info(self):
        cmd = """python ../../main.py ipanti modify-cert-info  --instance-id 'xxx' --web-rule-id 'xxx' --cert-info-modify-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_web_rule_black_list_usage(self):
        cmd = """python ../../main.py ipanti describe-web-rule-black-list-usage  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_black_list_rules_of_web_rule(self):
        cmd = """python ../../main.py ipanti describe-black-list-rules-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_black_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti create-black-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-black-list-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_black_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti describe-black-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-black-list-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_black_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti modify-black-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-black-list-rule-id 'xxx' --web-black-list-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_black_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti delete-black-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-black-list-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_web_rule_black_list(self):
        cmd = """python ../../main.py ipanti enable-web-rule-black-list  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_black_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti enable-black-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-black-list-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_web_rule_black_list(self):
        cmd = """python ../../main.py ipanti disable-web-rule-black-list  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_black_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti disable-black-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-black-list-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_web_rule_white_list_usage(self):
        cmd = """python ../../main.py ipanti describe-web-rule-white-list-usage  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_white_list_rules_of_web_rule(self):
        cmd = """python ../../main.py ipanti describe-white-list-rules-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_white_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti create-white-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-white-list-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_white_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti describe-white-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-white-list-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_white_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti modify-white-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-white-list-rule-id 'xxx' --web-white-list-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_white_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti delete-white-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-white-list-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_web_rule_white_list(self):
        cmd = """python ../../main.py ipanti enable-web-rule-white-list  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_white_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti enable-white-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-white-list-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_web_rule_white_list(self):
        cmd = """python ../../main.py ipanti disable-web-rule-white-list  --instance-id 'xxx' --web-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_white_list_rule_of_web_rule(self):
        cmd = """python ../../main.py ipanti disable-white-list-rule-of-web-rule  --instance-id 'xxx' --web-rule-id 'xxx' --web-white-list-rule-id 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_web_rule_black_list_geo_areas(self):
        cmd = """python ../../main.py ipanti describe-web-rule-black-list-geo-areas """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_web_rule_white_list_geo_areas(self):
        cmd = """python ../../main.py ipanti describe-web-rule-white-list-geo-areas """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

