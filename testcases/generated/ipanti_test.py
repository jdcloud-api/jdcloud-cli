# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

import unittest
import os
import json


class IpantiTest(unittest.TestCase):

    def test_describe_ddo_sattack_logs(self):
        cmd = """python ../../main.py ipanti describe-ddo-sattack-logs  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccattack_logs(self):
        cmd = """python ../../main.py ipanti describe-ccattack-logs  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccattack_log_details(self):
        cmd = """python ../../main.py ipanti describe-ccattack-log-details  --start-time 'xxx' --end-time 'xxx' --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_download_ddo_sattack_logs(self):
        cmd = """python ../../main.py ipanti download-ddo-sattack-logs  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_download_ccattack_logs(self):
        cmd = """python ../../main.py ipanti download-ccattack-logs  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_download_ccattack_log_details(self):
        cmd = """python ../../main.py ipanti download-ccattack-log-details  --start-time 'xxx' --end-time 'xxx' --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_attack_statistics(self):
        cmd = """python ../../main.py ipanti describe-attack-statistics  --start-time 'xxx' --end-time 'xxx' --type '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_attack_type_count(self):
        cmd = """python ../../main.py ipanti describe-attack-type-count  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ddo_sgraph(self):
        cmd = """python ../../main.py ipanti describe-ddo-sgraph  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_fwd_graph(self):
        cmd = """python ../../main.py ipanti describe-fwd-graph  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccgraph(self):
        cmd = """python ../../main.py ipanti describe-ccgraph  --start-time 'xxx' --end-time 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_forward_rules(self):
        cmd = """python ../../main.py ipanti describe-forward-rules  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_forward_rule(self):
        cmd = """python ../../main.py ipanti create-forward-rule  --instance-id '5' --forward-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_forward_rule(self):
        cmd = """python ../../main.py ipanti describe-forward-rule  --instance-id '5' --forward-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_forward_rule(self):
        cmd = """python ../../main.py ipanti modify-forward-rule  --instance-id '5' --forward-rule-id '5' --forward-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_forward_rule(self):
        cmd = """python ../../main.py ipanti delete-forward-rule  --instance-id '5' --forward-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_switch_forward_rule_protect(self):
        cmd = """python ../../main.py ipanti switch-forward-rule-protect  --instance-id '5' --forward-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_switch_forward_rule_origin(self):
        cmd = """python ../../main.py ipanti switch-forward-rule-origin  --instance-id '5' --forward-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_protection_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti describe-protection-rule-of-forward-rule  --instance-id '5' --forward-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_protection_rule_of_forward_rule(self):
        cmd = """python ../../main.py ipanti modify-protection-rule-of-forward-rule  --instance-id '5' --forward-rule-id '5' --forward-protection-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_geo_areas(self):
        cmd = """python ../../main.py ipanti describe-geo-areas """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_instances(self):
        cmd = """python ../../main.py ipanti describe-instances """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_instance(self):
        cmd = """python ../../main.py ipanti create-instance  --create-instance-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_instance(self):
        cmd = """python ../../main.py ipanti describe-instance  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_instance_name(self):
        cmd = """python ../../main.py ipanti modify-instance-name  --instance-id '5' --rename-instance-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_epb(self):
        cmd = """python ../../main.py ipanti modify-epb  --instance-id '5' --modify-instance-epbspec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_instance_cc(self):
        cmd = """python ../../main.py ipanti modify-instance-cc  --instance-id '5' --c-cspec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_instance_cc(self):
        cmd = """python ../../main.py ipanti enable-instance-cc  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_instance_cc(self):
        cmd = """python ../../main.py ipanti disable-instance-cc  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_instance_url_white_list(self):
        cmd = """python ../../main.py ipanti modify-instance-url-white-list  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_instance_url_white_list(self):
        cmd = """python ../../main.py ipanti enable-instance-url-white-list  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_instance_url_white_list(self):
        cmd = """python ../../main.py ipanti disable-instance-url-white-list  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_instance_ip_black_list(self):
        cmd = """python ../../main.py ipanti modify-instance-ip-black-list  --instance-id '5' --ip-bw-list-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_instance_ip_black_list(self):
        cmd = """python ../../main.py ipanti enable-instance-ip-black-list  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_instance_ip_black_list(self):
        cmd = """python ../../main.py ipanti disable-instance-ip-black-list  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_instance_ip_white_list(self):
        cmd = """python ../../main.py ipanti modify-instance-ip-white-list  --instance-id '5' --ip-bw-list-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_instance_ip_white_list(self):
        cmd = """python ../../main.py ipanti enable-instance-ip-white-list  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_instance_ip_white_list(self):
        cmd = """python ../../main.py ipanti disable-instance-ip-white-list  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_ccobserver_mode(self):
        cmd = """python ../../main.py ipanti enable-ccobserver-mode  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_ccobserver_mode(self):
        cmd = """python ../../main.py ipanti disable-ccobserver-mode  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_ccip_limit(self):
        cmd = """python ../../main.py ipanti enable-ccip-limit  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_ccip_limit(self):
        cmd = """python ../../main.py ipanti disable-ccip-limit  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_set_ccip_limit(self):
        cmd = """python ../../main.py ipanti set-ccip-limit  --instance-id '5' --c-cspec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_alarm_config(self):
        cmd = """python ../../main.py ipanti describe-alarm-config  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_alarm_config(self):
        cmd = """python ../../main.py ipanti modify-alarm-config  --instance-id '5' --alarm-config-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_name_list(self):
        cmd = """python ../../main.py ipanti describe-name-list """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_protection_statistics(self):
        cmd = """python ../../main.py ipanti describe-protection-statistics """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_check_name(self):
        cmd = """python ../../main.py ipanti check-name  --name 'xxx'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_vpc_ip_list(self):
        cmd = """python ../../main.py ipanti describe-vpc-ip-list """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_ccdefault_thresholds(self):
        cmd = """python ../../main.py ipanti describe-ccdefault-thresholds """
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_web_rules(self):
        cmd = """python ../../main.py ipanti describe-web-rules  --instance-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_create_web_rule(self):
        cmd = """python ../../main.py ipanti create-web-rule  --instance-id '5' --web-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_web_rule(self):
        cmd = """python ../../main.py ipanti describe-web-rule  --instance-id '5' --web-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_web_rule(self):
        cmd = """python ../../main.py ipanti modify-web-rule  --instance-id '5' --web-rule-id '5' --web-rule-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_delete_web_rule(self):
        cmd = """python ../../main.py ipanti delete-web-rule  --instance-id '5' --web-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_switch_web_rule_protect(self):
        cmd = """python ../../main.py ipanti switch-web-rule-protect  --instance-id '5' --web-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_switch_web_rule_origin(self):
        cmd = """python ../../main.py ipanti switch-web-rule-origin  --instance-id '5' --web-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_enable_web_rule_cc(self):
        cmd = """python ../../main.py ipanti enable-web-rule-cc  --instance-id '5' --web-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_disable_web_rule_cc(self):
        cmd = """python ../../main.py ipanti disable-web-rule-cc  --instance-id '5' --web-rule-id '5'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_modify_cert_info(self):
        cmd = """python ../../main.py ipanti modify-cert-info  --instance-id '5' --web-rule-id '5' --cert-info-modify-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

    def test_describe_cert_info(self):
        cmd = """python ../../main.py ipanti describe-cert-info  --instance-id '5' --web-rule-id '5' --cert-info-describe-spec '{"":""}'"""
        with os.popen(cmd) as f:
            content = f.read()

        print(content)
        result = json.loads(content)
        self.assertIsInstance(result, dict)

