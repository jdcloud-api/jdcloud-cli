# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.controllers.websocket.exec_start_request import exec_start
from jdcloud_cli.controllers.websocket.attach_request import attach
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton
from jdcloud_cli.config import ProfileManager


class PodController(BaseController):
    class Meta:
        label = 'pod'
        help = 'pod'
        description = '''
        pod cli 子命令，pod 服务。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/pod/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--container-name'], dict(help="""(string) container name """, dest='containerName',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取 pod 中某个容器的详情 ''',
        description='''
            获取 pod 中某个容器的详情

            示例: jdc pod describe-container  --pod-id xxx --container-name xxx
        ''',
    )
    def describe_container(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DescribeContainerRequest import DescribeContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--container-name'], dict(help="""(string) container name """, dest='containerName',  required=True)),
            (['--command'], dict(help="""(array: string) 执行的命令 """, dest='command',  required=False)),
            (['--tty'], dict(help="""(bool) 执行命令是否分配tty。默认不分配 """, dest='tty',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建 exec;  ''',
        description='''
            创建 exec; 

            示例: jdc pod exec-create  --pod-id xxx --container-name xxx
        ''',
    )
    def exec_create(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.ExecCreateRequest import ExecCreateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ExecCreateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--container-name'], dict(help="""(string) container name """, dest='containerName',  required=True)),
            (['--exec-id'], dict(help="""(string) NA """, dest='execId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取exec退出码 ''',
        description='''
            获取exec退出码

            示例: jdc pod exec-get-exit-code  --pod-id xxx --container-name xxx --exec-id xxx
        ''',
    )
    def exec_get_exit_code(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.ExecGetExitCodeRequest import ExecGetExitCodeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ExecGetExitCodeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--container-name'], dict(help="""(string) container name """, dest='containerName',  required=True)),
            (['--height'], dict(help="""(int) tty row，取值范围：[10, 2000] """, dest='height', type=int, required=True)),
            (['--width'], dict(help="""(int) tty column，取值范围：[10, 1000] """, dest='width', type=int, required=True)),
            (['--exec-id'], dict(help="""(string) exec ID """, dest='execId',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置TTY大小 ''',
        description='''
            设置TTY大小

            示例: jdc pod resize-tty  --pod-id xxx --container-name xxx --height 0 --width 0
        ''',
    )
    def resize_tty(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.ResizeTTYRequest import ResizeTTYRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ResizeTTYRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--filters'], dict(help="""(array: filter) instanceTypes - 实例规格，精确匹配，支持多个; az - 可用区，精确匹配，支持多个;  """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询实例规格信息列表;  ''',
        description='''
            查询实例规格信息列表; 

            示例: jdc pod describe-instance-types 
        ''',
    )
    def describe_instance_types(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DescribeInstanceTypesRequest import DescribeInstanceTypesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeInstanceTypesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为20；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) podId - pod ID，精确匹配，支持多个; privateIpAddress - 主网卡IP地址，精确匹配，支持单个; az - 可用区，精确匹配，支持多个; vpcId - 私有网络ID，精确匹配，支持多个; phase - pod 状态，精确匹配，支持多个; name - 实例名称，模糊匹配，支持单个; subnetId - 镜像ID，精确匹配，支持多个;  """, dest='filters',  required=False)),
            (['--tags'], dict(help="""(array: tagFilter) Tag筛选条件 """, dest='tags',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量查询 pod 的详细信息<br>; 此接口支持分页查询，默认每页20条。;  ''',
        description='''
            批量查询 pod 的详细信息<br>; 此接口支持分页查询，默认每页20条。; 

            示例: jdc pod describe-pods 
        ''',
    )
    def describe_pods(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DescribePodsRequest import DescribePodsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribePodsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-spec'], dict(help="""(podSpec) pod 创建参数 """, dest='podSpec',  required=True)),
            (['--max-count'], dict(help="""(int) 购买实例数量；取值范围：[1,100] """, dest='maxCount', type=int, required=True)),
            (['--client-token'], dict(help="""(string) 保证请求幂等性的字符串；最大长度64个ASCII字符 """, dest='clientToken',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建一台或多台 pod; - 创建pod需要通过实名认证; - hostname规范;     - 支持两种方式：以标签方式书写或以完整主机名方式书写;     - 标签规范;         - 0-9，a-z(不分大小写)和-（减号），其他的都是无效的字符串;         - 不能以减号开始，也不能以减号结尾;         - 最小1个字符，最大63个字符;     - 完整的主机名由一系列标签与点连接组成;         - 标签与标签之间使用“.”(点)进行连接;         - 不能以“.”(点)开始，也不能以“.”(点)结尾;         - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符; - 网络配置;     - 指定主网卡配置信息;         - 必须指定subnetId;         - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-100]Mbps，步进1Mbps;         - 可以指定网卡的主IP(primaryIpAddress)和辅助IP(secondaryIpAddresses)，此时maxCount只能为1;         - 可以设置网卡的自动删除autoDelete属性，指明是否删除实例时自动删除网卡;         - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内;         - 一个 pod 创建时至多指定5个安全组;         - 主网卡deviceIndex设置为1; - 存储;     - volume分为container system disk和pod data volume，container system disk的挂载目录是/，data volume的挂载目录可以随意指定;     - container system disk;         - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1;         - 磁盘大小;             - 所有类型：范围[20,100]GB，步长为10G;         - 自动删除;             - 默认自动删除;         - 可以选择已存在的云硬盘;     - data volume;         - 当前只能选择cloud类别;         - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1;         - 磁盘大小;             - 所有类型：范围[20,2000]GB，步长为10G;         - 自动删除;             - 默认自动删除;         - 可以选择已存在的云硬盘;         - 可以从快照创建磁盘; - pod 容器日志;     - default：默认在本地分配10MB的存储空间，自动rotate; - DNS-1123 label规范;     - 支持数字、小写字母、英文中划线“-”，但不支持以“-”作为开始字符和结束字符，1~63字符。;     - 例子: my-name, 123-abc; - DNS-1123 subdomain规范;     - 由一或多个标签组成，标签之间用'.'分隔；标签可由小写字母、数字、英文中划线'-'构成，标签首尾不可为'-'；所有字符总长度为1~253。;     - 例子: example.com, registry.docker-cn.com; - 其他;     - 创建完成后，pod 状态为running;     - maxCount为最大努力，不保证一定能达到maxCount;  ''',
        description='''
            创建一台或多台 pod; - 创建pod需要通过实名认证; - hostname规范;     - 支持两种方式：以标签方式书写或以完整主机名方式书写;     - 标签规范;         - 0-9，a-z(不分大小写)和-（减号），其他的都是无效的字符串;         - 不能以减号开始，也不能以减号结尾;         - 最小1个字符，最大63个字符;     - 完整的主机名由一系列标签与点连接组成;         - 标签与标签之间使用“.”(点)进行连接;         - 不能以“.”(点)开始，也不能以“.”(点)结尾;         - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符; - 网络配置;     - 指定主网卡配置信息;         - 必须指定subnetId;         - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-100]Mbps，步进1Mbps;         - 可以指定网卡的主IP(primaryIpAddress)和辅助IP(secondaryIpAddresses)，此时maxCount只能为1;         - 可以设置网卡的自动删除autoDelete属性，指明是否删除实例时自动删除网卡;         - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内;         - 一个 pod 创建时至多指定5个安全组;         - 主网卡deviceIndex设置为1; - 存储;     - volume分为container system disk和pod data volume，container system disk的挂载目录是/，data volume的挂载目录可以随意指定;     - container system disk;         - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1;         - 磁盘大小;             - 所有类型：范围[20,100]GB，步长为10G;         - 自动删除;             - 默认自动删除;         - 可以选择已存在的云硬盘;     - data volume;         - 当前只能选择cloud类别;         - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1;         - 磁盘大小;             - 所有类型：范围[20,2000]GB，步长为10G;         - 自动删除;             - 默认自动删除;         - 可以选择已存在的云硬盘;         - 可以从快照创建磁盘; - pod 容器日志;     - default：默认在本地分配10MB的存储空间，自动rotate; - DNS-1123 label规范;     - 支持数字、小写字母、英文中划线“-”，但不支持以“-”作为开始字符和结束字符，1~63字符。;     - 例子: my-name, 123-abc; - DNS-1123 subdomain规范;     - 由一或多个标签组成，标签之间用'.'分隔；标签可由小写字母、数字、英文中划线'-'构成，标签首尾不可为'-'；所有字符总长度为1~253。;     - 例子: example.com, registry.docker-cn.com; - 其他;     - 创建完成后，pod 状态为running;     - maxCount为最大努力，不保证一定能达到maxCount; 

            示例: jdc pod create-pods  --pod-spec {"":""} --max-count 0
        ''',
    )
    def create_pods(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.CreatePodsRequest import CreatePodsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreatePodsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-name'], dict(help="""(string) 用户定义的 pod 名称，符合 DNS-1123 subdomain 规范。 """, dest='podName',  required=True)),
            (['--max-count'], dict(help="""(int) 需要创建的 pod 总数，默认创建一个，不同的总数会对校验结果产生影响。 """, dest='maxCount', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' podName 是否符合命名规范，以及查询指定 podName 区域内是否已经存在。;  ''',
        description='''
            podName 是否符合命名规范，以及查询指定 podName 区域内是否已经存在。; 

            示例: jdc pod check-pod-name  --pod-name xxx
        ''',
    )
    def check_pod_name(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.CheckPodNameRequest import CheckPodNameRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CheckPodNameRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询一个 pod 的详细信息;  ''',
        description='''
            查询一个 pod 的详细信息; 

            示例: jdc pod describe-pod  --pod-id xxx
        ''',
    )
    def describe_pod(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DescribePodRequest import DescribePodRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribePodRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' pod 状态必须为 stopped、running 或 error状态。 <br>; 按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。<br>; 只能支持主动删除按量计费类型的实例。包年包月过期的 pod 也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。;  [MFA enabled] ''',
        description='''
            pod 状态必须为 stopped、running 或 error状态。 <br>; 按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。<br>; 只能支持主动删除按量计费类型的实例。包年包月过期的 pod 也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。;  [MFA enabled]

            示例: jdc pod delete-pod  --pod-id xxx
        ''',
    )
    def delete_pod(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DeletePodRequest import DeletePodRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeletePodRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启动处于关闭状态的单个 pod ，处在任务执行中的 pod 无法启动。<br>; pod 实例或其绑定的云盘已欠费时，容器将无法正常启动。<br>;  ''',
        description='''
            启动处于关闭状态的单个 pod ，处在任务执行中的 pod 无法启动。<br>; pod 实例或其绑定的云盘已欠费时，容器将无法正常启动。<br>; 

            示例: jdc pod start-pod  --pod-id xxx
        ''',
    )
    def start_pod(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.StartPodRequest import StartPodRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StartPodRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 停止处于运行状态的单个实例，处于任务执行中的 pod 无法启动。;  ''',
        description='''
            停止处于运行状态的单个实例，处于任务执行中的 pod 无法启动。; 

            示例: jdc pod stop-pod  --pod-id xxx
        ''',
    )
    def stop_pod(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.StopPodRequest import StopPodRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StopPodRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--description'], dict(help="""(string) 修改后的描述 """, dest='description',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改 pod 的描述。;  ''',
        description='''
            修改 pod 的描述。; 

            示例: jdc pod modify-pod-attribute  --pod-id xxx
        ''',
    )
    def modify_pod_attribute(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.ModifyPodAttributeRequest import ModifyPodAttributeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ModifyPodAttributeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--elastic-ip-id'], dict(help="""(string) 弹性IP ID """, dest='elasticIpId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' pod 绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. <br>; 一个 pod 只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。<br>; 如果是黑名单中的用户，会返回错误。;  ''',
        description='''
            pod 绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. <br>; 一个 pod 只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。<br>; 如果是黑名单中的用户，会返回错误。; 

            示例: jdc pod associate-elastic-ip  --pod-id xxx --elastic-ip-id xxx
        ''',
    )
    def associate_elastic_ip(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.AssociateElasticIpRequest import AssociateElasticIpRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AssociateElasticIpRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--elastic-ip-id'], dict(help="""(string) 弹性IP ID """, dest='elasticIpId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' pod 解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.;  ''',
        description='''
            pod 解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.; 

            示例: jdc pod disassociate-elastic-ip  --pod-id xxx --elastic-ip-id xxx
        ''',
    )
    def disassociate_elastic_ip(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DisassociateElasticIpRequest import DisassociateElasticIpRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisassociateElasticIpRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--container-name'], dict(help="""(string) container name """, dest='containerName',  required=True)),
            (['--tail-lines'], dict(help="""(int) 返回日志文件中倒数 tailLines 行，如不指定，默认从容器启动时或 sinceSeconds 指定的时间读取。;  """, dest='tailLines', type=int, required=False)),
            (['--since-seconds'], dict(help="""(int) 返回相对于当前时间之前sinceSeconds之内的日志。;  """, dest='sinceSeconds', type=int, required=False)),
            (['--limit-bytes'], dict(help="""(int) 限制返回的日志文件内容字节数，取值范围 [1-4]KB，最大 4KB.;  """, dest='limitBytes', type=int, required=False)),
            (['--start-time'], dict(help="""(string) 日志时间上限，不传表示不限时间;  """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 日志时间下限，不传表示不限时间;  """, dest='endTime',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询单个容器日志;  ''',
        description='''
            查询单个容器日志; 

            示例: jdc pod get-container-logs  --pod-id xxx --container-name xxx
        ''',
    )
    def get_container_logs(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.GetContainerLogsRequest import GetContainerLogsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetContainerLogsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--containers'], dict(help="""(array: rebuildContainerSpec) 重置容器相关参数 """, dest='containers',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 对 pod 中的容器使用新的镜像进行重置，pod 需要处于关闭状态。;  ''',
        description='''
            对 pod 中的容器使用新的镜像进行重置，pod 需要处于关闭状态。; 

            示例: jdc pod rebuild-pod  --pod-id xxx --containers [{"":""}]
        ''',
    )
    def rebuild_pod(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.RebuildPodRequest import RebuildPodRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = RebuildPodRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId',  required=True)),
            (['--instance-type'], dict(help="""(string) 新实例类型，不可与原实例类型相同 """, dest='instanceType',  required=True)),
            (['--container-resources'], dict(help="""(array: containerResourceSpec) 新实例类型，不可与原实例类型相同 """, dest='containerResources',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 调整pod实例类型配置。; - pod phase 需是停止状态；; - 支持升配、降配；**不支持原有规格**; - 计费类型不变;     - 包年包月：需要计算配置差价，如果所选配置价格高，需要补齐到期前的差价，到期时间不变；如果所选配置价格低，需要延长到期时间;     - 按配置：按照所选规格，进行计费; - 支持对 pod 中的容器进行资源限制、资源需求的调整;     - 容器需求的总资源占用不得超过 pod 的实例类型;     - 容器资源限制不得超过 pod 的实例类型;  ''',
        description='''
            调整pod实例类型配置。; - pod phase 需是停止状态；; - 支持升配、降配；**不支持原有规格**; - 计费类型不变;     - 包年包月：需要计算配置差价，如果所选配置价格高，需要补齐到期前的差价，到期时间不变；如果所选配置价格低，需要延长到期时间;     - 按配置：按照所选规格，进行计费; - 支持对 pod 中的容器进行资源限制、资源需求的调整;     - 容器需求的总资源占用不得超过 pod 的实例类型;     - 容器资源限制不得超过 pod 的实例类型; 

            示例: jdc pod resize-pod  --pod-id xxx --instance-type xxx
        ''',
    )
    def resize_pod(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.ResizePodRequest import ResizePodRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ResizePodRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--resource-type'], dict(help="""(string) resourceType - 资源类型，支持 [container, pod, secret];  """, dest='resourceType',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询资源的配额，支持：原生容器 pod 和 secret.;  ''',
        description='''
            查询资源的配额，支持：原生容器 pod 和 secret.; 

            示例: jdc pod describe-quota  --resource-type xxx
        ''',
    )
    def describe_quota(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DescribeQuotaRequest import DescribeQuotaRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeQuotaRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为20；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) name - secret名称，支持模糊搜索;  """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询 secret 列表。<br> ; 此接口支持分页查询，默认每页20条。;  ''',
        description='''
            查询 secret 列表。<br> ; 此接口支持分页查询，默认每页20条。; 

            示例: jdc pod describe-secrets 
        ''',
    )
    def describe_secrets(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DescribeSecretsRequest import DescribeSecretsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--name'], dict(help="""(string) 机密数据名称，不能重复;  """, dest='name',  required=True)),
            (['--secret-type'], dict(help="""(string) 机密数据的类型，目前仅支持：docker-registry 类型，用来和docker registry认证的类型。;  """, dest='secretType',  required=True)),
            (['--data'], dict(help="""(dockerRegistryData) 机密的数据。<br>; key 的有效字符包括字母、数字、-、_和.； <br>; value 是 Base64 编码的字符串，不能包含换行符（在 linux 下使用 base64 -w 0选项），每个value长度上限为4KB，整个data的长度不能超过256KB; <br>; 必须包含server、username、password 字段，email 字段是可选的。<br>;  """, dest='data',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建一个 secret，用于存放镜像仓库机密相关信息。;  ''',
        description='''
            创建一个 secret，用于存放镜像仓库机密相关信息。; 

            示例: jdc pod create-secret  --name xxx --secret-type xxx --data {"":""}
        ''',
    )
    def create_secret(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.CreateSecretRequest import CreateSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--name'], dict(help="""(string) Secret Name """, dest='name',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询单个 secret 详情;  ''',
        description='''
            查询单个 secret 详情; 

            示例: jdc pod describe-secret  --name xxx
        ''',
    )
    def describe_secret(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DescribeSecretRequest import DescribeSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--name'], dict(help="""(string) Secret Name """, dest='name',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除单个 secret;  ''',
        description='''
            删除单个 secret; 

            示例: jdc pod delete-secret  --name xxx
        ''',
    )
    def delete_secret(self):
        client_factory = ClientFactory('pod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.pod.apis.DeleteSecretRequest import DeleteSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)


    @expose(
        arguments=[
            (['--region-id'], dict(help='(string) region id', dest='regionId', choices=['cn-north-1', 'cn-east-1', 'cn-east-2', 'cn-south-1'], required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId', required=True)),
            (['--container-name'], dict(help="""(string) container name """, dest='containerName', required=True)),
            (['--exec-id'], dict(help='(string) exec id', dest='execId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 执行exec，此接口需要升级Http协议到WebSocket ''',
        description='''
            执行exec，此接口需要升级Http协议到WebSocket.

            示例: jdc pod exec-start --pod-id xxx --container-name xxx --exec-id xxx
        '''
    )
    def exec_start(self):
        profile_region_id = ProfileManager().load_current_profile().region_id
        region_id = self.app.pargs.regionId if self.app.pargs.regionId else profile_region_id
        headers = collect_user_headers(self.app)
        exec_start(self.app, 'pod', headers, region_id, self.app.pargs.containerName, self.app.pargs.execId, pod_id=self.app.pargs.podId)

    @expose(
        arguments=[
            (['--region-id'], dict(help='(string) region id', dest='regionId', choices=['cn-north-1', 'cn-east-1', 'cn-east-2', 'cn-south-1'], required=False)),
            (['--pod-id'], dict(help="""(string) Pod ID """, dest='podId', required=True)),
            (['--container-name'], dict(help='(string) container name', dest='containerName', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 绑定输入输出到容器 ''',
        description='''
            绑定输入输出到容器。

            示例: jdc pod attach --pod-id xxx --container-name xxx
        '''
    )
    def attach(self):
        profile_region_id = ProfileManager().load_current_profile().region_id
        region_id = self.app.pargs.regionId if self.app.pargs.regionId else profile_region_id
        headers = collect_user_headers(self.app)
        attach(self.app, 'pod', headers, region_id, self.app.pargs.containerName, pod_id=self.app.pargs.podId)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-container','exec-create','exec-get-exit-code','resize-tty','describe-instance-types','describe-pods','create-pods','check-pod-name','describe-pod','delete-pod','start-pod','stop-pod','modify-pod-attribute','associate-elastic-ip','disassociate-elastic-ip','get-container-logs','rebuild-pod','resize-pod','describe-quota','describe-secrets','create-secret','describe-secret','delete-secret',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串.

            示例: jdc pod generate-skeleton --api describeContainer
        ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('pod', self.app.pargs.api)
        skeleton.show()