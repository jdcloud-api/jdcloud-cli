# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class LiveController(BaseController):
    class Meta:
        label = 'live'
        help = 'Live API'
        description = '''
        live cli 子命令，视频直播相关接口。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/xxx/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 域名下的app列表过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询域名下的APP列表 ''',
        description='''
            查询域名下的APP列表。

            示例: jdc live describe-live-app 
        ''',
    )
    def describe_live_app(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveAppRequest import DescribeLiveAppRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveAppRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 直播的推流域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) appName """, dest='appName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加直播APP ''',
        description='''
            添加直播APP。

            示例: jdc live add-live-app  --publish-domain xxx --app-name xxx
        ''',
    )
    def add_live_app(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveAppRequest import AddLiveAppRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveAppRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 直播的推流域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) appName """, dest='appName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用APP ''',
        description='''
            启用APP。

            示例: jdc live start-live-app  --publish-domain xxx --app-name xxx
        ''',
    )
    def start_live_app(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.StartLiveAppRequest import StartLiveAppRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StartLiveAppRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 直播的推流域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) appName """, dest='appName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 停用APP ''',
        description='''
            停用APP。

            示例: jdc live stop-live-app  --publish-domain xxx --app-name xxx
        ''',
    )
    def stop_live_app(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.StopLiveAppRequest import StopLiveAppRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StopLiveAppRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除APP ''',
        description='''
            删除APP。

            示例: jdc live delete-live-app  --publish-domain xxx --app-name xxx
        ''',
    )
    def delete_live_app(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveAppRequest import DeleteLiveAppRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveAppRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--publish-domain'], dict(help="""(string) 域名 """, dest='publishDomain',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询域名列表 ''',
        description='''
            查询域名列表。

            示例: jdc live describe-live-domains 
        ''',
    )
    def describe_live_domains(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveDomainsRequest import DescribeLiveDomainsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveDomainsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 直播的推流域名 """, dest='publishDomain',  required=True)),
            (['--play-domain'], dict(help="""(string) 直播的播放域名 """, dest='playDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加直播域名 ''',
        description='''
            添加直播域名。

            示例: jdc live add-live-domain  --publish-domain xxx --play-domain xxx
        ''',
    )
    def add_live_domain(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveDomainRequest import AddLiveDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 要启动的域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启动域名 ''',
        description='''
            启动域名。

            示例: jdc live start-live-domain  --publish-domain xxx
        ''',
    )
    def start_live_domain(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.StartLiveDomainRequest import StartLiveDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StartLiveDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 要停用的域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 停用域名 ''',
        description='''
            停用域名。

            示例: jdc live stop-live-domain  --publish-domain xxx
        ''',
    )
    def stop_live_domain(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.StopLiveDomainRequest import StopLiveDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StopLiveDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询指定域名相关信息 ''',
        description='''
            查询指定域名相关信息。

            示例: jdc live describe-live-domain-detail  --publish-domain xxx
        ''',
    )
    def describe_live_domain_detail(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveDomainDetailRequest import DescribeLiveDomainDetailRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveDomainDetailRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除域名 ''',
        description='''
            删除域名。

            示例: jdc live delete-live-domain  --publish-domain xxx
        ''',
    )
    def delete_live_domain(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveDomainRequest import DeleteLiveDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 域名列表查询过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询录制模板列表 ''',
        description='''
            查询录制模板列表。

            示例: jdc live describe-custom-live-stream-record-templates 
        ''',
    )
    def describe_custom_live_stream_record_templates(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeCustomLiveStreamRecordTemplatesRequest import DescribeCustomLiveStreamRecordTemplatesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCustomLiveStreamRecordTemplatesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--record-period'], dict(help="""(int) 自动录制周期 """, dest='recordPeriod', type=int, required=True)),
            (['--save-bucket'], dict(help="""(string) null """, dest='saveBucket',  required=True)),
            (['--save-endpoint'], dict(help="""(string) null """, dest='saveEndpoint',  required=True)),
            (['--record-file-type'], dict(help="""(string) 录制文件格式 """, dest='recordFileType',  required=True)),
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加直播录制模板 ''',
        description='''
            添加直播录制模板。

            示例: jdc live add-custom-live-stream-record-template  --record-period 0 --save-bucket xxx --save-endpoint xxx --record-file-type xxx --template xxx
        ''',
    )
    def add_custom_live_stream_record_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddCustomLiveStreamRecordTemplateRequest import AddCustomLiveStreamRecordTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddCustomLiveStreamRecordTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--publish-domain'], dict(help="""(string) 您的推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 录制模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加APP录制配置 ''',
        description='''
            添加APP录制配置。

            示例: jdc live add-live-stream-app-record  --app-name xxx --publish-domain xxx --template xxx
        ''',
    )
    def add_live_stream_app_record(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveStreamAppRecordRequest import AddLiveStreamAppRecordRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveStreamAppRecordRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 您的推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 录制模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加域名录制配置 ''',
        description='''
            添加域名录制配置。

            示例: jdc live add-live-stream-domain-record  --publish-domain xxx --template xxx
        ''',
    )
    def add_live_stream_domain_record(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveStreamDomainRecordRequest import AddLiveStreamDomainRecordRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveStreamDomainRecordRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 转码模板查询过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询录制配置 ''',
        description='''
            查询录制配置。

            示例: jdc live describe-custom-live-stream-record-config 
        ''',
    )
    def describe_custom_live_stream_record_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeCustomLiveStreamRecordConfigRequest import DescribeCustomLiveStreamRecordConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCustomLiveStreamRecordConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 您的推流加速域名 """, dest='publishDomain',  required=True)),
            (['--notify-url'], dict(help="""(string) 设置直播流信息推送到的 URL 地址 """, dest='notifyUrl',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置录制回调通知 ''',
        description='''
            设置录制回调通知。

            示例: jdc live set-live-stream-record-notify-config  --publish-domain xxx --notify-url xxx
        ''',
    )
    def set_live_stream_record_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.SetLiveStreamRecordNotifyConfigRequest import SetLiveStreamRecordNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetLiveStreamRecordNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除用户自定义录制模板 ''',
        description='''
            删除用户自定义录制模板。

            示例: jdc live delete-custom-live-stream-record-template  --template xxx
        ''',
    )
    def delete_custom_live_stream_record_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteCustomLiveStreamRecordTemplateRequest import DeleteCustomLiveStreamRecordTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteCustomLiveStreamRecordTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除APP录制配置 ''',
        description='''
            删除APP录制配置。

            示例: jdc live delete-live-stream-app-record  --publish-domain xxx --app-name xxx --template xxx
        ''',
    )
    def delete_live_stream_app_record(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamAppRecordRequest import DeleteLiveStreamAppRecordRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamAppRecordRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除域名录制配置 ''',
        description='''
            删除域名录制配置。

            示例: jdc live delete-live-stream-domain-record  --publish-domain xxx --template xxx
        ''',
    )
    def delete_live_stream_domain_record(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamDomainRecordRequest import DeleteLiveStreamDomainRecordRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamDomainRecordRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询录制回调配置 ''',
        description='''
            查询录制回调配置。

            示例: jdc live describe-live-stream-record-notify-config  --publish-domain xxx
        ''',
    )
    def describe_live_stream_record_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveStreamRecordNotifyConfigRequest import DescribeLiveStreamRecordNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveStreamRecordNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除录制回调配置 ''',
        description='''
            删除录制回调配置。

            示例: jdc live delete-live-stream-record-notify-config  --publish-domain xxx
        ''',
    )
    def delete_live_stream_record_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamRecordNotifyConfigRequest import DeleteLiveStreamRecordNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamRecordNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--stream-name'], dict(help="""(string) 直播流名称 """, dest='streamName',  required=True)),
            (['--record-times'], dict(help="""(array: recordTime) 您的推流加速域名 """, dest='recordTimes',  required=True)),
            (['--save-bucket'], dict(help="""(string) 存储桶 """, dest='saveBucket',  required=True)),
            (['--save-endpoint'], dict(help="""(string) 存储地址 """, dest='saveEndpoint',  required=True)),
            (['--record-file-type'], dict(help="""(string) 录制文件类型 """, dest='recordFileType',  required=True)),
            (['--save-object'], dict(help="""(string) 录制文件存储路径 """, dest='saveObject',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加录制打点任务 ''',
        description='''
            添加录制打点任务。

            示例: jdc live add-live-record-task  --publish-domain xxx --app-name xxx --stream-name xxx --record-times [{"":""}] --save-bucket xxx --save-endpoint xxx --record-file-type xxx
        ''',
    )
    def add_live_record_task(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveRecordTaskRequest import AddLiveRecordTaskRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveRecordTaskRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--format'], dict(help="""(string) 图片格式 """, dest='format',  required=True)),
            (['--width'], dict(help="""(int) 图片宽度 """, dest='width', type=int, required=True)),
            (['--height'], dict(help="""(int) 范围 """, dest='height', type=int, required=True)),
            (['--fill-type'], dict(help="""(int) 截图与设定的宽高不匹配时的处理规则 """, dest='fillType', type=int, required=True)),
            (['--snapshot-interval'], dict(help="""(int) 截图周期 """, dest='snapshotInterval', type=int, required=True)),
            (['--save-mode'], dict(help="""(int) 存储模式 """, dest='saveMode', type=int, required=True)),
            (['--save-bucket'], dict(help="""(string) 保存bucket """, dest='saveBucket',  required=True)),
            (['--save-endpoint'], dict(help="""(string) 保存endPoint """, dest='saveEndpoint',  required=True)),
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加直播截图模板 ''',
        description='''
            添加直播截图模板。

            示例: jdc live add-custom-live-stream-snapshot-template  --format xxx --width 0 --height 0 --fill-type 0 --snapshot-interval 0 --save-mode 0 --save-bucket xxx --save-endpoint xxx --template xxx
        ''',
    )
    def add_custom_live_stream_snapshot_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddCustomLiveStreamSnapshotTemplateRequest import AddCustomLiveStreamSnapshotTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddCustomLiveStreamSnapshotTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 直播截图查询过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询直播截图配置 ''',
        description='''
            查询直播截图配置。

            示例: jdc live describe-custom-live-stream-snapshot-config 
        ''',
    )
    def describe_custom_live_stream_snapshot_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeCustomLiveStreamSnapshotConfigRequest import DescribeCustomLiveStreamSnapshotConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCustomLiveStreamSnapshotConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 域名列表查询过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询直播截图模板列表 ''',
        description='''
            查询直播截图模板列表。

            示例: jdc live describe-custom-live-stream-snapshot-templates 
        ''',
    )
    def describe_custom_live_stream_snapshot_templates(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeCustomLiveStreamSnapshotTemplatesRequest import DescribeCustomLiveStreamSnapshotTemplatesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCustomLiveStreamSnapshotTemplatesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--publish-domain'], dict(help="""(string) 您的推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 截图模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加APP直播截图配置 ''',
        description='''
            添加APP直播截图配置。

            示例: jdc live add-live-stream-app-snapshot  --app-name xxx --publish-domain xxx --template xxx
        ''',
    )
    def add_live_stream_app_snapshot(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveStreamAppSnapshotRequest import AddLiveStreamAppSnapshotRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveStreamAppSnapshotRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 您的推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 截图模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加域名直播截图配置 ''',
        description='''
            添加域名直播截图配置。

            示例: jdc live add-live-stream-domain-snapshot  --publish-domain xxx --template xxx
        ''',
    )
    def add_live_stream_domain_snapshot(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveStreamDomainSnapshotRequest import AddLiveStreamDomainSnapshotRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveStreamDomainSnapshotRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 您的推流加速域名 """, dest='publishDomain',  required=True)),
            (['--notify-url'], dict(help="""(string) 设置直播流信息推送到的 URL 地址 """, dest='notifyUrl',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置截图回调通知 ''',
        description='''
            设置截图回调通知。

            示例: jdc live set-live-stream-snapshot-notify-config  --publish-domain xxx --notify-url xxx
        ''',
    )
    def set_live_stream_snapshot_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.SetLiveStreamSnapshotNotifyConfigRequest import SetLiveStreamSnapshotNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetLiveStreamSnapshotNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除用户自定义直播截图模板 ''',
        description='''
            删除用户自定义直播截图模板。

            示例: jdc live delete-custom-live-stream-snapshot-template  --template xxx
        ''',
    )
    def delete_custom_live_stream_snapshot_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteCustomLiveStreamSnapshotTemplateRequest import DeleteCustomLiveStreamSnapshotTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteCustomLiveStreamSnapshotTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除APP截图配置 ''',
        description='''
            删除APP截图配置。

            示例: jdc live delete-live-stream-app-snapshot  --publish-domain xxx --app-name xxx --template xxx
        ''',
    )
    def delete_live_stream_app_snapshot(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamAppSnapshotRequest import DeleteLiveStreamAppSnapshotRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamAppSnapshotRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除域名截图配置 ''',
        description='''
            删除域名截图配置。

            示例: jdc live delete-live-stream-domain-snapshot  --publish-domain xxx --template xxx
        ''',
    )
    def delete_live_stream_domain_snapshot(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamDomainSnapshotRequest import DeleteLiveStreamDomainSnapshotRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamDomainSnapshotRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询截图回调配置 ''',
        description='''
            查询截图回调配置。

            示例: jdc live describe-live-stream-snapshot-notify-config  --publish-domain xxx
        ''',
    )
    def describe_live_stream_snapshot_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveStreamSnapshotNotifyConfigRequest import DescribeLiveStreamSnapshotNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveStreamSnapshotNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除截图回调配置 ''',
        description='''
            删除截图回调配置。

            示例: jdc live delete-live-stream-snapshot-notify-config  --publish-domain xxx
        ''',
    )
    def delete_live_stream_snapshot_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamSnapshotNotifyConfigRequest import DeleteLiveStreamSnapshotNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamSnapshotNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--app-name'], dict(help="""(string) 应用名称 """, dest='appName',  required=True)),
            (['--publish-domain'], dict(help="""(string) 您的加速域名 """, dest='publishDomain',  required=True)),
            (['--stream-name'], dict(help="""(string) 流名称 """, dest='streamName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 禁止直播流推送 ''',
        description='''
            禁止直播流推送。

            示例: jdc live forbid-live-stream  --app-name xxx --publish-domain xxx --stream-name xxx
        ''',
    )
    def forbid_live_stream(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.ForbidLiveStreamRequest import ForbidLiveStreamRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ForbidLiveStreamRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--app-name'], dict(help="""(string) 应用名称 """, dest='appName',  required=True)),
            (['--publish-domain'], dict(help="""(string) 您的加速域名 """, dest='publishDomain',  required=True)),
            (['--stream-name'], dict(help="""(string) 流名称 """, dest='streamName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 恢复直播流推送 ''',
        description='''
            恢复直播流推送。

            示例: jdc live resume-live-stream  --app-name xxx --publish-domain xxx --stream-name xxx
        ''',
    )
    def resume_live_stream(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.ResumeLiveStreamRequest import ResumeLiveStreamRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ResumeLiveStreamRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 您的加速域名 """, dest='publishDomain',  required=True)),
            (['--notify-url'], dict(help="""(string) 设置直播流信息推送到的 URL 地址 """, dest='notifyUrl',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置直播流状态通知 ''',
        description='''
            设置直播流状态通知。

            示例: jdc live set-live-stream-notify-config  --publish-domain xxx --notify-url xxx
        ''',
    )
    def set_live_stream_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.SetLiveStreamNotifyConfigRequest import SetLiveStreamNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetLiveStreamNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询直播流状态通知 ''',
        description='''
            查询直播流状态通知。

            示例: jdc live describe-live-stream-notify-config  --publish-domain xxx
        ''',
    )
    def describe_live_stream_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveStreamNotifyConfigRequest import DescribeLiveStreamNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveStreamNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流域名 """, dest='publishDomain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除直播流状态通知 ''',
        description='''
            删除直播流状态通知。

            示例: jdc live delete-live-stream-notify-config  --publish-domain xxx
        ''',
    )
    def delete_live_stream_notify_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamNotifyConfigRequest import DeleteLiveStreamNotifyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamNotifyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流域名 """, dest='publishDomain',  required=True)),
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--app-name'], dict(help="""(string) 应用名称（APP） """, dest='appName',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看域名下所有的正在推的流的信息 ''',
        description='''
            查看域名下所有的正在推的流的信息。

            示例: jdc live describe-live-stream-online-list  --publish-domain xxx
        ''',
    )
    def describe_live_stream_online_list(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveStreamOnlineListRequest import DescribeLiveStreamOnlineListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveStreamOnlineListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流域名 """, dest='publishDomain',  required=True)),
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=False)),
            (['--stream-name'], dict(help="""(string) 直播流名称 """, dest='streamName',  required=False)),
            (['--start-time'], dict(help="""(string) 起始时间 """, dest='startTime',  required=True)),
            (['--end-time'], dict(help="""(string) 结束时间 """, dest='endTime',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看域名下推流记录 ''',
        description='''
            查看域名下推流记录。

            示例: jdc live describe-live-stream-publish-list  --publish-domain xxx --start-time xxx
        ''',
    )
    def describe_live_stream_publish_list(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveStreamPublishListRequest import DescribeLiveStreamPublishListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveStreamPublishListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 直播的推流域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加域名转码配置 ''',
        description='''
            添加域名转码配置。

            示例: jdc live add-live-stream-domain-transcode  --publish-domain xxx --template xxx
        ''',
    )
    def add_live_stream_domain_transcode(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveStreamDomainTranscodeRequest import AddLiveStreamDomainTranscodeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveStreamDomainTranscodeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 直播的推流域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加APP转码配置 ''',
        description='''
            添加APP转码配置。

            示例: jdc live add-live-stream-app-transcode  --publish-domain xxx --template xxx --app-name xxx
        ''',
    )
    def add_live_stream_app_transcode(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveStreamAppTranscodeRequest import AddLiveStreamAppTranscodeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveStreamAppTranscodeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--video-code-rate'], dict(help="""(int) 转码输出的码率值 """, dest='videoCodeRate', type=int, required=True)),
            (['--video-frame-rate'], dict(help="""(string) 转码输出的帧率值 """, dest='videoFrameRate',  required=True)),
            (['--width'], dict(help="""(int) 转码输出视频宽度 """, dest='width', type=int, required=True)),
            (['--height'], dict(help="""(int) 转码输出视频宽度 """, dest='height', type=int, required=True)),
            (['--template'], dict(help="""(string) 转码模板自定义名称 """, dest='template',  required=True)),
            (['--audio-codec'], dict(help="""(string) 转码输出音频编码格式 """, dest='audioCodec',  required=True)),
            (['--audio-format'], dict(help="""(string) 转码输出音频格式 """, dest='audioFormat',  required=True)),
            (['--audio-sample-rate'], dict(help="""(int) 转码输出音频采样率 """, dest='audioSampleRate', type=int, required=True)),
            (['--audio-channel'], dict(help="""(int) 转码输出音频通道数 """, dest='audioChannel', type=int, required=True)),
            (['--audio-code-rate'], dict(help="""(int) 转码输出音频码率 """, dest='audioCodeRate', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加自定义转码模板 ''',
        description='''
            添加自定义转码模板。

            示例: jdc live add-custom-live-stream-transcode-template  --video-code-rate 0 --video-frame-rate xxx --width 0 --height 0 --template xxx --audio-codec xxx --audio-format xxx --audio-sample-rate 0 --audio-channel 0 --audio-code-rate 0
        ''',
    )
    def add_custom_live_stream_transcode_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddCustomLiveStreamTranscodeTemplateRequest import AddCustomLiveStreamTranscodeTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddCustomLiveStreamTranscodeTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 转码模板查询过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询用户自定义转码模板列表 ''',
        description='''
            查询用户自定义转码模板列表。

            示例: jdc live describe-custom-live-stream-transcode-templates 
        ''',
    )
    def describe_custom_live_stream_transcode_templates(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeCustomLiveStreamTranscodeTemplatesRequest import DescribeCustomLiveStreamTranscodeTemplatesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCustomLiveStreamTranscodeTemplatesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 转码模板查询过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询转码模板配置 ''',
        description='''
            查询转码模板配置。

            示例: jdc live describe-live-stream-transcode-config 
        ''',
    )
    def describe_live_stream_transcode_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeLiveStreamTranscodeConfigRequest import DescribeLiveStreamTranscodeConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLiveStreamTranscodeConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除域名转码配置 ''',
        description='''
            删除域名转码配置。

            示例: jdc live delete-live-stream-domain-transcode  --publish-domain xxx --template xxx
        ''',
    )
    def delete_live_stream_domain_transcode(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamDomainTranscodeRequest import DeleteLiveStreamDomainTranscodeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamDomainTranscodeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除APP转码配置 ''',
        description='''
            删除APP转码配置。

            示例: jdc live delete-live-stream-app-transcode  --publish-domain xxx --app-name xxx --template xxx
        ''',
    )
    def delete_live_stream_app_transcode(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamAppTranscodeRequest import DeleteLiveStreamAppTranscodeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamAppTranscodeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询用户自定义转码模板详情 ''',
        description='''
            查询用户自定义转码模板详情。

            示例: jdc live describe-custom-live-stream-transcode-template  --template xxx
        ''',
    )
    def describe_custom_live_stream_transcode_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeCustomLiveStreamTranscodeTemplateRequest import DescribeCustomLiveStreamTranscodeTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCustomLiveStreamTranscodeTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除用户自定义转码模板 ''',
        description='''
            删除用户自定义转码模板。

            示例: jdc live delete-custom-live-stream-transcode-template  --template xxx
        ''',
    )
    def delete_custom_live_stream_transcode_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteCustomLiveStreamTranscodeTemplateRequest import DeleteCustomLiveStreamTranscodeTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteCustomLiveStreamTranscodeTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--offset-x'], dict(help="""(int) x轴偏移量 单位：像素 """, dest='offsetX', type=int, required=True)),
            (['--offset-y'], dict(help="""(int) y轴偏移量 单位：像素 """, dest='offsetY', type=int, required=True)),
            (['--width'], dict(help="""(int) 宽 """, dest='width', type=int, required=True)),
            (['--height'], dict(help="""(int) 高 """, dest='height', type=int, required=True)),
            (['--template'], dict(help="""(string) 录制模板自定义名称 """, dest='template',  required=True)),
            (['--url'], dict(help="""(string) 高 """, dest='url',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加直播水印模板 ''',
        description='''
            添加直播水印模板。

            示例: jdc live add-custom-live-stream-watermark-template  --offset-x 0 --offset-y 0 --width 0 --height 0 --template xxx --url xxx
        ''',
    )
    def add_custom_live_stream_watermark_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddCustomLiveStreamWatermarkTemplateRequest import AddCustomLiveStreamWatermarkTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddCustomLiveStreamWatermarkTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 录制模板列表查询过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询录制模板列表 ''',
        description='''
            查询录制模板列表。

            示例: jdc live describe-custom-live-stream-watermark-templates 
        ''',
    )
    def describe_custom_live_stream_watermark_templates(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeCustomLiveStreamWatermarkTemplatesRequest import DescribeCustomLiveStreamWatermarkTemplatesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCustomLiveStreamWatermarkTemplatesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--publish-domain'], dict(help="""(string) 您的推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 录制模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加APP水印配置 ''',
        description='''
            添加APP水印配置。

            示例: jdc live add-live-stream-app-watermark  --app-name xxx --publish-domain xxx --template xxx
        ''',
    )
    def add_live_stream_app_watermark(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveStreamAppWatermarkRequest import AddLiveStreamAppWatermarkRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveStreamAppWatermarkRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 您的推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 录制模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加域名水印配置 ''',
        description='''
            添加域名水印配置。

            示例: jdc live add-live-stream-domain-watermark  --publish-domain xxx --template xxx
        ''',
    )
    def add_live_stream_domain_watermark(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.AddLiveStreamDomainWatermarkRequest import AddLiveStreamDomainWatermarkRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddLiveStreamDomainWatermarkRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--page-num'], dict(help="""(int) 页码；默认为1；取值范围[1, 100000] """, dest='pageNum', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 录制模板列表查询过滤条件, 不传递分页参数时默认返回10条 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询水印配置 ''',
        description='''
            查询水印配置。

            示例: jdc live describe-custom-live-stream-watermark-config 
        ''',
    )
    def describe_custom_live_stream_watermark_config(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DescribeCustomLiveStreamWatermarkConfigRequest import DescribeCustomLiveStreamWatermarkConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCustomLiveStreamWatermarkConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除用户自定义水印模板 ''',
        description='''
            删除用户自定义水印模板。

            示例: jdc live delete-custom-live-stream-watermark-template  --template xxx
        ''',
    )
    def delete_custom_live_stream_watermark_template(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteCustomLiveStreamWatermarkTemplateRequest import DeleteCustomLiveStreamWatermarkTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteCustomLiveStreamWatermarkTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) 直播流所属应用名称 """, dest='appName',  required=True)),
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除APP水印配置 ''',
        description='''
            删除APP水印配置。

            示例: jdc live delete-live-stream-app-watermark  --publish-domain xxx --app-name xxx --template xxx
        ''',
    )
    def delete_live_stream_app_watermark(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamAppWatermarkRequest import DeleteLiveStreamAppWatermarkRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamAppWatermarkRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--publish-domain'], dict(help="""(string) 推流加速域名 """, dest='publishDomain',  required=True)),
            (['--template'], dict(help="""(string) 转码模版 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除域名水印配置 ''',
        description='''
            删除域名水印配置。

            示例: jdc live delete-live-stream-domain-watermark  --publish-domain xxx --template xxx
        ''',
    )
    def delete_live_stream_domain_watermark(self):
        client_factory = ClientFactory('live')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.live.apis.DeleteLiveStreamDomainWatermarkRequest import DeleteLiveStreamDomainWatermarkRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLiveStreamDomainWatermarkRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e.message)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-live-app','add-live-app','start-live-app','stop-live-app','delete-live-app','describe-live-domains','add-live-domain','start-live-domain','stop-live-domain','describe-live-domain-detail','delete-live-domain','describe-custom-live-stream-record-templates','add-custom-live-stream-record-template','add-live-stream-app-record','add-live-stream-domain-record','describe-custom-live-stream-record-config','set-live-stream-record-notify-config','delete-custom-live-stream-record-template','delete-live-stream-app-record','delete-live-stream-domain-record','describe-live-stream-record-notify-config','delete-live-stream-record-notify-config','add-live-record-task','add-custom-live-stream-snapshot-template','describe-custom-live-stream-snapshot-config','describe-custom-live-stream-snapshot-templates','add-live-stream-app-snapshot','add-live-stream-domain-snapshot','set-live-stream-snapshot-notify-config','delete-custom-live-stream-snapshot-template','delete-live-stream-app-snapshot','delete-live-stream-domain-snapshot','describe-live-stream-snapshot-notify-config','delete-live-stream-snapshot-notify-config','forbid-live-stream','resume-live-stream','set-live-stream-notify-config','describe-live-stream-notify-config','delete-live-stream-notify-config','describe-live-stream-online-list','describe-live-stream-publish-list','add-live-stream-domain-transcode','add-live-stream-app-transcode','add-custom-live-stream-transcode-template','describe-custom-live-stream-transcode-templates','describe-live-stream-transcode-config','delete-live-stream-domain-transcode','delete-live-stream-app-transcode','describe-custom-live-stream-transcode-template','delete-custom-live-stream-transcode-template','add-custom-live-stream-watermark-template','describe-custom-live-stream-watermark-templates','add-live-stream-app-watermark','add-live-stream-domain-watermark','describe-custom-live-stream-watermark-config','delete-custom-live-stream-watermark-template','delete-live-stream-app-watermark','delete-live-stream-domain-watermark',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('live', self.app.pargs.api)
        skeleton.show()
