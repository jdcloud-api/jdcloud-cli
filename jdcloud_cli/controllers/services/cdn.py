# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class CdnController(BaseController):
    class Meta:
        label = 'cdn'
        help = 'JDCLOUD CDN Operation And Query API'
        description = '''
        cdn cli 子命令，API related to CDN instances。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/xxx/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--content'], dict(help="""(string) NA """, dest='content',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 预览证书 ''',
        description='''
            预览证书。

            示例: jdc cdn preview-certificate  --domain xxx
        ''',
    )
    def preview_certificate(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.PreviewCertificateRequest import PreviewCertificateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = PreviewCertificateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询默认http header头部参数列表 ''',
        description='''
            查询默认http header头部参数列表。

            示例: jdc cdn query-default-http-header-key 
        ''',
    )
    def query_default_http_header_key(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryDefaultHttpHeaderKeyRequest import QueryDefaultHttpHeaderKeyRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryDefaultHttpHeaderKeyRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询ip黑名单 ''',
        description='''
            查询ip黑名单。

            示例: jdc cdn query-ip-black-list  --domain xxx
        ''',
    )
    def query_ip_black_list(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryIpBlackListRequest import QueryIpBlackListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryIpBlackListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--ips'], dict(help="""(array) ip黑名单,ips中url不能超过50条 """, dest='ips',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置ip黑名单 ''',
        description='''
            设置ip黑名单。

            示例: jdc cdn set-ip-black-list  --domain xxx
        ''',
    )
    def set_ip_black_list(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetIpBlackListRequest import SetIpBlackListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetIpBlackListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--status'], dict(help="""(string) ip黑名单状态取值[on,off] """, dest='status',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置ip黑名单状态 ''',
        description='''
            设置ip黑名单状态。

            示例: jdc cdn operate-ip-black-list  --domain xxx
        ''',
    )
    def operate_ip_black_list(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.OperateIpBlackListRequest import OperateIpBlackListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = OperateIpBlackListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--weight'], dict(help="""(int) 此条配置的权重值, 取值范围为1-10,1最大 """, dest='weight', type=int, required=False)),
            (['--ttl'], dict(help="""(int) 缓存时间,单位秒 """, dest='ttl', type=int, required=False)),
            (['--contents'], dict(help="""(string) 规则内容。其他类型只能以/或者.开头，如/a/b或.jpg """, dest='contents',  required=False)),
            (['--cache-type'], dict(help="""(int) 缓存方式：0、不缓存，1自定义 """, dest='cacheType', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加缓存规则 ''',
        description='''
            添加缓存规则。

            示例: jdc cdn create-cache-rule  --domain xxx
        ''',
    )
    def create_cache_rule(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.CreateCacheRuleRequest import CreateCacheRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateCacheRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--weight'], dict(help="""(int) 此条配置的权重值, 取值范围为1-10,1最大 """, dest='weight', type=int, required=False)),
            (['--ttl'], dict(help="""(int) 缓存时间,单位秒 """, dest='ttl', type=int, required=False)),
            (['--contents'], dict(help="""(string) 规则内容。其他类型只能以/或者.开头，如/a/b或.jpg """, dest='contents',  required=False)),
            (['--cache-type'], dict(help="""(int) 缓存方式：0、不缓存，1自定义 """, dest='cacheType', type=int, required=False)),
            (['--config-id'], dict(help="""(int) 配置id """, dest='configId', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改缓存规则 ''',
        description='''
            修改缓存规则。

            示例: jdc cdn update-cache-rule  --domain xxx
        ''',
    )
    def update_cache_rule(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.UpdateCacheRuleRequest import UpdateCacheRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateCacheRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--config-id'], dict(help="""(int) 缓存规则id """, dest='configId', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除缓存规则 ''',
        description='''
            删除缓存规则。

            示例: jdc cdn delete-cache-rule  --domain xxx
        ''',
    )
    def delete_cache_rule(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.DeleteCacheRuleRequest import DeleteCacheRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteCacheRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询http header头 ''',
        description='''
            查询http header头。

            示例: jdc cdn query-http-header  --domain xxx
        ''',
    )
    def query_http_header(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryHttpHeaderRequest import QueryHttpHeaderRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryHttpHeaderRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--header-type'], dict(help="""(string) header类型[resp,req] """, dest='headerType',  required=False)),
            (['--header-name'], dict(help="""(string) header名 """, dest='headerName',  required=False)),
            (['--header-value'], dict(help="""(string) header值 """, dest='headerValue',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加httpHeader ''',
        description='''
            添加httpHeader。

            示例: jdc cdn set-http-header  --domain xxx
        ''',
    )
    def set_http_header(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetHttpHeaderRequest import SetHttpHeaderRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetHttpHeaderRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--header-type'], dict(help="""(string) header类型[resp,req] """, dest='headerType',  required=False)),
            (['--header-name'], dict(help="""(string) header名 """, dest='headerName',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除httpHeader ''',
        description='''
            删除httpHeader。

            示例: jdc cdn delete-http-header  --domain xxx
        ''',
    )
    def delete_http_header(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.DeleteHttpHeaderRequest import DeleteHttpHeaderRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteHttpHeaderRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--status'], dict(help="""(string) 开关取值[on,off] """, dest='status',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置视频拖拽 ''',
        description='''
            设置视频拖拽。

            示例: jdc cdn set-video-draft  --domain xxx
        ''',
    )
    def set_video_draft(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetVideoDraftRequest import SetVideoDraftRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetVideoDraftRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--status'], dict(help="""(string) 开关取值[on,off] """, dest='status',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置range参数 ''',
        description='''
            设置range参数。

            示例: jdc cdn set-range  --domain xxx
        ''',
    )
    def set_range(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetRangeRequest import SetRangeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetRangeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--status'], dict(help="""(string) 开关取值[on,off] """, dest='status',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置忽略参数 ''',
        description='''
            设置忽略参数。

            示例: jdc cdn set-ignore-query-string  --domain xxx
        ''',
    )
    def set_ignore_query_string(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetIgnoreQueryStringRequest import SetIgnoreQueryStringRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetIgnoreQueryStringRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置userAgent信息 ''',
        description='''
            设置userAgent信息。

            示例: jdc cdn query-user-agent  --domain xxx
        ''',
    )
    def query_user_agent(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryUserAgentRequest import QueryUserAgentRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryUserAgentRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--user-agent-type'], dict(help="""(string) userAgent类型,取值：block（黑名单）,allow（白名单）,默认为block """, dest='userAgentType',  required=False)),
            (['--user-agent-list'], dict(help="""(array) UA列表,如果userAgentList为空,则为全部删除 """, dest='userAgentList',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置userAgent信息 ''',
        description='''
            设置userAgent信息。

            示例: jdc cdn set-user-agent-config  --domain xxx
        ''',
    )
    def set_user_agent_config(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetUserAgentConfigRequest import SetUserAgentConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetUserAgentConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询url鉴权 ''',
        description='''
            查询url鉴权。

            示例: jdc cdn query-accesskey-config  --domain xxx
        ''',
    )
    def query_accesskey_config(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryAccesskeyConfigRequest import QueryAccesskeyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryAccesskeyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--accesskey-type'], dict(help="""(int) 鉴权类型，0表示无鉴权，1表示参数鉴权，2表示路径鉴权 """, dest='accesskeyType', type=int, required=False)),
            (['--accesskey-key'], dict(help="""(string) 密码，长度为8到32 """, dest='accesskeyKey',  required=False)),
            (['--accesskey-keep'], dict(help="""(int) 是否是回源鉴权 0表示是 1表示否 """, dest='accesskeyKeep', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置url鉴权 ''',
        description='''
            设置url鉴权。

            示例: jdc cdn set-accesskey-config  --domain xxx
        ''',
    )
    def set_accesskey_config(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetAccesskeyConfigRequest import SetAccesskeyConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetAccesskeyConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--refer-type'], dict(help="""(string) refer类型，取值：block（黑名单），allow（白名单）默认为block """, dest='referType',  required=False)),
            (['--refer-list'], dict(help="""(array) 逗号隔开的域名列表，如果referList传空则为删除 """, dest='referList',  required=False)),
            (['--allow-no-refer-header'], dict(help="""(string) 是否允许空refer访问，默认为“on” """, dest='allowNoReferHeader',  required=False)),
            (['--allow-null-refer-header'], dict(help="""(string) 是否允许无ua访问，默认为“on” """, dest='allowNullReferHeader',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置域名refer ''',
        description='''
            设置域名refer。

            示例: jdc cdn set-refer  --domain xxx
        ''',
    )
    def set_refer(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetReferRequest import SetReferRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetReferRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询源站监控信息 ''',
        description='''
            查询源站监控信息。

            示例: jdc cdn query-monitor  --domain xxx
        ''',
    )
    def query_monitor(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryMonitorRequest import QueryMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--cycle'], dict(help="""(int) 探测周期，取值1和5，单位为分钟 """, dest='cycle', type=int, required=False)),
            (['--monitor-path'], dict(help="""(string) 探测路径 """, dest='monitorPath',  required=False)),
            (['--http-request-header'], dict(help="""(object) NA """, dest='httpRequestHeader',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置源站监控信息 ''',
        description='''
            设置源站监控信息。

            示例: jdc cdn set-monitor  --domain xxx
        ''',
    )
    def set_monitor(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetMonitorRequest import SetMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 停止源站监控 ''',
        description='''
            停止源站监控。

            示例: jdc cdn stop-monitor  --domain xxx
        ''',
    )
    def stop_monitor(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.StopMonitorRequest import StopMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StopMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--source-type'], dict(help="""(string) 回源类型只能是[ips,domain,oss]中的一种 """, dest='sourceType',  required=False)),
            (['--back-source-type'], dict(help="""(string) 回源方式,只能是[https,http]中的一种,默认http """, dest='backSourceType',  required=False)),
            (['--ip-source'], dict(help="""(array: array) NA """, dest='ipSource',  required=False)),
            (['--domain-source'], dict(help="""(array: array) NA """, dest='domainSource',  required=False)),
            (['--oss-source'], dict(help="""(string) NA """, dest='ossSource',  required=False)),
            (['--default-source-host'], dict(help="""(string) NA """, dest='defaultSourceHost',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置源站信息 ''',
        description='''
            设置源站信息。

            示例: jdc cdn set-source  --domain xxx
        ''',
    )
    def set_source(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetSourceRequest import SetSourceRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetSourceRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--status'], dict(help="""(string) 共享缓存只能是off或者on """, dest='status',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 泛域名共享缓存 ''',
        description='''
            泛域名共享缓存。

            示例: jdc cdn operate-share-cache  --domain xxx
        ''',
    )
    def operate_share_cache(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.OperateShareCacheRequest import OperateShareCacheRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = OperateShareCacheRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--http-type'], dict(help="""(string) http类型,只能为http或者https,默认为http.当设为https时,需要调用“设置通讯协议”接口上传证书和私钥 """, dest='httpType',  required=False)),
            (['--certificate'], dict(help="""(string) 用户证书,当Type为https时必须设置 """, dest='certificate',  required=False)),
            (['--rsa-key'], dict(help="""(string) 证书私钥 """, dest='rsaKey',  required=False)),
            (['--jump-type'], dict(help="""(string) 有三种类型：default、http、https """, dest='jumpType',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置http协议 ''',
        description='''
            设置http协议。

            示例: jdc cdn set-http-type  --domain xxx
        ''',
    )
    def set_http_type(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetHttpTypeRequest import SetHttpTypeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetHttpTypeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--share-cache'], dict(help="""(string) 根据是否共享内存筛选 """, dest='shareCache',  required=False)),
            (['--page-number'], dict(help="""(int) pageNumber """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) pageSize """, dest='pageSize', type=int, required=False)),
            (['--primary-domain'], dict(help="""(string) 根据主域名模糊查询 """, dest='primaryDomain',  required=False)),
            (['--domain-group-name'], dict(help="""(string) 根据域名组模糊查询 """, dest='domainGroupName',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询域名组接口 ''',
        description='''
            查询域名组接口。

            示例: jdc cdn query-domain-group-list 
        ''',
    )
    def query_domain_group_list(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryDomainGroupListRequest import QueryDomainGroupListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryDomainGroupListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--id'], dict(help="""(int) 域名组id """, dest='id', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询域名组详情 ''',
        description='''
            查询域名组详情。

            示例: jdc cdn query-domain-group-detail  --id 5
        ''',
    )
    def query_domain_group_detail(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryDomainGroupDetailRequest import QueryDomainGroupDetailRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryDomainGroupDetailRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询未分组域名 ''',
        description='''
            查询未分组域名。

            示例: jdc cdn query-domains-not-in-group 
        ''',
    )
    def query_domains_not_in_group(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryDomainsNotInGroupRequest import QueryDomainsNotInGroupRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryDomainsNotInGroupRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--id'], dict(help="""(int) 域名组id """, dest='id', type=int, required=True)),
            (['--domains'], dict(help="""(array) 域名组内域名，包含主域名 """, dest='domains',  required=False)),
            (['--primary-domain'], dict(help="""(string) 主域名,开启共享缓存时必传 """, dest='primaryDomain',  required=False)),
            (['--share-cache'], dict(help="""(string) 是否共享内存 """, dest='shareCache',  required=False)),
            (['--domain-group-name'], dict(help="""(string) NA """, dest='domainGroupName',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 更新域名组 ''',
        description='''
            更新域名组。

            示例: jdc cdn update-domain-group  --id 5
        ''',
    )
    def update_domain_group(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.UpdateDomainGroupRequest import UpdateDomainGroupRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateDomainGroupRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--share-cache'], dict(help="""(string) 是否共享内存 """, dest='shareCache',  required=False)),
            (['--primary-domain'], dict(help="""(string) 主域名,开启共享缓存时必传 """, dest='primaryDomain',  required=False)),
            (['--domain-group-name'], dict(help="""(string) 域名组名称 """, dest='domainGroupName',  required=False)),
            (['--domains'], dict(help="""(array) 域名组内域名包含主域名 """, dest='domains',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建域名组 ''',
        description='''
            创建域名组。

            示例: jdc cdn create-domain-group 
        ''',
    )
    def create_domain_group(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.CreateDomainGroupRequest import CreateDomainGroupRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateDomainGroupRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--ids'], dict(help="""(array: int) NA """, dest='ids', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量删除域名组 ''',
        description='''
            批量删除域名组。

            示例: jdc cdn batch-delete-domain-group  --ids [0]
        ''',
    )
    def batch_delete_domain_group(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.BatchDeleteDomainGroupRequest import BatchDeleteDomainGroupRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = BatchDeleteDomainGroupRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-word'], dict(help="""(string) 根据关键字进行模糊匹配 """, dest='keyWord',  required=False)),
            (['--page-number'], dict(help="""(int) pageNumber """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) pageSize """, dest='pageSize', type=int, required=False)),
            (['--status'], dict(help="""(string) 根据域名状态查询, 可选值[offline, online, configuring, auditing, audit_reject] """, dest='status',  required=False)),
            (['--type'], dict(help="""(string) type """, dest='type',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询加速域名接口 ''',
        description='''
            查询加速域名接口。

            示例: jdc cdn get-domain-list 
        ''',
    )
    def get_domain_list(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.GetDomainListRequest import GetDomainListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetDomainListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询加速域名详情 ''',
        description='''
            查询加速域名详情。

            示例: jdc cdn get-domain-detail  --domain xxx
        ''',
    )
    def get_domain_detail(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.GetDomainDetailRequest import GetDomainDetailRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetDomainDetailRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--source-type'], dict(help="""(string) 回源类型只能是[ips,domain,oss]中的一种 """, dest='sourceType',  required=False)),
            (['--cdn-type'], dict(help="""(string) 点播域名的类型只能是[vod,download,web]中的一种 """, dest='cdnType',  required=False)),
            (['--back-source-type'], dict(help="""(string) 回源方式,只能是[https,http]中的一种,默认http """, dest='backSourceType',  required=False)),
            (['--daily-band-width'], dict(help="""(int) 日带宽(Mbps) """, dest='dailyBandWidth', type=int, required=False)),
            (['--quaility'], dict(help="""(string) 服务质量,只能是[good,general]中的一种,默认为good """, dest='quaility',  required=False)),
            (['--max-file-size'], dict(help="""(int) NA """, dest='maxFileSize', type=int, required=False)),
            (['--min-file-size'], dict(help="""(int) NA """, dest='minFileSize', type=int, required=False)),
            (['--sum-file-size'], dict(help="""(int) NA """, dest='sumFileSize', type=int, required=False)),
            (['--avg-file-size'], dict(help="""(int) NA """, dest='avgFileSize', type=int, required=False)),
            (['--default-source-host'], dict(help="""(string) NA """, dest='defaultSourceHost',  required=False)),
            (['--http-type'], dict(help="""(string) NA """, dest='httpType',  required=False)),
            (['--ip-source'], dict(help="""(array: array) NA """, dest='ipSource',  required=False)),
            (['--domain-source'], dict(help="""(array: array) NA """, dest='domainSource',  required=False)),
            (['--oss-source'], dict(help="""(string) NA """, dest='ossSource',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建点播加速域名 ''',
        description='''
            创建点播加速域名。

            示例: jdc cdn create-domain  --domain xxx
        ''',
    )
    def create_domain(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.CreateDomainRequest import CreateDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除加速域名 ''',
        description='''
            删除加速域名。

            示例: jdc cdn delete-domain  --domain xxx
        ''',
    )
    def delete_domain(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.DeleteDomainRequest import DeleteDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启动加速域名 ''',
        description='''
            启动加速域名。

            示例: jdc cdn start-domain  --domain xxx
        ''',
    )
    def start_domain(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.StartDomainRequest import StartDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StartDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 停止加速域名 ''',
        description='''
            停止加速域名。

            示例: jdc cdn stop-domain  --domain xxx
        ''',
    )
    def stop_domain(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.StopDomainRequest import StopDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StopDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询oss存储域名 ''',
        description='''
            查询oss存储域名。

            示例: jdc cdn query-oss-buckets 
        ''',
    )
    def query_oss_buckets(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryOssBucketsRequest import QueryOssBucketsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryOssBucketsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domains'], dict(help="""(array) NA """, dest='domains',  required=False)),
            (['--source-type'], dict(help="""(string) 回源类型只能是[ips,domain,oss]中的一种 """, dest='sourceType',  required=False)),
            (['--cdn-type'], dict(help="""(string) 点播域名的类型只能是[vod,download,web]中的一种 """, dest='cdnType',  required=False)),
            (['--back-source-type'], dict(help="""(string) 回源方式,只能是[https,http]中的一种,默认http """, dest='backSourceType',  required=False)),
            (['--daily-band-width'], dict(help="""(int) 日带宽(Mbps) """, dest='dailyBandWidth', type=int, required=False)),
            (['--quaility'], dict(help="""(string) 服务质量,只能是[good,general]中的一种,默认为good """, dest='quaility',  required=False)),
            (['--max-file-size'], dict(help="""(int) NA """, dest='maxFileSize', type=int, required=False)),
            (['--min-file-size'], dict(help="""(int) NA """, dest='minFileSize', type=int, required=False)),
            (['--sum-file-size'], dict(help="""(int) NA """, dest='sumFileSize', type=int, required=False)),
            (['--avg-file-size'], dict(help="""(int) NA """, dest='avgFileSize', type=int, required=False)),
            (['--default-source-host'], dict(help="""(string) NA """, dest='defaultSourceHost',  required=False)),
            (['--http-type'], dict(help="""(string) NA """, dest='httpType',  required=False)),
            (['--ip-source'], dict(help="""(array: array) NA """, dest='ipSource',  required=False)),
            (['--domain-source'], dict(help="""(array: array) NA """, dest='domainSource',  required=False)),
            (['--oss-source'], dict(help="""(string) NA """, dest='ossSource',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建点播加速域名 ''',
        description='''
            创建点播加速域名。

            示例: jdc cdn batch-create 
        ''',
    )
    def batch_create(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.BatchCreateRequest import BatchCreateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = BatchCreateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询域名配置信息 ''',
        description='''
            查询域名配置信息。

            示例: jdc cdn query-domain-config  --domain xxx
        ''',
    )
    def query_domain_config(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryDomainConfigRequest import QueryDomainConfigRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryDomainConfigRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--source-type'], dict(help="""(string) 回源类型只能为[ips,domain]中的一种 """, dest='sourceType',  required=False)),
            (['--back-source-type'], dict(help="""(string) NA """, dest='backSourceType',  required=False)),
            (['--default-source-host'], dict(help="""(string) 默认回源host """, dest='defaultSourceHost',  required=False)),
            (['--domain-source'], dict(help="""(array: array) NA """, dest='domainSource',  required=False)),
            (['--ip-source'], dict(help="""(array: array) NA """, dest='ipSource',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置直播域名回源信息 ''',
        description='''
            设置直播域名回源信息。

            示例: jdc cdn set-live-domain-back-source  --domain xxx
        ''',
    )
    def set_live_domain_back_source(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetLiveDomainBackSourceRequest import SetLiveDomainBackSourceRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetLiveDomainBackSourceRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--ips'], dict(help="""(array) NA """, dest='ips',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置直播域名ip黑名单 ''',
        description='''
            设置直播域名ip黑名单。

            示例: jdc cdn set-live-domain-ip-black-list  --domain xxx
        ''',
    )
    def set_live_domain_ip_black_list(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetLiveDomainIpBlackListRequest import SetLiveDomainIpBlackListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetLiveDomainIpBlackListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--refer-type'], dict(help="""(string) refer类型，取值：block（黑名单），allow（白名单）默认为block """, dest='referType',  required=False)),
            (['--refer-list'], dict(help="""(array) 逗号隔开的域名列表，如果referList传空则为删除 """, dest='referList',  required=False)),
            (['--allow-no-refer-header'], dict(help="""(string) 是否允许空refer访问，默认为“on” """, dest='allowNoReferHeader',  required=False)),
            (['--allow-null-refer-header'], dict(help="""(string) 是否允许无ua访问，默认为“on” """, dest='allowNullReferHeader',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置域名refer防盗链 ''',
        description='''
            设置域名refer防盗链。

            示例: jdc cdn set-live-domain-refer  --domain xxx
        ''',
    )
    def set_live_domain_refer(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetLiveDomainReferRequest import SetLiveDomainReferRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetLiveDomainReferRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--black-ips-enable'], dict(help="""(string) NA """, dest='blackIpsEnable',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 开启或关闭ip黑名单 ''',
        description='''
            开启或关闭ip黑名单。

            示例: jdc cdn operate-live-domain-ip-black-list  --domain xxx --black-ips-enable xxx
        ''',
    )
    def operate_live_domain_ip_black_list(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.OperateLiveDomainIpBlackListRequest import OperateLiveDomainIpBlackListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = OperateLiveDomainIpBlackListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--source-host'], dict(help="""(string) 默认回源host """, dest='sourceHost',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置直播域名回源host ''',
        description='''
            设置直播域名回源host。

            示例: jdc cdn set-live-domain-back-source-host  --domain xxx
        ''',
    )
    def set_live_domain_back_source_host(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetLiveDomainBackSourceHostRequest import SetLiveDomainBackSourceHostRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetLiveDomainBackSourceHostRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--accesskey-type'], dict(help="""(int) url鉴权开启1关闭0 """, dest='accesskeyType', type=int, required=False)),
            (['--accesskey-key'], dict(help="""(string) url鉴权开启时必传 """, dest='accesskeyKey',  required=False)),
            (['--auth-life-time'], dict(help="""(int) 开启时默认值为300s,关闭时为0 """, dest='authLifeTime', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置URL鉴权 ''',
        description='''
            设置URL鉴权。

            示例: jdc cdn set-live-domain-access-key  --domain xxx
        ''',
    )
    def set_live_domain_access_key(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetLiveDomainAccessKeyRequest import SetLiveDomainAccessKeyRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetLiveDomainAccessKeyRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--certificate'], dict(help="""(string) https证书,转https格式时必传 """, dest='certificate',  required=False)),
            (['--rsa-key'], dict(help="""(string) https私钥，转https格式时必传 """, dest='rsaKey',  required=False)),
            (['--protocol-converts'], dict(help="""(array: array) NA """, dest='protocolConverts',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置转协议 ''',
        description='''
            设置转协议。

            示例: jdc cdn set-protocol-convert  --domain xxx
        ''',
    )
    def set_protocol_convert(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.SetProtocolConvertRequest import SetProtocolConvertRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetProtocolConvertRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--play-domain'], dict(help="""(string) 播放域名 """, dest='playDomain',  required=False)),
            (['--publish-domain'], dict(help="""(string) 创建推流域名时，必传推流域名 """, dest='publishDomain',  required=False)),
            (['--source-type'], dict(help="""(string) 回源类型只能是[ips,domain]中的一种 """, dest='sourceType',  required=False)),
            (['--back-http-type'], dict(help="""(string) NA """, dest='backHttpType',  required=False)),
            (['--default-source-host'], dict(help="""(string) 默认回源host """, dest='defaultSourceHost',  required=False)),
            (['--site-type'], dict(help="""(string) 站点类型pull(拉流)push(推流) """, dest='siteType',  required=False)),
            (['--back-source-type'], dict(help="""(string) 回源类型，目前只能为rtmp """, dest='backSourceType',  required=False)),
            (['--ip-source'], dict(help="""(array: array) NA """, dest='ipSource',  required=False)),
            (['--domain-source'], dict(help="""(array: array) NA """, dest='domainSource',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建直播域名 ''',
        description='''
            创建直播域名。

            示例: jdc cdn create-live-domain 
        ''',
    )
    def create_live_domain(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.CreateLiveDomainRequest import CreateLiveDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateLiveDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain'], dict(help="""(string) 用户域名 """, dest='domain',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询直播域名详情 ''',
        description='''
            查询直播域名详情。

            示例: jdc cdn query-live-domain-detail  --domain xxx
        ''',
    )
    def query_live_domain_detail(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryLiveDomainDetailRequest import QueryLiveDomainDetailRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryLiveDomainDetailRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--start-time'], dict(help="""(string) 查询起始时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 查询截止时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='endTime',  required=False)),
            (['--domain'], dict(help="""(string) 需要查询的域名, 必须为用户pin下有权限的域名 """, dest='domain',  required=False)),
            (['--sub-domain'], dict(help="""(string) 待查询的子域名 """, dest='subDomain',  required=False)),
            (['--fields'], dict(help="""(string) 需要查询的字段 """, dest='fields',  required=False)),
            (['--area'], dict(help="""(string) NA """, dest='area',  required=False)),
            (['--isp'], dict(help="""(string) NA """, dest='isp',  required=False)),
            (['--origin'], dict(help="""(string) NA """, dest='origin',  required=False)),
            (['--period'], dict(help="""(string) 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据 """, dest='period',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询统计数据 ''',
        description='''
            查询统计数据。

            示例: jdc cdn query-statistics-data 
        ''',
    )
    def query_statistics_data(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryStatisticsDataRequest import QueryStatisticsDataRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryStatisticsDataRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--start-time'], dict(help="""(string) 查询起始时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 查询截止时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='endTime',  required=False)),
            (['--domain'], dict(help="""(string) 需要查询的域名, 必须为用户pin下有权限的域名 """, dest='domain',  required=False)),
            (['--sub-domain'], dict(help="""(string) 待查询的子域名 """, dest='subDomain',  required=False)),
            (['--fields'], dict(help="""(string) 需要查询的字段 """, dest='fields',  required=False)),
            (['--area'], dict(help="""(string) NA """, dest='area',  required=False)),
            (['--isp'], dict(help="""(string) NA """, dest='isp',  required=False)),
            (['--origin'], dict(help="""(string) NA """, dest='origin',  required=False)),
            (['--period'], dict(help="""(string) 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据 """, dest='period',  required=False)),
            (['--group-by'], dict(help="""(string) 分组依据 """, dest='groupBy',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 分地区及运营商查询统计数据 ''',
        description='''
            分地区及运营商查询统计数据。

            示例: jdc cdn query-statistics-data-group-by-area 
        ''',
    )
    def query_statistics_data_group_by_area(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryStatisticsDataGroupByAreaRequest import QueryStatisticsDataGroupByAreaRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryStatisticsDataGroupByAreaRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--start-time'], dict(help="""(string) 查询起始时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 查询截止时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='endTime',  required=False)),
            (['--domain'], dict(help="""(string) 需要查询的域名, 必须为用户pin下有权限的域名 """, dest='domain',  required=False)),
            (['--sub-domain'], dict(help="""(string) 待查询的子域名 """, dest='subDomain',  required=False)),
            (['--fields'], dict(help="""(string) 需要查询的字段 """, dest='fields',  required=False)),
            (['--area'], dict(help="""(string) NA """, dest='area',  required=False)),
            (['--isp'], dict(help="""(string) NA """, dest='isp',  required=False)),
            (['--origin'], dict(help="""(string) NA """, dest='origin',  required=False)),
            (['--period'], dict(help="""(string) 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据 """, dest='period',  required=False)),
            (['--group-by'], dict(help="""(string) 分组依据 """, dest='groupBy',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询统计数据并进行汇总加和 ''',
        description='''
            查询统计数据并进行汇总加和。

            示例: jdc cdn query-statistics-data-group-sum 
        ''',
    )
    def query_statistics_data_group_sum(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryStatisticsDataGroupSumRequest import QueryStatisticsDataGroupSumRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryStatisticsDataGroupSumRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--start-time'], dict(help="""(string) 查询起始时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 查询截止时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='endTime',  required=False)),
            (['--domain'], dict(help="""(string) 需要查询的域名, 必须为用户pin下有权限的域名 """, dest='domain',  required=False)),
            (['--sub-domain'], dict(help="""(string) 待查询的子域名 """, dest='subDomain',  required=False)),
            (['--size'], dict(help="""(int) NA """, dest='size', type=int, required=False)),
            (['--top-by'], dict(help="""(string) 排序依据 """, dest='topBy',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询TOP IP ''',
        description='''
            查询TOP IP。

            示例: jdc cdn query-statistics-top-ip 
        ''',
    )
    def query_statistics_top_ip(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryStatisticsTopIpRequest import QueryStatisticsTopIpRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryStatisticsTopIpRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--start-time'], dict(help="""(string) 查询起始时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 查询截止时间,UTC时间，格式为:yyyy-MM-dd'T'HH:mm:ss'Z'，示例:2018-10-21T10:00:00Z """, dest='endTime',  required=False)),
            (['--domain'], dict(help="""(string) 需要查询的域名, 必须为用户pin下有权限的域名 """, dest='domain',  required=False)),
            (['--sub-domain'], dict(help="""(string) 待查询的子域名 """, dest='subDomain',  required=False)),
            (['--size'], dict(help="""(int) NA """, dest='size', type=int, required=False)),
            (['--top-by'], dict(help="""(string) 排序依据 """, dest='topBy',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询TOP Url ''',
        description='''
            查询TOP Url。

            示例: jdc cdn query-statistics-top-url 
        ''',
    )
    def query_statistics_top_url(self):
        client_factory = ClientFactory('cdn')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.cdn.apis.QueryStatisticsTopUrlRequest import QueryStatisticsTopUrlRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = QueryStatisticsTopUrlRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['preview-certificate','query-default-http-header-key','query-ip-black-list','set-ip-black-list','operate-ip-black-list','create-cache-rule','update-cache-rule','delete-cache-rule','query-http-header','set-http-header','delete-http-header','set-video-draft','set-range','set-ignore-query-string','query-user-agent','set-user-agent-config','query-accesskey-config','set-accesskey-config','set-refer','query-monitor','set-monitor','stop-monitor','set-source','operate-share-cache','set-http-type','query-domain-group-list','query-domain-group-detail','query-domains-not-in-group','update-domain-group','create-domain-group','batch-delete-domain-group','get-domain-list','get-domain-detail','create-domain','delete-domain','start-domain','stop-domain','query-oss-buckets','batch-create','query-domain-config','set-live-domain-back-source','set-live-domain-ip-black-list','set-live-domain-refer','operate-live-domain-ip-black-list','set-live-domain-back-source-host','set-live-domain-access-key','set-protocol-convert','create-live-domain','query-live-domain-detail','query-statistics-data','query-statistics-data-group-by-area','query-statistics-data-group-sum','query-statistics-top-ip','query-statistics-top-url',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('cdn', self.app.pargs.api)
        skeleton.show()
