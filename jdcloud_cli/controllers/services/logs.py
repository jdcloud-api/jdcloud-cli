# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class LogsController(BaseController):
    class Meta:
        label = 'logs'
        help = 'JCLOUD LOGS API'
        description = '''
        logs cli 子命令，logs API。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/xxx/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--collect-info-uid'], dict(help="""(string) 采集配置 UID """, dest='collectInfoUID',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 采集配置的基本信息。 ''',
        description='''
            采集配置的基本信息。。

            示例: jdc logs describe-collect-info  --collect-info-uid xxx
        ''',
    )
    def describe_collect_info(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DescribeCollectInfoRequest import DescribeCollectInfoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCollectInfoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--collect-info-uid'], dict(help="""(string) 采集配置 UID """, dest='collectInfoUID',  required=True)),
            (['--enabled'], dict(help="""(bool) 采集状态，0-禁用，1-启用 """, dest='enabled',  required=True)),
            (['--resource-type'], dict(help="""(string) 采集实例类型, 只能是 all/part  当选择all时，传入的实例列表无效 """, dest='resourceType',  required=True)),
            (['--resources'], dict(help="""(array: resource) 采集实例列表（存在上限限制20） """, dest='resources',  required=False)),
            (['--log-path'], dict(help="""(string) 日志路径。当appcode为custom时为必填。目前仅支持对 Linux 云主机上的日志进行采集，路径支持通配符“*”和“？”，文件路径应符合 Linux 的文件路径规则 """, dest='logPath',  required=False)),
            (['--log-file'], dict(help="""(string) 日志文件名。当appcode为custom时为必填。日志文件名支持正则表达式。 """, dest='logFile',  required=False)),
            (['--log-filters'], dict(help="""(array: string) 过滤器。设置过滤器后可根据用户设定的关键词采集部分日志，如仅采集 Error 的日志。目前最大允许5个。 """, dest='logFilters',  required=False)),
            (['--filter-enabled'], dict(help="""(bool) 过滤器是否启用。当appcode为custom时必填 """, dest='filterEnabled',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 更新采集配置。若传入的实例列表不为空，将覆盖之前的所有实例，而非新增。 ''',
        description='''
            更新采集配置。若传入的实例列表不为空，将覆盖之前的所有实例，而非新增。。

            示例: jdc logs update-collect-info  --collect-info-uid xxx --enabled true --resource-type xxx
        ''',
    )
    def update_collect_info(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.UpdateCollectInfoRequest import UpdateCollectInfoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateCollectInfoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--collect-info-uid'], dict(help="""(string) 采集配置 UID """, dest='collectInfoUID',  required=True)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询采集配置的实例列表 ''',
        description='''
            查询采集配置的实例列表。

            示例: jdc logs describe-collect-resources  --collect-info-uid xxx
        ''',
    )
    def describe_collect_resources(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DescribeCollectResourcesRequest import DescribeCollectResourcesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeCollectResourcesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--collect-info-uid'], dict(help="""(string) 采集配置 UID """, dest='collectInfoUID',  required=True)),
            (['--action'], dict(help="""(string) action """, dest='action',  required=True)),
            (['--resources'], dict(help="""(array: resource) 采集实例列表（系统日志存在上限限制20） """, dest='resources',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 增量更新采集实例列表。更新的动作支持 add 、 remove ''',
        description='''
            增量更新采集实例列表。更新的动作支持 add 、 remove。

            示例: jdc logs update-collect-resources  --collect-info-uid xxx --action xxx
        ''',
    )
    def update_collect_resources(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.UpdateCollectResourcesRequest import UpdateCollectResourcesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateCollectResourcesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logtopic-uid'], dict(help="""(string) 日志主题 UID """, dest='logtopicUID',  required=True)),
            (['--enabled'], dict(help="""(bool) 采集状态，0-禁用，1-启用 """, dest='enabled',  required=True)),
            (['--app-code'], dict(help="""(string) 日志来源，只能是 custom/jdcloud """, dest='appCode',  required=True)),
            (['--service-code'], dict(help="""(string) 产品线,当日志来源为jdcloud时，必填 """, dest='serviceCode',  required=True)),
            (['--resource-type'], dict(help="""(string) 采集实例类型, 只能是 all/part  当选择all时，传入的实例列表无效；custom类型的采集配置目前仅支持part方式，即用户指定实例列表； """, dest='resourceType',  required=True)),
            (['--resources'], dict(help="""(array: resource) 采集实例列表：jdcloud类型最多添加20个资源；custom类型支持的资源数量不限； """, dest='resources',  required=False)),
            (['--template-uid'], dict(help="""(string) 日志类型。当appcode为jdcloud时为必填 """, dest='templateUID',  required=False)),
            (['--log-path'], dict(help="""(string) 日志路径。当appcode为custom时为必填。目前仅支持对 Linux 云主机上的日志进行采集，路径支持通配符“*”和“？”，文件路径应符合 Linux 的文件路径规则 """, dest='logPath',  required=False)),
            (['--log-file'], dict(help="""(string) 日志文件名。当appcode为custom时为必填。日志文件名支持正则表达式。 """, dest='logFile',  required=False)),
            (['--log-filters'], dict(help="""(array: string) 过滤器。设置过滤器后可根据用户设定的关键词采集部分日志，如仅采集 Error 的日志。目前最大允许5个。 """, dest='logFilters',  required=False)),
            (['--filter-enabled'], dict(help="""(bool) 过滤器是否启用。当appcode为custom时必填 """, dest='filterEnabled',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建采集配置，支持基于云产品模板生成采集模板；支持用于自定义采集配置。 ''',
        description='''
            创建采集配置，支持基于云产品模板生成采集模板；支持用于自定义采集配置。。

            示例: jdc logs create-collect-info  --logtopic-uid xxx --enabled true --app-code xxx --service-code xxx --resource-type xxx
        ''',
    )
    def create_collect_info(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.CreateCollectInfoRequest import CreateCollectInfoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateCollectInfoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) region """, dest='regionId',  required=False)),
            (['--instance-id'], dict(help="""(string) instanceId """, dest='instanceId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 返回特定有效期的证书 ''',
        description='''
            返回特定有效期的证书。

            示例: jdc logs describe-logd-ca  --instance-id xxx
        ''',
    )
    def describe_logd_ca(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DescribeLogdCARequest import DescribeLogdCARequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLogdCARequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) region """, dest='regionId',  required=False)),
            (['--instance-id'], dict(help="""(string) instanceId """, dest='instanceId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询当前实例的采集配置列表：此接口会生成agent心跳监控数据，用以表征agent的可用性。请求中若添加了X-Jdcloud-Logs-md5的header，将按照md5的方式处理返回值。 ''',
        description='''
            查询当前实例的采集配置列表：此接口会生成agent心跳监控数据，用以表征agent的可用性。请求中若添加了X-Jdcloud-Logs-md5的header，将按照md5的方式处理返回值。。

            示例: jdc logs describe-instance-collect-confs  --instance-id xxx
        ''',
    )
    def describe_instance_collect_confs(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DescribeInstanceCollectConfsRequest import DescribeInstanceCollectConfsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeInstanceCollectConfsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--name'], dict(help="""(string) 日志集名称 """, dest='name',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询日志集列表。支持按照名称进行模糊查询。结果中包含了该日志集是否存在日志主题的信息。存在日志主题的日志集不允许删除。 ''',
        description='''
            查询日志集列表。支持按照名称进行模糊查询。结果中包含了该日志集是否存在日志主题的信息。存在日志主题的日志集不允许删除。。

            示例: jdc logs describe-logsets 
        ''',
    )
    def describe_logsets(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DescribeLogsetsRequest import DescribeLogsetsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLogsetsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--name'], dict(help="""(string) 日志集名称 """, dest='name',  required=True)),
            (['--description'], dict(help="""(string) 日志集描述 """, dest='description',  required=False)),
            (['--life-cycle'], dict(help="""(int) 保存周期，只能是 7， 15， 30 """, dest='lifeCycle', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建日志集。名称不可重复。 ''',
        description='''
            创建日志集。名称不可重复。。

            示例: jdc logs create-logset  --name xxx --life-cycle 0
        ''',
    )
    def create_logset(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.CreateLogsetRequest import CreateLogsetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateLogsetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logset-uid'], dict(help="""(string) 日志集 UID """, dest='logsetUID',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询日志集详情。 ''',
        description='''
            查询日志集详情。。

            示例: jdc logs describe-logset  --logset-uid xxx
        ''',
    )
    def describe_logset(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DescribeLogsetRequest import DescribeLogsetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLogsetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logset-uid'], dict(help="""(string) 日志集 UID """, dest='logsetUID',  required=True)),
            (['--description'], dict(help="""(string) 日志集描述 """, dest='description',  required=False)),
            (['--life-cycle'], dict(help="""(int) 保存周期，只能是 7， 15， 30 """, dest='lifeCycle', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 更新日志集。日志集名称不可更新。 ''',
        description='''
            更新日志集。日志集名称不可更新。。

            示例: jdc logs update-logset  --logset-uid xxx
        ''',
    )
    def update_logset(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.UpdateLogsetRequest import UpdateLogsetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateLogsetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logset-uids'], dict(help="""(string) 日志集ID，多个日志集ID以逗号分割 """, dest='logsetUIDs',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除日志集,删除多个日志集时，任意的日志集包含了日志主题的，将导致全部删除失败。 ''',
        description='''
            删除日志集,删除多个日志集时，任意的日志集包含了日志主题的，将导致全部删除失败。。

            示例: jdc logs delete-logset  --logset-uids xxx
        ''',
    )
    def delete_logset(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DeleteLogsetRequest import DeleteLogsetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLogsetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logset-uid'], dict(help="""(string) 日志集 UID """, dest='logsetUID',  required=True)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--name'], dict(help="""(string) 日志主题名称 """, dest='name',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询日志主题列表，支持按照名称模糊查询。 ''',
        description='''
            查询日志主题列表，支持按照名称模糊查询。。

            示例: jdc logs describe-logtopics  --logset-uid xxx
        ''',
    )
    def describe_logtopics(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DescribeLogtopicsRequest import DescribeLogtopicsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLogtopicsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logset-uid'], dict(help="""(string) 日志集 UID """, dest='logsetUID',  required=True)),
            (['--name'], dict(help="""(string) 日志主题名称 """, dest='name',  required=True)),
            (['--description'], dict(help="""(string) 日志集描述 """, dest='description',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建日志主题，不可与当前日志集下现有日志主题重名。 ''',
        description='''
            创建日志主题，不可与当前日志集下现有日志主题重名。。

            示例: jdc logs create-logtopic  --logset-uid xxx --name xxx
        ''',
    )
    def create_logtopic(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.CreateLogtopicRequest import CreateLogtopicRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateLogtopicRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logset-uid'], dict(help="""(string) 日志集 UID """, dest='logsetUID',  required=True)),
            (['--logtopic-uids'], dict(help="""(string) 日志主题ID，多个日志主题ID以逗号分割 """, dest='logtopicUIDs',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除日志主题。其采集配置与采集实例配置将一并删除。 ''',
        description='''
            删除日志主题。其采集配置与采集实例配置将一并删除。。

            示例: jdc logs delete-logtopic  --logset-uid xxx --logtopic-uids xxx
        ''',
    )
    def delete_logtopic(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DeleteLogtopicRequest import DeleteLogtopicRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteLogtopicRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logtopic-uid'], dict(help="""(string) 日志主题 UID """, dest='logtopicUID',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询日志主题基本信息。如配置了采集配置，将返回采集配置的UID ''',
        description='''
            查询日志主题基本信息。如配置了采集配置，将返回采集配置的UID。

            示例: jdc logs describe-logtopic  --logtopic-uid xxx
        ''',
    )
    def describe_logtopic(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.DescribeLogtopicRequest import DescribeLogtopicRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeLogtopicRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logtopic-uid'], dict(help="""(string) 日志主题 UID """, dest='logtopicUID',  required=True)),
            (['--description'], dict(help="""(string) 日志主题描述 """, dest='description',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 更新日志主题。日志主题名称不可更新。 ''',
        description='''
            更新日志主题。日志主题名称不可更新。。

            示例: jdc logs update-logtopic  --logtopic-uid xxx --description xxx
        ''',
    )
    def update_logtopic(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.UpdateLogtopicRequest import UpdateLogtopicRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateLogtopicRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--logtopic-uid'], dict(help="""(string) 日志主题uid """, dest='logtopicUID',  required=True)),
            (['--stream'], dict(help="""(string) 全局 strean 日志流标识符（建议起能唯一界定一个文件的名字，如 /i-iqnvqpinkjiq/app.log），不传则写入default日志流中（会导致很多文件混合在一起，不推荐） """, dest='stream',  required=False)),
            (['--timestamp'], dict(help="""(string) 全局时间戳，UTC格式，最多支持到纳秒级别，不传入则取服务器时间。如 2019-04-08T03:08:04.437670934Z、2019-04-08T03:08:04Z、2019-04-08T03:08:04.123Z """, dest='timestamp',  required=False)),
            (['--tags'], dict(help="""(object) 全局标签 map[string]string """, dest='tags',  required=False)),
            (['--entries'], dict(help="""(array: entry) 日志数据 """, dest='entries',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 自定义日志上报。 ''',
        description='''
            自定义日志上报。。

            示例: jdc logs put  --logtopic-uid xxx --entries ['{"":""}']
        ''',
    )
    def put(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.PutRequest import PutRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = PutRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logset-uid'], dict(help="""(string) 日志集 UID """, dest='logsetUID',  required=True)),
            (['--logtopic-uid'], dict(help="""(string) 日志主题 UID """, dest='logtopicUID',  required=True)),
            (['--anchor'], dict(help="""(array: object) 查询anchor,基于该值偏移进行上下文检索 """, dest='anchor',  required=True)),
            (['--direction'], dict(help="""(string) 搜索方向,默认both,可取值:up,down,both """, dest='direction',  required=False)),
            (['--filters'], dict(help="""(array: filter) 指定返回字段，只对系统日志生效，不填默认按照产品线配置返回字段，Name支持：key，Values填入返回字段 """, dest='filters',  required=False)),
            (['--id'], dict(help="""(string) 日志记录ID """, dest='id',  required=True)),
            (['--line-size'], dict(help="""(int) 查看上下文行数大小，最大支持200 """, dest='lineSize', type=int, required=True)),
            (['--time'], dict(help="""(int) 查询日志时返回的时间戳 """, dest='time', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 搜索日志上下文 ''',
        description='''
            搜索日志上下文。

            示例: jdc logs search-log-context  --logset-uid xxx --logtopic-uid xxx --anchor ['{"":""}'] --id xxx --line-size 0 --time 0
        ''',
    )
    def search_log_context(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.SearchLogContextRequest import SearchLogContextRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SearchLogContextRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--logset-uid'], dict(help="""(string) 日志集ID """, dest='logsetUID',  required=True)),
            (['--logtopic-uid'], dict(help="""(string) 日志主题ID """, dest='logtopicUID',  required=True)),
            (['--action'], dict(help="""(string) "preview"表示预览, "fulltext"表示全文检索, "advance"表示按照搜索语句检索 """, dest='action',  required=True)),
            (['--expr'], dict(help="""(string) Base64编码的搜索表达式, """, dest='expr',  required=False)),
            (['--case-sensitive'], dict(help="""(bool) 搜索关键字大小写敏感， 默认false """, dest='caseSensitive',  required=False)),
            (['--start-time'], dict(help="""(string) 开始时间。格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800” 当action != preview时，必填 """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 结束时间。格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800” 当action != preview时，必填 """, dest='endTime',  required=False)),
            (['--page-number'], dict(help="""(int) 页数。 最小为1，最大为99 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 每页个数。默认为10，最大100 """, dest='pageSize', type=int, required=False)),
            (['--sort'], dict(help="""(string) 返回排序,不填或者为空，默认为desc，"asc":按照时间正序返回结果，"desc":按照时间倒序返回结果 """, dest='sort',  required=False)),
            (['--filters'], dict(help="""(array: filter) 指定返回字段，只对系统日志生效，不填默认按照产品线配置返回字段，Name支持：key，Values填入返回字段 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 搜索日志 ''',
        description='''
            搜索日志。

            示例: jdc logs search  --logset-uid xxx --logtopic-uid xxx --action xxx
        ''',
    )
    def search(self):
        client_factory = ClientFactory('logs')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.logs.apis.SearchRequest import SearchRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SearchRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-collect-info','update-collect-info','describe-collect-resources','update-collect-resources','create-collect-info','describe-logd-ca','describe-instance-collect-confs','describe-logsets','create-logset','describe-logset','update-logset','delete-logset','describe-logtopics','create-logtopic','delete-logtopic','describe-logtopic','update-logtopic','put','search-log-context','search',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('logs', self.app.pargs.api)
        skeleton.show()
