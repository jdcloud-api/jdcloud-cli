# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class VodController(BaseController):
    class Meta:
        label = 'vod'
        help = 'Video-on-Demand'
        description = '''
        vod cli 子命令，视频点播相关接口。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/xxx/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 页码；默认值为 1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认值为 10；取值范围 [10, 100] """, dest='pageSize', type=int, required=False)),
            (['--sorts'], dict(help="""(array: sort) NA """, dest='sorts',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询分类列表。按照分页方式，返回分类列表信息。 ''',
        description='''
            查询分类列表。按照分页方式，返回分类列表信息。。

            示例: jdc vod list-categories 
        ''',
    )
    def list_categories(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.ListCategoriesRequest import ListCategoriesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ListCategoriesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--name'], dict(help="""(string) 分类名称 """, dest='name',  required=True)),
            (['--parent-id'], dict(help="""(int) 父分类ID，取值为 0 或 null 时，表示该分类为一级分类;  """, dest='parentId', type=int, required=False)),
            (['--description'], dict(help="""(string) 分类描述信息 """, dest='description',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加分类 ''',
        description='''
            添加分类。

            示例: jdc vod create-category  --name xxx
        ''',
    )
    def create_category(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.CreateCategoryRequest import CreateCategoryRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateCategoryRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--category-id'], dict(help="""(int) 分类ID """, dest='categoryId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询分类及其子分类，若指定的分类ID为0，则返回一个根分类及其子分类（即一级分类）. ''',
        description='''
            查询分类及其子分类，若指定的分类ID为0，则返回一个根分类及其子分类（即一级分类）.。

            示例: jdc vod get-category-with-children  --category-id 5
        ''',
    )
    def get_category_with_children(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetCategoryWithChildrenRequest import GetCategoryWithChildrenRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetCategoryWithChildrenRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--category-id'], dict(help="""(int) 分类ID """, dest='categoryId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询分类 ''',
        description='''
            查询分类。

            示例: jdc vod get-category  --category-id 5
        ''',
    )
    def get_category(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetCategoryRequest import GetCategoryRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetCategoryRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--category-id'], dict(help="""(int) 分类ID """, dest='categoryId', type=int, required=True)),
            (['--name'], dict(help="""(string) 分类名称 """, dest='name',  required=False)),
            (['--parent-id'], dict(help="""(int) 父分类ID，取值为 0 或 null 时，表示该分类为一级分类;  """, dest='parentId', type=int, required=False)),
            (['--description'], dict(help="""(string) 分类描述信息 """, dest='description',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改分类 ''',
        description='''
            修改分类。

            示例: jdc vod update-category  --category-id 5
        ''',
    )
    def update_category(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.UpdateCategoryRequest import UpdateCategoryRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateCategoryRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--category-id'], dict(help="""(int) 分类ID """, dest='categoryId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除分类 ''',
        description='''
            删除分类。

            示例: jdc vod delete-category  --category-id 5
        ''',
    )
    def delete_category(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DeleteCategoryRequest import DeleteCategoryRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteCategoryRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 页码；默认值为 1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认值为 10；取值范围 [10, 100] """, dest='pageSize', type=int, required=False)),
            (['--sorts'], dict(help="""(array: sort) NA """, dest='sorts',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询域名列表 ''',
        description='''
            查询域名列表。

            示例: jdc vod list-domains 
        ''',
    )
    def list_domains(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.ListDomainsRequest import ListDomainsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ListDomainsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--name'], dict(help="""(string) 域名名称 """, dest='name',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加域名 ''',
        description='''
            添加域名。

            示例: jdc vod create-domain  --name xxx
        ''',
    )
    def create_domain(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.CreateDomainRequest import CreateDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询域名 ''',
        description='''
            查询域名。

            示例: jdc vod get-domain  --domain-id 5
        ''',
    )
    def get_domain(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetDomainRequest import GetDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除域名。执行该操作，需确保域名已被停用。 ''',
        description='''
            删除域名。执行该操作，需确保域名已被停用。。

            示例: jdc vod delete-domain  --domain-id 5
        ''',
    )
    def delete_domain(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DeleteDomainRequest import DeleteDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用域名 ''',
        description='''
            启用域名。

            示例: jdc vod enable-domain  --domain-id 5
        ''',
    )
    def enable_domain(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.EnableDomainRequest import EnableDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = EnableDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 停用域名 ''',
        description='''
            停用域名。

            示例: jdc vod disable-domain  --domain-id 5
        ''',
    )
    def disable_domain(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DisableDomainRequest import DisableDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisableDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设为默认域名 ''',
        description='''
            设为默认域名。

            示例: jdc vod set-default-domain  --domain-id 5
        ''',
    )
    def set_default_domain(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.SetDefaultDomainRequest import SetDefaultDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetDefaultDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--header-name'], dict(help="""(string) 头参数名。当前支持的访问头参数取值范围：;   Content-Disposition;   Content-Language;   Expires;   Access-Control-Allow-Origin;   Access-Control-Allow-Methods;   Access-Control-Max-Age;   Access-Control-Expose-Headers;  """, dest='headerName',  required=True)),
            (['--header-value'], dict(help="""(string) 头参数值 """, dest='headerValue',  required=True)),
            (['--header-type'], dict(help="""(string) 头参数类型，取值范围：req、resp """, dest='headerType',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置域名访问头参数 ''',
        description='''
            设置域名访问头参数。

            示例: jdc vod set-header  --domain-id 5 --header-name xxx --header-value xxx --header-type xxx
        ''',
    )
    def set_header(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.SetHeaderRequest import SetHeaderRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetHeaderRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询域名访问头参数列表 ''',
        description='''
            查询域名访问头参数列表。

            示例: jdc vod list-headers  --domain-id 5
        ''',
    )
    def list_headers(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.ListHeadersRequest import ListHeadersRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ListHeadersRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--header-name'], dict(help="""(string) 头参数名。当前支持的访问头参数取值范围：;   Content-Disposition;   Content-Language;   Expires;   Access-Control-Allow-Origin;   Access-Control-Allow-Methods;   Access-Control-Max-Age;   Access-Control-Expose-Headers;  """, dest='headerName',  required=True)),
            (['--header-type'], dict(help="""(string) 头参数类型，取值范围：req、resp """, dest='headerType',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除域名访问头参数 ''',
        description='''
            删除域名访问头参数。

            示例: jdc vod delete-header  --domain-id 5 --header-name xxx --header-type xxx
        ''',
    )
    def delete_header(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DeleteHeaderRequest import DeleteHeaderRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteHeaderRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--config'], dict(help="""(refererRuleConfigObject) Referer防盗链规则配置对象 """, dest='config',  required=True)),
            (['--enabled'], dict(help="""(bool) 是否启用该规则 """, dest='enabled',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置CDN域名Referer防盗链规则 ''',
        description='''
            设置CDN域名Referer防盗链规则。

            示例: jdc vod set-referer-rule  --domain-id 5 --config '{"":""}' --enabled true
        ''',
    )
    def set_referer_rule(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.SetRefererRuleRequest import SetRefererRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetRefererRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询CDN域名Referer防盗链规则配置 ''',
        description='''
            查询CDN域名Referer防盗链规则配置。

            示例: jdc vod get-referer-rule  --domain-id 5
        ''',
    )
    def get_referer_rule(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetRefererRuleRequest import GetRefererRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetRefererRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--config'], dict(help="""(uRLRuleConfigObject) URL鉴权规则配置对象 """, dest='config',  required=True)),
            (['--enabled'], dict(help="""(bool) 是否启用该规则 """, dest='enabled',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置CDN域名URL鉴权规则 ''',
        description='''
            设置CDN域名URL鉴权规则。

            示例: jdc vod set-urlrule  --domain-id 5 --config '{"":""}' --enabled true
        ''',
    )
    def set_urlrule(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.SetURLRuleRequest import SetURLRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetURLRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询CDN域名URL鉴权规则配置 ''',
        description='''
            查询CDN域名URL鉴权规则配置。

            示例: jdc vod get-urlrule  --domain-id 5
        ''',
    )
    def get_urlrule(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetURLRuleRequest import GetURLRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetURLRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--config'], dict(help="""(iPRuleConfigObject) IP黑名单规则配置对象 """, dest='config',  required=True)),
            (['--enabled'], dict(help="""(bool) 是否启用该规则 """, dest='enabled',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置CDN域名IP黑名单规则 ''',
        description='''
            设置CDN域名IP黑名单规则。

            示例: jdc vod set-iprule  --domain-id 5 --config '{"":""}' --enabled true
        ''',
    )
    def set_iprule(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.SetIPRuleRequest import SetIPRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetIPRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询CDN域名IP黑名单规则配置 ''',
        description='''
            查询CDN域名IP黑名单规则配置。

            示例: jdc vod get-iprule  --domain-id 5
        ''',
    )
    def get_iprule(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetIPRuleRequest import GetIPRuleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetIPRuleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--source'], dict(help="""(string) 证书来源。取值范围：default """, dest='source',  required=False)),
            (['--title'], dict(help="""(string) 证书标题 """, dest='title',  required=False)),
            (['--ssl-cert'], dict(help="""(string) 证书内容 """, dest='sslCert',  required=False)),
            (['--ssl-key'], dict(help="""(string) 证书私钥 """, dest='sslKey',  required=False)),
            (['--jump-type'], dict(help="""(string) 跳转类型。取值范围：; default - 采用回源域名的默认协议; http - 强制采用http协议回源; https - 强制采用https协议回源;  """, dest='jumpType',  required=False)),
            (['--enabled'], dict(help="""(bool) SSL配置启用状态 """, dest='enabled',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 设置CDN域名SSL配置 ''',
        description='''
            设置CDN域名SSL配置。

            示例: jdc vod set-http-ssl  --domain-id 5
        ''',
    )
    def set_http_ssl(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.SetHttpSslRequest import SetHttpSslRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SetHttpSslRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--domain-id'], dict(help="""(int) 域名ID """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询CDN域名SSL配置 ''',
        description='''
            查询CDN域名SSL配置。

            示例: jdc vod get-http-ssl  --domain-id 5
        ''',
    )
    def get_http_ssl(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetHttpSslRequest import GetHttpSslRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetHttpSslRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--title'], dict(help="""(string) 视频标题 """, dest='title',  required=True)),
            (['--file-name'], dict(help="""(string) 文件名称 """, dest='fileName',  required=True)),
            (['--file-size'], dict(help="""(int) 文件大小 """, dest='fileSize', type=int, required=False)),
            (['--cover-url'], dict(help="""(string) 封面地址 """, dest='coverUrl',  required=False)),
            (['--description'], dict(help="""(string) 视频描述 """, dest='description',  required=False)),
            (['--category-id'], dict(help="""(int) 分类ID """, dest='categoryId', type=int, required=False)),
            (['--tags'], dict(help="""(array: string) 视频标签集合 """, dest='tags',  required=False)),
            (['--transcode-template-ids'], dict(help="""(array: int) 转码模板ID集合 """, dest='transcodeTemplateIds', type=int, required=False)),
            (['--watermark-ids'], dict(help="""(array: int) 水印ID集合 """, dest='watermarkIds', type=int, required=False)),
            (['--publish-domain'], dict(help="""(string) 推流域名 """, dest='publishDomain',  required=True)),
            (['--app-name'], dict(help="""(string) 应用名称 """, dest='appName',  required=True)),
            (['--stream-name'], dict(help="""(string) 流名称 """, dest='streamName',  required=True)),
            (['--record-times'], dict(help="""(array: recordTime) 录制时间段集合; - 支持自定义1-10个时间段,拼接成一个文件; - 每个时间段不小于10s; - 总跨度不超过12小时; - 时间段按升序排列且无重叠;  """, dest='recordTimes',  required=True)),
            (['--record-file-type'], dict(help="""(string) 录制文件类型:; - 取值: ts, flv, mp4; - 不区分大小写;  """, dest='recordFileType',  required=True)),
            (['--task-external-id'], dict(help="""(string) 直播录制任务外键 """, dest='taskExternalId',  required=False)),
            (['--priority'], dict(help="""(string) 任务优先级:; - 取值: low, medium, high; - 不区分大小写;  """, dest='priority',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建直播转点播任务 ''',
        description='''
            创建直播转点播任务。

            示例: jdc vod create-live-to-vod-task  --title xxx --file-name xxx --publish-domain xxx --app-name xxx --stream-name xxx --record-times ['{"":""}'] --record-file-type xxx
        ''',
    )
    def create_live_to_vod_task(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.CreateLiveToVodTaskRequest import CreateLiveToVodTaskRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateLiveToVodTaskRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--http-method'], dict(help="""(string) HTTP 请求方法，上传只支持 PUT 方法，默认值为 PUT """, dest='httpMethod',  required=False)),
            (['--title'], dict(help="""(string) 视频标题 """, dest='title',  required=True)),
            (['--file-name'], dict(help="""(string) 文件名称 """, dest='fileName',  required=True)),
            (['--file-size'], dict(help="""(int) 文件大小 """, dest='fileSize', type=int, required=False)),
            (['--cover-url'], dict(help="""(string) 封面地址 """, dest='coverUrl',  required=False)),
            (['--description'], dict(help="""(string) 视频描述 """, dest='description',  required=False)),
            (['--category-id'], dict(help="""(int) 分类ID """, dest='categoryId', type=int, required=False)),
            (['--tags'], dict(help="""(array: string) 视频标签集合 """, dest='tags',  required=False)),
            (['--transcode-template-ids'], dict(help="""(array: int) 转码模板ID集合 """, dest='transcodeTemplateIds', type=int, required=False)),
            (['--watermark-ids'], dict(help="""(array: int) 水印ID集合 """, dest='watermarkIds', type=int, required=False)),
            (['--user-data'], dict(help="""(string) 自定义数据 """, dest='userData',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取视频上传地址和凭证 ''',
        description='''
            获取视频上传地址和凭证。

            示例: jdc vod create-video-upload-task  --title xxx --file-name xxx
        ''',
    )
    def create_video_upload_task(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.CreateVideoUploadTaskRequest import CreateVideoUploadTaskRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateVideoUploadTaskRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-id'], dict(help="""(string) 视频地址 """, dest='videoId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 刷新视频上传地址和凭证 ''',
        description='''
            刷新视频上传地址和凭证。

            示例: jdc vod refresh-video-upload-task  --video-id xxx
        ''',
    )
    def refresh_video_upload_task(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.RefreshVideoUploadTaskRequest import RefreshVideoUploadTaskRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = RefreshVideoUploadTaskRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--http-method'], dict(help="""(string) HTTP 请求方法，上传只支持 PUT 方法，默认值为 PUT """, dest='httpMethod',  required=False)),
            (['--file-name'], dict(help="""(string) 文件名称 """, dest='fileName',  required=True)),
            (['--file-size'], dict(help="""(int) 文件大小 """, dest='fileSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取图片上传地址和凭证 ''',
        description='''
            获取图片上传地址和凭证。

            示例: jdc vod create-image-upload-task  --file-name xxx
        ''',
    )
    def create_image_upload_task(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.CreateImageUploadTaskRequest import CreateImageUploadTaskRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateImageUploadTaskRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--media-id'], dict(help="""(string) 媒资ID """, dest='mediaId',  required=False)),
            (['--template-ids'], dict(help="""(array: int) 质检模板ID列表 """, dest='templateIds', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 提交质检作业 ''',
        description='''
            提交质检作业。

            示例: jdc vod submit-quality-detection-job 
        ''',
    )
    def submit_quality_detection_job(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.SubmitQualityDetectionJobRequest import SubmitQualityDetectionJobRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SubmitQualityDetectionJobRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--bulk-items'], dict(help="""(array: submitQualityDetectionJobRequestObject) NA """, dest='bulkItems',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量提交质检作业 ''',
        description='''
            批量提交质检作业。

            示例: jdc vod batch-submit-quality-detection-jobs 
        ''',
    )
    def batch_submit_quality_detection_jobs(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.BatchSubmitQualityDetectionJobsRequest import BatchSubmitQualityDetectionJobsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = BatchSubmitQualityDetectionJobsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 页码；默认值为 1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认值为 10；取值范围 [10, 100] """, dest='pageSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询质测模板列表。;  ''',
        description='''
            查询质测模板列表。; 。

            示例: jdc vod list-quality-detection-templates 
        ''',
    )
    def list_quality_detection_templates(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.ListQualityDetectionTemplatesRequest import ListQualityDetectionTemplatesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ListQualityDetectionTemplatesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--name'], dict(help="""(string) 模板名称。长度不超过128个字符。UTF-8编码。;  """, dest='name',  required=True)),
            (['--template-type'], dict(help="""(string) 模板类型，区分该模板的检测内容。目前只支持 video 。 """, dest='templateType',  required=True)),
            (['--detections'], dict(help="""(array: string) 检测项列表。取值范围：;   blackScreen - 黑场;   pureColor - 纯色;   colorCast - 偏色;   frozenFrame - 静帧;   brightness - 亮度;   contrast - 对比度;  """, dest='detections',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建质检模板 ''',
        description='''
            创建质检模板。

            示例: jdc vod create-quality-detection-template  --name xxx --template-type xxx
        ''',
    )
    def create_quality_detection_template(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.CreateQualityDetectionTemplateRequest import CreateQualityDetectionTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateQualityDetectionTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--template-id'], dict(help="""(int) 模板ID """, dest='templateId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询质检模板 ''',
        description='''
            查询质检模板。

            示例: jdc vod get-quality-detection-template  --template-id 5
        ''',
    )
    def get_quality_detection_template(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetQualityDetectionTemplateRequest import GetQualityDetectionTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetQualityDetectionTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--template-id'], dict(help="""(int) 模板ID """, dest='templateId', type=int, required=True)),
            (['--name'], dict(help="""(string) 模板名称。长度不超过128个字符。UTF-8编码。;  """, dest='name',  required=False)),
            (['--detections'], dict(help="""(array: string) 检测项列表。取值范围：;   blackScreen - 黑场;   pureColor - 纯色;   colorCast - 偏色;   frozenFrame - 静帧;   brightness - 亮度;   contrast - 对比度;  """, dest='detections',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改质检模板 ''',
        description='''
            修改质检模板。

            示例: jdc vod update-quality-detection-template  --template-id 5
        ''',
    )
    def update_quality_detection_template(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.UpdateQualityDetectionTemplateRequest import UpdateQualityDetectionTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateQualityDetectionTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--template-id'], dict(help="""(int) 模板ID """, dest='templateId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除质检模板 ''',
        description='''
            删除质检模板。

            示例: jdc vod delete-quality-detection-template  --template-id 5
        ''',
    )
    def delete_quality_detection_template(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DeleteQualityDetectionTemplateRequest import DeleteQualityDetectionTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteQualityDetectionTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-id'], dict(help="""(string) 视频ID """, dest='videoId',  required=False)),
            (['--template-ids'], dict(help="""(array: int) 转码模板ID列表 """, dest='templateIds', type=int, required=False)),
            (['--watermark-ids'], dict(help="""(array: int) 水印ID列表 """, dest='watermarkIds', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 提交转码作业 ''',
        description='''
            提交转码作业。

            示例: jdc vod submit-transcode-job 
        ''',
    )
    def submit_transcode_job(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.SubmitTranscodeJobRequest import SubmitTranscodeJobRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SubmitTranscodeJobRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--bulk-items'], dict(help="""(array: submitTranscodeJobRequestObject) NA """, dest='bulkItems',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量提交转码作业 ''',
        description='''
            批量提交转码作业。

            示例: jdc vod batch-submit-transcode-jobs 
        ''',
    )
    def batch_submit_transcode_jobs(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.BatchSubmitTranscodeJobsRequest import BatchSubmitTranscodeJobsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = BatchSubmitTranscodeJobsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 页码；默认值为 1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认值为 10；取值范围 [10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) NA """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询转码模板列表。; 允许通过条件过滤查询，支持的过滤字段如下：;   - source[eq] 按模板来源精确查询;   - templateType[eq] 按模板类型精确查询;  ''',
        description='''
            查询转码模板列表。; 允许通过条件过滤查询，支持的过滤字段如下：;   - source[eq] 按模板来源精确查询;   - templateType[eq] 按模板类型精确查询; 。

            示例: jdc vod list-transcode-templates 
        ''',
    )
    def list_transcode_templates(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.ListTranscodeTemplatesRequest import ListTranscodeTemplatesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ListTranscodeTemplatesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--name'], dict(help="""(string) 模板名称。长度不超过128个字符。UTF-8编码。;  """, dest='name',  required=True)),
            (['--video'], dict(help="""(video) 视频参数配置 """, dest='video',  required=True)),
            (['--audio'], dict(help="""(audio) 音频参数配置 """, dest='audio',  required=True)),
            (['--encapsulation'], dict(help="""(encapsulation) 封装配置 """, dest='encapsulation',  required=True)),
            (['--definition'], dict(help="""(string) 清晰度规格标记。取值范围：;   SD - 标清;   HD - 高清;   FHD - 超清;   2K;   4K;  """, dest='definition',  required=True)),
            (['--template-type'], dict(help="""(string) 模板类型。取值范围：;   jdchd - 京享超清;   jdchs - 极速转码;  """, dest='templateType',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建转码模板 ''',
        description='''
            创建转码模板。

            示例: jdc vod create-transcode-template  --name xxx --video '{"":""}' --audio '{"":""}' --encapsulation '{"":""}' --definition xxx
        ''',
    )
    def create_transcode_template(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.CreateTranscodeTemplateRequest import CreateTranscodeTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateTranscodeTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--template-id'], dict(help="""(int) 模板ID """, dest='templateId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询转码模板 ''',
        description='''
            查询转码模板。

            示例: jdc vod get-transcode-template  --template-id 5
        ''',
    )
    def get_transcode_template(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetTranscodeTemplateRequest import GetTranscodeTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetTranscodeTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--template-id'], dict(help="""(int) 模板ID """, dest='templateId', type=int, required=True)),
            (['--name'], dict(help="""(string) 模板名称。长度不超过128个字符。UTF-8编码。;  """, dest='name',  required=False)),
            (['--video'], dict(help="""(video) 视频参数配置 """, dest='video',  required=False)),
            (['--audio'], dict(help="""(audio) 音频参数配置 """, dest='audio',  required=False)),
            (['--encapsulation'], dict(help="""(encapsulation) 封装配置 """, dest='encapsulation',  required=False)),
            (['--definition'], dict(help="""(string) 清晰度规格标记。取值范围：;   SD - 标清;   HD - 高清;   FHD - 超清;   2K;   4K;  """, dest='definition',  required=False)),
            (['--template-type'], dict(help="""(string) 模板类型。取值范围：;   jdchd - 京享超清;   jdchs - 极速转码;  """, dest='templateType',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改转码模板 ''',
        description='''
            修改转码模板。

            示例: jdc vod update-transcode-template  --template-id 5
        ''',
    )
    def update_transcode_template(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.UpdateTranscodeTemplateRequest import UpdateTranscodeTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateTranscodeTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--template-id'], dict(help="""(int) 模板ID """, dest='templateId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除转码模板 ''',
        description='''
            删除转码模板。

            示例: jdc vod delete-transcode-template  --template-id 5
        ''',
    )
    def delete_transcode_template(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DeleteTranscodeTemplateRequest import DeleteTranscodeTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteTranscodeTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 页码；默认值为 1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认值为 10；取值范围 [10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) NA """, dest='filters',  required=False)),
            (['--sorts'], dict(help="""(array: sort) NA """, dest='sorts',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询视频列表信息。; 允许通过条件过滤查询，支持的过滤字段如下：;   - status[eq] 按视频状态精确查询;   - categoryId[eq] 按分类ID精确查询;   - videoId[eq] 按视频ID精确查询;   - name[eq] 按视频名称精确查询;  ''',
        description='''
            查询视频列表信息。; 允许通过条件过滤查询，支持的过滤字段如下：;   - status[eq] 按视频状态精确查询;   - categoryId[eq] 按分类ID精确查询;   - videoId[eq] 按视频ID精确查询;   - name[eq] 按视频名称精确查询; 。

            示例: jdc vod list-videos 
        ''',
    )
    def list_videos(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.ListVideosRequest import ListVideosRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ListVideosRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-id'], dict(help="""(string) 视频ID """, dest='videoId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询单个视频信息 ''',
        description='''
            查询单个视频信息。

            示例: jdc vod get-video  --video-id xxx
        ''',
    )
    def get_video(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetVideoRequest import GetVideoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetVideoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-id'], dict(help="""(string) 视频ID """, dest='videoId',  required=True)),
            (['--name'], dict(help="""(string) 视频名称 """, dest='name',  required=False)),
            (['--category-id'], dict(help="""(int) 分类ID """, dest='categoryId', type=int, required=False)),
            (['--tags'], dict(help="""(array: string) 标签 """, dest='tags',  required=False)),
            (['--cover-url'], dict(help="""(string) 封面地址 """, dest='coverUrl',  required=False)),
            (['--description'], dict(help="""(string) 视频描述信息 """, dest='description',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改视频信息 ''',
        description='''
            修改视频信息。

            示例: jdc vod update-video  --video-id xxx
        ''',
    )
    def update_video(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.UpdateVideoRequest import UpdateVideoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateVideoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-id'], dict(help="""(string) 视频ID """, dest='videoId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除视频，调用该接口会同时删除与指定视频相关的所有信息，包括转码任务信息、转码流数据等，同时清除云存储中相关文件资源。 ''',
        description='''
            删除视频，调用该接口会同时删除与指定视频相关的所有信息，包括转码任务信息、转码流数据等，同时清除云存储中相关文件资源。。

            示例: jdc vod delete-video  --video-id xxx
        ''',
    )
    def delete_video(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DeleteVideoRequest import DeleteVideoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteVideoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-ids'], dict(help="""(array: string) 视频ID集合 """, dest='videoIds',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量删除视频，调用该接口会同时删除与指定视频相关的所有信息，包括转码任务信息、转码流数据等，同时清除云存储中相关文件资源。 ''',
        description='''
            批量删除视频，调用该接口会同时删除与指定视频相关的所有信息，包括转码任务信息、转码流数据等，同时清除云存储中相关文件资源。。

            示例: jdc vod batch-delete-videos 
        ''',
    )
    def batch_delete_videos(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.BatchDeleteVideosRequest import BatchDeleteVideosRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = BatchDeleteVideosRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--bulk-items'], dict(help="""(array: batchUpdateVideosBulkItem) 批量更新视频的条目集合 """, dest='bulkItems',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量修改视频信息 ''',
        description='''
            批量修改视频信息。

            示例: jdc vod batch-update-videos  --bulk-items ['{"":""}']
        ''',
    )
    def batch_update_videos(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.BatchUpdateVideosRequest import BatchUpdateVideosRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = BatchUpdateVideosRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-id'], dict(help="""(string) 视频ID """, dest='videoId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取视频播放信息 ''',
        description='''
            获取视频播放信息。

            示例: jdc vod get-video-play-info  --video-id xxx
        ''',
    )
    def get_video_play_info(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetVideoPlayInfoRequest import GetVideoPlayInfoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetVideoPlayInfoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-id'], dict(help="""(string) 视频ID """, dest='videoId',  required=True)),
            (['--task-ids'], dict(help="""(array: int) NA """, dest='taskIds', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除视频转码流 ''',
        description='''
            删除视频转码流。

            示例: jdc vod delete-video-streams  --video-id xxx --task-ids [0]
        ''',
    )
    def delete_video_streams(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DeleteVideoStreamsRequest import DeleteVideoStreamsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteVideoStreamsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--video-id'], dict(help="""(string) 视频ID """, dest='videoId',  required=True)),
            (['--audit-result'], dict(help="""(string) 审核结果，取值范围:;  block(封禁);  unblock(解封);  """, dest='auditResult',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 视频审核; 视频在上传中或者转码中不允许更改视频审核状态，即视频只有在正常或屏蔽状态下才可以调用此接口设置审核状态;  ''',
        description='''
            视频审核; 视频在上传中或者转码中不允许更改视频审核状态，即视频只有在正常或屏蔽状态下才可以调用此接口设置审核状态; 。

            示例: jdc vod video-audit  --video-id xxx --audit-result xxx
        ''',
    )
    def video_audit(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.VideoAuditRequest import VideoAuditRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = VideoAuditRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 页码；默认值为 1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认值为 10；取值范围 [10, 100] """, dest='pageSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询水印列表 ''',
        description='''
            查询水印列表。

            示例: jdc vod list-watermarks 
        ''',
    )
    def list_watermarks(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.ListWatermarksRequest import ListWatermarksRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ListWatermarksRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--name'], dict(help="""(string) 水印名称。只支持中英文、数字。长度不超过128个字符。UTF-8编码。;  """, dest='name',  required=True)),
            (['--img-url'], dict(help="""(string) 图片地址 """, dest='imgUrl',  required=True)),
            (['--width'], dict(help="""(string) 水印宽度。; 当 sizeUnit = pixel 时，取值范围为 [8, 4096] 整数; 当 sizeUnit = percent 时，取值范围为 [0, 100] 小数;  """, dest='width',  required=True)),
            (['--height'], dict(help="""(string) 水印高度。; 当 sizeUnit = pixel 时，取值范围为 [8, 4096] 整数; 当 sizeUnit = percent 时，取值范围为 [0, 100] 小数;  """, dest='height',  required=True)),
            (['--size-unit'], dict(help="""(string) 尺寸单位。取值范围：;   pixel - 像素;   percent - 百分比; 默认值为 pixel;  """, dest='sizeUnit',  required=False)),
            (['--position'], dict(help="""(string) 水印位置。取值范围：;   LT - 左上;   RT - 右上;   LB - 左下;   RB - 右下;  """, dest='position',  required=True)),
            (['--offset-x'], dict(help="""(string) 水平偏移。; 当 offsetUnit = pixel 时，取值范围为 [8, 4088] 整数; 当 offsetUnit = percent 时，取值范围为 [0, 100] 小数;  """, dest='offsetX',  required=True)),
            (['--offset-y'], dict(help="""(string) 竖直偏移。; 当 offsetUnit = pixel 时，取值范围为 [8, 4088] 整数; 当 offsetUnit = percent 时，取值范围为 [0, 100] 小数;  """, dest='offsetY',  required=True)),
            (['--offset-unit'], dict(help="""(string) 偏移单位。取值范围：;   pixel - 像素;   percent - 百分比; 默认值为 pixel;  """, dest='offsetUnit',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加水印 ''',
        description='''
            添加水印。

            示例: jdc vod create-watermark  --name xxx --img-url xxx --width xxx --height xxx --position xxx --offset-x xxx --offset-y xxx
        ''',
    )
    def create_watermark(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.CreateWatermarkRequest import CreateWatermarkRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateWatermarkRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--watermark-id'], dict(help="""(int) 水印ID """, dest='watermarkId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询水印 ''',
        description='''
            查询水印。

            示例: jdc vod get-watermark  --watermark-id 5
        ''',
    )
    def get_watermark(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.GetWatermarkRequest import GetWatermarkRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetWatermarkRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--watermark-id'], dict(help="""(int) 水印ID """, dest='watermarkId', type=int, required=True)),
            (['--name'], dict(help="""(string) 水印名称。只支持中英文、数字。长度不超过128个字符。UTF-8编码。;  """, dest='name',  required=False)),
            (['--img-url'], dict(help="""(string) 图片地址 """, dest='imgUrl',  required=False)),
            (['--width'], dict(help="""(string) 水印宽度。; 当 sizeUnit = pixel 时，取值范围为 [8, 4096] 整数; 当 sizeUnit = percent 时，取值范围为 [0, 100] 小数;  """, dest='width',  required=False)),
            (['--height'], dict(help="""(string) 水印高度。; 当 sizeUnit = pixel 时，取值范围为 [8, 4096] 整数; 当 sizeUnit = percent 时，取值范围为 [0, 100] 小数;  """, dest='height',  required=False)),
            (['--size-unit'], dict(help="""(string) 尺寸单位。取值范围：;   pixel - 像素;   percent - 百分比; 默认值为 pixel;  """, dest='sizeUnit',  required=False)),
            (['--position'], dict(help="""(string) 水印位置。取值范围：;   LT - 左上;   RT - 右上;   LB - 左下;   RB - 右下;  """, dest='position',  required=False)),
            (['--offset-x'], dict(help="""(string) 水平偏移。; 当 offsetUnit = pixel 时，取值范围为 [8, 4088] 整数; 当 offsetUnit = percent 时，取值范围为 [0, 100] 小数;  """, dest='offsetX',  required=False)),
            (['--offset-y'], dict(help="""(string) 竖直偏移。; 当 offsetUnit = pixel 时，取值范围为 [8, 4088] 整数; 当 offsetUnit = percent 时，取值范围为 [0, 100] 小数;  """, dest='offsetY',  required=False)),
            (['--offset-unit'], dict(help="""(string) 偏移单位。取值范围：;   pixel - 像素;   percent - 百分比; 默认值为 pixel;  """, dest='offsetUnit',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改水印 ''',
        description='''
            修改水印。

            示例: jdc vod update-watermark  --watermark-id 5
        ''',
    )
    def update_watermark(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.UpdateWatermarkRequest import UpdateWatermarkRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateWatermarkRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--watermark-id'], dict(help="""(int) 水印ID """, dest='watermarkId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除水印 ''',
        description='''
            删除水印。

            示例: jdc vod delete-watermark  --watermark-id 5
        ''',
    )
    def delete_watermark(self):
        client_factory = ClientFactory('vod')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.vod.apis.DeleteWatermarkRequest import DeleteWatermarkRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteWatermarkRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['list-categories','create-category','get-category-with-children','get-category','update-category','delete-category','list-domains','create-domain','get-domain','delete-domain','enable-domain','disable-domain','set-default-domain','set-header','list-headers','delete-header','set-referer-rule','get-referer-rule','set-urlrule','get-urlrule','set-iprule','get-iprule','set-http-ssl','get-http-ssl','create-live-to-vod-task','create-video-upload-task','refresh-video-upload-task','create-image-upload-task','submit-quality-detection-job','batch-submit-quality-detection-jobs','list-quality-detection-templates','create-quality-detection-template','get-quality-detection-template','update-quality-detection-template','delete-quality-detection-template','submit-transcode-job','batch-submit-transcode-jobs','list-transcode-templates','create-transcode-template','get-transcode-template','update-transcode-template','delete-transcode-template','list-videos','get-video','update-video','delete-video','batch-delete-videos','batch-update-videos','get-video-play-info','delete-video-streams','video-audit','list-watermarks','create-watermark','get-watermark','update-watermark','delete-watermark',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('vod', self.app.pargs.api)
        skeleton.show()
