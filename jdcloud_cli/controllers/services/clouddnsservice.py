# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class ClouddnsserviceController(BaseController):
    class Meta:
        label = 'clouddnsservice'
        help = '京东云解析OpenAPI接口'
        description = '''
        clouddnsservice cli 子命令，京东云解析OpenAPI接口。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/domain-name-service/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 分页参数，页的序号，默认是1 """, dest='pageNumber', type=int, required=True)),
            (['--page-size'], dict(help="""(int) 分页参数，每页含有的结果的数目，默认是10 """, dest='pageSize', type=int, required=True)),
            (['--start-time'], dict(help="""(string) 记录的起始时间，格式：UTC时间例如2017-11-10T23:00:00Z """, dest='startTime',  required=True)),
            (['--end-time'], dict(help="""(string) 记录的终止时间，格式：UTC时间例如2017-11-10T23:00:00Z """, dest='endTime',  required=True)),
            (['--key-word'], dict(help="""(string) 日志需要匹配的关键词 """, dest='keyWord',  required=False)),
            (['--success'], dict(help="""(bool) 日志里面的结果是成功还是失败 """, dest='success',  required=False)),
            (['--type'], dict(help="""(int) 日志的类型 """, dest='type', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看用户在云解析服务下的操作记录 ''',
        description='''
            查看用户在云解析服务下的操作记录。

            示例: jdc clouddnsservice get-action-log  --page-number 0 --page-size 0 --start-time xxx --end-time xxx
        ''',
    )
    def get_action_log(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetActionLogRequest import GetActionLogRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetActionLogRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 分页查询时查询的每页的序号，起始值为1，默认为1 """, dest='pageNumber', type=int, required=True)),
            (['--page-size'], dict(help="""(int) 分页查询时设置的每页行数，默认为10 """, dest='pageSize', type=int, required=True)),
            (['--domain-name'], dict(help="""(string) 关键字，按照”%domainName%”模式匹配主域名 """, dest='domainName',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取用户所属的主域名列表。   ; 请在调用域名相关的接口之前，调用此接口获取相关的domainId和domainName。  ; 主域名的相关概念，请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/product-overview">云解析文档</a>;  ''',
        description='''
            获取用户所属的主域名列表。   ; 请在调用域名相关的接口之前，调用此接口获取相关的domainId和domainName。  ; 主域名的相关概念，请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/product-overview">云解析文档</a>; 。

            示例: jdc clouddnsservice get-domains  --page-number 0 --page-size 0
        ''',
    )
    def get_domains(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetDomainsRequest import GetDomainsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetDomainsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--pack-id'], dict(help="""(int) 主域名的套餐类型, 0->免费 ,1->企业版, 2->高级版 """, dest='packId', type=int, required=True)),
            (['--domain-name'], dict(help="""(string) 要添加的主域名 """, dest='domainName',  required=True)),
            (['--domain-id'], dict(help="""(int) 主域名的ID，升级套餐必填，请使用getDomains获取 """, dest='domainId', type=int, required=False)),
            (['--buy-type'], dict(help="""(int) 1->新购买、3->升级，收费套餐的域名必填 """, dest='buyType', type=int, required=False)),
            (['--time-span'], dict(help="""(int) 取值1，2，3 ，含义：时长，收费套餐的域名必填 """, dest='timeSpan', type=int, required=False)),
            (['--time-unit'], dict(help="""(int) 时间单位，收费套餐的域名必填，1：小时，2：天，3：月，4：年 """, dest='timeUnit', type=int, required=False)),
            (['--billing-type'], dict(help="""(int) 计费类型，可以不传此参数。 """, dest='billingType', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加主域名  ; 如何添加免费域名，详细情况请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/domainadd">文档</a>; 添加收费域名，请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/purchase-process">文档</a>，; 添加收费域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情。;  ''',
        description='''
            添加主域名  ; 如何添加免费域名，详细情况请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/domainadd">文档</a>; 添加收费域名，请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/purchase-process">文档</a>，; 添加收费域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情。; 。

            示例: jdc clouddnsservice add-domain  --pack-id 0 --domain-name xxx
        ''',
    )
    def add_domain(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.AddDomainRequest import AddDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(int) 需要删除的主域名ID，请使用getDomains接口获取 """, dest='domainId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除主域名 ''',
        description='''
            删除主域名。

            示例: jdc clouddnsservice del-domain  --domain-id 0
        ''',
    )
    def del_domain(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.DelDomainRequest import DelDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DelDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-name'], dict(help="""(string) 需要修改的主域名，请使用getDomains接口获取 """, dest='domainName',  required=True)),
            (['--id'], dict(help="""(int) 需要修改的主域名ID，请使用getDomains接口获取 """, dest='id', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改主域名 ''',
        description='''
            修改主域名。

            示例: jdc clouddnsservice update-domain  --domain-name xxx --id 0
        ''',
    )
    def update_domain(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.UpdateDomainRequest import UpdateDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--domain-name'], dict(help="""(string) 查询的主域名，，请使用getDomains接口获取 """, dest='domainName',  required=True)),
            (['--start'], dict(help="""(string) 查询时间段的起始时间, UTC时间，例如2017-11-10T23:00:00Z """, dest='start',  required=True)),
            (['--end'], dict(help="""(string) 查询时间段的终止时间, UTC时间，例如2017-11-10T23:00:00Z """, dest='end',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看主域名的解析次数 ''',
        description='''
            查看主域名的解析次数。

            示例: jdc clouddnsservice get-domain-query-count  --domain-id xxx --domain-name xxx --start xxx --end xxx
        ''',
    )
    def get_domain_query_count(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetDomainQueryCountRequest import GetDomainQueryCountRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetDomainQueryCountRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--domain-name'], dict(help="""(string) 主域名，请使用getDomains接口获取 """, dest='domainName',  required=True)),
            (['--start'], dict(help="""(string) 时间段的起始时间, UTC时间，例如2017-11-10T23:00:00Z """, dest='start',  required=True)),
            (['--end'], dict(help="""(string) 时间段的终止时间, UTC时间，例如2017-11-10T23:00:00Z """, dest='end',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看域名的查询流量 ''',
        description='''
            查看域名的查询流量。

            示例: jdc clouddnsservice get-domain-query-traffic  --domain-id xxx --domain-name xxx --start xxx --end xxx
        ''',
    )
    def get_domain_query_traffic(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetDomainQueryTrafficRequest import GetDomainQueryTrafficRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetDomainQueryTrafficRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--page-number'], dict(help="""(int) 当前页数，起始值为1，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页查询时设置的每页行数, 默认为10 """, dest='pageSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询主域名的解析记录。  ; 在使用解析记录相关的接口之前，请调用此接口获取解析记录的列表。;  ''',
        description='''
            查询主域名的解析记录。  ; 在使用解析记录相关的接口之前，请调用此接口获取解析记录的列表。; 。

            示例: jdc clouddnsservice search-rr  --domain-id xxx
        ''',
    )
    def search_rr(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.SearchRRRequest import SearchRRRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SearchRRRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--load-mode'], dict(help="""(int) 展示方式，暂时不使用 """, dest='loadMode', type=int, required=False)),
            (['--pack-id'], dict(help="""(int) 套餐ID，0->免费版 1->企业版 2->企业高级版 """, dest='packId', type=int, required=True)),
            (['--view-id'], dict(help="""(int) view ID，默认为-1 """, dest='viewId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询云解析所有的基础解析线路。  ; 在使用解析线路的参数之前，请调用此接口获取解析线路的ID。;  ''',
        description='''
            查询云解析所有的基础解析线路。  ; 在使用解析线路的参数之前，请调用此接口获取解析线路的ID。; 。

            示例: jdc clouddnsservice get-view-tree  --domain-id xxx --pack-id 0 --view-id 0
        ''',
    )
    def get_view_tree(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetViewTreeRequest import GetViewTreeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetViewTreeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--req'], dict(help="""(addRR) RR参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加主域名的解析记录 ''',
        description='''
            添加主域名的解析记录。

            示例: jdc clouddnsservice add-rr  --domain-id xxx --req '{"":""}'
        ''',
    )
    def add_rr(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.AddRRRequest import AddRRRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddRRRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--req'], dict(help="""(updateRR) updateRR参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改主域名的某个解析记录 ''',
        description='''
            修改主域名的某个解析记录。

            示例: jdc clouddnsservice update-rr  --domain-id xxx --req '{"":""}'
        ''',
    )
    def update_rr(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.UpdateRRRequest import UpdateRRRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateRRRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--ids'], dict(help="""(array: int) 需要操作的解析记录ID，请使用searchRR接口获取。 """, dest='ids', type=int, required=True)),
            (['--action'], dict(help="""(string) 操作类型，on->启用 off->停用 del->删除 """, dest='action',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用、停用、删除主域名下的解析记录 ''',
        description='''
            启用、停用、删除主域名下的解析记录。

            示例: jdc clouddnsservice operate-rr  --domain-id xxx --ids [0] --action xxx
        ''',
    )
    def operate_rr(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.OperateRRRequest import OperateRRRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = OperateRRRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--req'], dict(help="""(array: batchSetDNS) 需要设置的解析记录列表 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 同一个主域名下，批量新增或者批量更新导入解析记录。; 如果解析记录的ID为0，是新增解析记录，如果不为0，则是更新解析记录。;  ''',
        description='''
            同一个主域名下，批量新增或者批量更新导入解析记录。; 如果解析记录的ID为0，是新增解析记录，如果不为0，则是更新解析记录。; 。

            示例: jdc clouddnsservice batch-set-dns-resolve  --req ['{"":""}']
        ''',
    )
    def batch_set_dns_resolve(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.BatchSetDnsResolveRequest import BatchSetDnsResolveRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = BatchSetDnsResolveRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--req'], dict(help="""(addView) 添加自定义线路的参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加主域名的自定义解析线路 ''',
        description='''
            添加主域名的自定义解析线路。

            示例: jdc clouddnsservice add-user-view  --req '{"":""}'
        ''',
    )
    def add_user_view(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.AddUserViewRequest import AddUserViewRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddUserViewRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--req'], dict(help="""(delView) 删除自定义线路的参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除主域名的自定义解析线路 ''',
        description='''
            删除主域名的自定义解析线路。

            示例: jdc clouddnsservice del-user-view  --req '{"":""}'
        ''',
    )
    def del_user_view(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.DelUserViewRequest import DelUserViewRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DelUserViewRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(int) 主域名ID """, dest='domainId', type=int, required=True)),
            (['--view-id'], dict(help="""(int) 自定义线路ID """, dest='viewId', type=int, required=True)),
            (['--view-name'], dict(help="""(string) 自定义线路名称, 最多64个字符 """, dest='viewName',  required=False)),
            (['--page-number'], dict(help="""(int) 分页参数，页的序号 """, dest='pageNumber', type=int, required=True)),
            (['--page-size'], dict(help="""(int) 分页参数，每页含有的结果的数目 """, dest='pageSize', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询主域名的自定义解析线路 ''',
        description='''
            查询主域名的自定义解析线路。

            示例: jdc clouddnsservice get-user-view  --domain-id 0 --view-id 0 --page-number 0 --page-size 0
        ''',
    )
    def get_user_view(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetUserViewRequest import GetUserViewRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetUserViewRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--req'], dict(help="""(addViewIP) 添加域名的自定义解析线路的IP段的参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加主域名的自定义解析线路的IP段 ''',
        description='''
            添加主域名的自定义解析线路的IP段。

            示例: jdc clouddnsservice add-user-view-ip  --req '{"":""}'
        ''',
    )
    def add_user_view_ip(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.AddUserViewIPRequest import AddUserViewIPRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddUserViewIPRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--req'], dict(help="""(delViewIP) 删除域名的自定义解析线路的IP段的参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除主域名的自定义解析线路的IP段 ''',
        description='''
            删除主域名的自定义解析线路的IP段。

            示例: jdc clouddnsservice del-user-view-ip  --req '{"":""}'
        ''',
    )
    def del_user_view_ip(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.DelUserViewIPRequest import DelUserViewIPRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DelUserViewIPRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(int) 主域名ID """, dest='domainId', type=int, required=True)),
            (['--view-id'], dict(help="""(int) 自定义线路ID """, dest='viewId', type=int, required=True)),
            (['--view-name'], dict(help="""(string) 自定义线路名称, 最多64个字符 """, dest='viewName',  required=False)),
            (['--page-number'], dict(help="""(int) 分页参数，页的序号, 默认为1 """, dest='pageNumber', type=int, required=True)),
            (['--page-size'], dict(help="""(int) 分页参数，每页含有的结果的数目，默认为10 """, dest='pageSize', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询主域名的自定义解析线路的IP段 ''',
        description='''
            查询主域名的自定义解析线路的IP段。

            示例: jdc clouddnsservice get-user-view-ip  --domain-id 0 --view-id 0 --page-number 0 --page-size 0
        ''',
    )
    def get_user_view_ip(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetUserViewIPRequest import GetUserViewIPRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetUserViewIPRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--page-index'], dict(help="""(int) 当前页数，起始值为1，默认为1 """, dest='pageIndex', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页查询时设置的每页行数 """, dest='pageSize', type=int, required=False)),
            (['--search-value'], dict(help="""(string) 查询的值 """, dest='searchValue',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看主域名的监控项的配置以及状态 ''',
        description='''
            查看主域名的监控项的配置以及状态。

            示例: jdc clouddnsservice get-monitor  --domain-id xxx
        ''',
    )
    def get_monitor(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetMonitorRequest import GetMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--sub-domain-name'], dict(help="""(string) 子域名 """, dest='subDomainName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加子域名的监控项，默认把子域名的所有监控项都添加上监控 ''',
        description='''
            添加子域名的监控项，默认把子域名的所有监控项都添加上监控。

            示例: jdc clouddnsservice add-monitor  --domain-id xxx --sub-domain-name xxx
        ''',
    )
    def add_monitor(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.AddMonitorRequest import AddMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--sub-domain-name'], dict(help="""(string) 子域名 """, dest='subDomainName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询子域名的可用监控对象 ''',
        description='''
            查询子域名的可用监控对象。

            示例: jdc clouddnsservice get-targets  --domain-id xxx --sub-domain-name xxx
        ''',
    )
    def get_targets(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetTargetsRequest import GetTargetsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetTargetsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--sub-domain-name'], dict(help="""(string) 子域名 """, dest='subDomainName',  required=True)),
            (['--targets'], dict(help="""(array: string) 子域名可用监控对象的数组 """, dest='targets',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加子域名的某些特定监控对象为监控项 ''',
        description='''
            添加子域名的某些特定监控对象为监控项。

            示例: jdc clouddnsservice add-monitor-target  --domain-id xxx --sub-domain-name xxx
        ''',
    )
    def add_monitor_target(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.AddMonitorTargetRequest import AddMonitorTargetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AddMonitorTargetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--action'], dict(help="""(string) 删除del, 暂停stop, 开启start, 手动恢复recover，手动切换switch """, dest='action',  required=True)),
            (['--ids'], dict(help="""(array: int) 监控项ID """, dest='ids', type=int, required=True)),
            (['--switch-target'], dict(help="""(string) 监控项的主机值, 手动切换时必填 """, dest='switchTarget',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 监控项的操作集合，包括：删除，暂停，启动, 手动恢复, 手动切换 ''',
        description='''
            监控项的操作集合，包括：删除，暂停，启动, 手动恢复, 手动切换。

            示例: jdc clouddnsservice operate-monitor  --domain-id xxx --action xxx --ids [0]
        ''',
    )
    def operate_monitor(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.OperateMonitorRequest import OperateMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = OperateMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--update-monitor'], dict(help="""(updateMonitor) 监控项设置信息 """, dest='updateMonitor',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 域名的监控项修改 ''',
        description='''
            域名的监控项修改。

            示例: jdc clouddnsservice update-monitor  --domain-id xxx --update-monitor '{"":""}'
        ''',
    )
    def update_monitor(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.UpdateMonitorRequest import UpdateMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用getDomains接口获取。 """, dest='domainId',  required=True)),
            (['--page-index'], dict(help="""(int) 当前页数，起始值为1，默认为1 """, dest='pageIndex', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页查询时设置的每页行数 """, dest='pageSize', type=int, required=False)),
            (['--search-value'], dict(help="""(string) 关键字 """, dest='searchValue',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 主域名的监控项的报警信息 ''',
        description='''
            主域名的监控项的报警信息。

            示例: jdc clouddnsservice get-monitor-alarm-info  --domain-id xxx
        ''',
    )
    def get_monitor_alarm_info(self):
        client_factory = ClientFactory('clouddnsservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.clouddnsservice.apis.GetMonitorAlarmInfoRequest import GetMonitorAlarmInfoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetMonitorAlarmInfoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['get-action-log','get-domains','add-domain','del-domain','update-domain','get-domain-query-count','get-domain-query-traffic','search-rr','get-view-tree','add-rr','update-rr','operate-rr','batch-set-dns-resolve','add-user-view','del-user-view','get-user-view','add-user-view-ip','del-user-view-ip','get-user-view-ip','get-monitor','add-monitor','get-targets','add-monitor-target','operate-monitor','update-monitor','get-monitor-alarm-info',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('clouddnsservice', self.app.pargs.api)
        skeleton.show()
