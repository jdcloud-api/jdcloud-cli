# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.controllers.websocket.exec_start_request import exec_start
from jdcloud_cli.controllers.websocket.attach_request import attach
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton
from jdcloud_cli.config import ProfileManager


class NativecontainerController(BaseController):
    class Meta:
        label = 'nativecontainer'
        help = '原生容器'
        description = '''
        nativecontainer cli 子命令，原生容器相关接口。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/native-container/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为20；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) containerId - 实例ID，精确匹配，支持多个; privateIpAddress - 主网卡IP地址，精确匹配，支持单个; az - 可用区，精确匹配，支持多个; vpcId - 私有网络ID，精确匹配，支持多个; status - 容器状态，精确匹配，支持多个; name - 容器名称，模糊匹配，支持单个; subnetId - 子网ID，精确匹配，支持多个; securityGroups - 安全组 id，精确匹配，支持多个;  """, dest='filters',  required=False)),
            (['--tags'], dict(help="""(array: tagFilter) Tag筛选条件 """, dest='tags',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量查询原生容器的详细信息<br>; 此接口支持分页查询，默认每页20条。;  ''',
        description='''
            批量查询原生容器的详细信息<br>; 此接口支持分页查询，默认每页20条。; 

            示例: jdc nativecontainer describe-containers 
        ''',
    )
    def describe_containers(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DescribeContainersRequest import DescribeContainersRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeContainersRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-spec'], dict(help="""(containerSpec) 创建容器规格 """, dest='containerSpec',  required=True)),
            (['--max-count'], dict(help="""(int) 购买实例数量；取值范围：[1,100] """, dest='maxCount', type=int, required=True)),
            (['--client-token'], dict(help="""(string) 保证请求幂等性 """, dest='clientToken',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建一台或多台指定配置容器; - 创建容器需要通过实名认证; - 镜像;   - 容器的镜像通过镜像名称来确定;   - nginx:tag, mysql/mysql-server:tag这样命名的镜像表示docker hub官方镜像;   - container-registry/image:tag这样命名的镜像表示私有仓储的镜像;   - 私有仓储必须兼容docker registry认证机制，并通过secret来保存机密信息; - hostname规范;   - 支持两种方式：以标签方式书写或以完整主机名方式书写;   - 标签规范;     - 0-9，a-z(不分大小写)和-（减号），其他的都是无效的字符串;     - 不能以减号开始，也不能以减号结尾;     - 最小1个字符，最大63个字符;   - 完整的主机名由一系列标签与点连接组成;     - 标签与标签之间使用“.”(点)进行连接;     - 不能以“.”(点)开始，也不能以“.”(点)结尾;     - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符; - 网络配置;   - 指定主网卡配置信息;     - 必须指定vpcId、subnetId、securityGroupIds;     - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-200]Mbps，步进1Mbps;     - 可以指定网卡的主IP(primaryIpAddress)和辅助IP(secondaryIpAddresses)，此时maxCount只能为1;     - 可以指定希望的辅助IP个数(secondaryIpAddressCount)让系统自动创建内网IP;     - 可以设置网卡的自动删除autoDelete属性，指明是否删除实例时自动删除网卡;     - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内;     - 每个容器至多指定5个安全组;     - 主网卡deviceIndex设置为0; - 存储;   - volume分为root volume和data volume，root volume的挂载目录是/，data volume的挂载目录可以随意指定;   - volume的底层存储介质当前只支持cloud类别，也就是云硬盘;   - 云盘类型为 ssd.io1 时，用户可以指定 iops，其他类型云盘无效，对已经存在的云盘无效，具体规则如下;     - 步长 10;     - 范围 [200，min(32000，size*50)];     - 默认值 size*30;   - root volume;     - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1;     - 磁盘大小;       - 所有类型：范围[10,100]GB，步长为10G;     - 自动删除;       - 默认自动删除;     - 可以选择已存在的云硬盘;   - data volume;     - data volume当前只能选择cloud类别;     - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1;     - 磁盘大小;       - 所有类型：范围[20,2000]GB，步长为10G;     - 自动删除;       - 默认自动删除;     - 可以选择已存在的云硬盘;     - 可以从快照创建磁盘;     - 单个容器可以挂载7个data volume; - 容器日志;   - default：默认在本地分配10MB的存储空间，自动rotate; - 其他;   - 创建完成后，容器状态为running;   - maxCount为最大努力，不保证一定能达到maxCount;  ''',
        description='''
            创建一台或多台指定配置容器; - 创建容器需要通过实名认证; - 镜像;   - 容器的镜像通过镜像名称来确定;   - nginx:tag, mysql/mysql-server:tag这样命名的镜像表示docker hub官方镜像;   - container-registry/image:tag这样命名的镜像表示私有仓储的镜像;   - 私有仓储必须兼容docker registry认证机制，并通过secret来保存机密信息; - hostname规范;   - 支持两种方式：以标签方式书写或以完整主机名方式书写;   - 标签规范;     - 0-9，a-z(不分大小写)和-（减号），其他的都是无效的字符串;     - 不能以减号开始，也不能以减号结尾;     - 最小1个字符，最大63个字符;   - 完整的主机名由一系列标签与点连接组成;     - 标签与标签之间使用“.”(点)进行连接;     - 不能以“.”(点)开始，也不能以“.”(点)结尾;     - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符; - 网络配置;   - 指定主网卡配置信息;     - 必须指定vpcId、subnetId、securityGroupIds;     - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-200]Mbps，步进1Mbps;     - 可以指定网卡的主IP(primaryIpAddress)和辅助IP(secondaryIpAddresses)，此时maxCount只能为1;     - 可以指定希望的辅助IP个数(secondaryIpAddressCount)让系统自动创建内网IP;     - 可以设置网卡的自动删除autoDelete属性，指明是否删除实例时自动删除网卡;     - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内;     - 每个容器至多指定5个安全组;     - 主网卡deviceIndex设置为0; - 存储;   - volume分为root volume和data volume，root volume的挂载目录是/，data volume的挂载目录可以随意指定;   - volume的底层存储介质当前只支持cloud类别，也就是云硬盘;   - 云盘类型为 ssd.io1 时，用户可以指定 iops，其他类型云盘无效，对已经存在的云盘无效，具体规则如下;     - 步长 10;     - 范围 [200，min(32000，size*50)];     - 默认值 size*30;   - root volume;     - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1;     - 磁盘大小;       - 所有类型：范围[10,100]GB，步长为10G;     - 自动删除;       - 默认自动删除;     - 可以选择已存在的云硬盘;   - data volume;     - data volume当前只能选择cloud类别;     - 云硬盘类型可以选择hdd.std1、ssd.gp1、ssd.io1;     - 磁盘大小;       - 所有类型：范围[20,2000]GB，步长为10G;     - 自动删除;       - 默认自动删除;     - 可以选择已存在的云硬盘;     - 可以从快照创建磁盘;     - 单个容器可以挂载7个data volume; - 容器日志;   - default：默认在本地分配10MB的存储空间，自动rotate; - 其他;   - 创建完成后，容器状态为running;   - maxCount为最大努力，不保证一定能达到maxCount; 

            示例: jdc nativecontainer create-containers  --container-spec {"":""} --max-count 0
        ''',
    )
    def create_containers(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.CreateContainersRequest import CreateContainersRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateContainersRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询一台原生容器的详细信息;  ''',
        description='''
            查询一台原生容器的详细信息; 

            示例: jdc nativecontainer describe-container  --container-id xxx
        ''',
    )
    def describe_container(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DescribeContainerRequest import DescribeContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 容器状态必须为 stopped、running 或 error状态。 <br>; 按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。<br>; 只能支持主动删除按配置计费类型的实例。包年包月过期的容器也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。;  ''',
        description='''
            容器状态必须为 stopped、running 或 error状态。 <br>; 按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。<br>; 只能支持主动删除按配置计费类型的实例。包年包月过期的容器也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。; 

            示例: jdc nativecontainer delete-container  --container-id xxx
        ''',
    )
    def delete_container(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DeleteContainerRequest import DeleteContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启动处于关闭状态的单个容器，处在任务执行中的容器无法启动。<br>; 容器实例或其绑定的云盘已欠费时，容器将无法正常启动。<br>;  ''',
        description='''
            启动处于关闭状态的单个容器，处在任务执行中的容器无法启动。<br>; 容器实例或其绑定的云盘已欠费时，容器将无法正常启动。<br>; 

            示例: jdc nativecontainer start-container  --container-id xxx
        ''',
    )
    def start_container(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.StartContainerRequest import StartContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StartContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 停止处于运行状态的单个实例，处于任务执行中的容器无法启动。;  ''',
        description='''
            停止处于运行状态的单个实例，处于任务执行中的容器无法启动。; 

            示例: jdc nativecontainer stop-container  --container-id xxx
        ''',
    )
    def stop_container(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.StopContainerRequest import StopContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StopContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--name'], dict(help="""(string) 容器名称 """, dest='name',  required=False)),
            (['--description'], dict(help="""(string) 容器描述 """, dest='description',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改容器的 名称 和 描述。<br>; name 和 description 必须要指定一个;  ''',
        description='''
            修改容器的 名称 和 描述。<br>; name 和 description 必须要指定一个; 

            示例: jdc nativecontainer modify-container-attribute  --container-id xxx
        ''',
    )
    def modify_container_attribute(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.ModifyContainerAttributeRequest import ModifyContainerAttributeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ModifyContainerAttributeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--elastic-ip-id'], dict(help="""(string) 弹性IP ID """, dest='elasticIpId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 容器绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. <br>; 一台云主机只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。<br>; 如果是黑名单中的用户，会返回错误。;  ''',
        description='''
            容器绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. <br>; 一台云主机只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。<br>; 如果是黑名单中的用户，会返回错误。; 

            示例: jdc nativecontainer associate-elastic-ip  --container-id xxx --elastic-ip-id xxx
        ''',
    )
    def associate_elastic_ip(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.AssociateElasticIpRequest import AssociateElasticIpRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AssociateElasticIpRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--elastic-ip-id'], dict(help="""(string) 弹性IP ID """, dest='elasticIpId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 容器解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.;  ''',
        description='''
            容器解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.; 

            示例: jdc nativecontainer disassociate-elastic-ip  --container-id xxx --elastic-ip-id xxx
        ''',
    )
    def disassociate_elastic_ip(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DisassociateElasticIpRequest import DisassociateElasticIpRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisassociateElasticIpRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--tail-lines'], dict(help="""(int) 返回日志文件中倒数 tailLines 行，如不指定，默认从容器启动时或 sinceSeconds 指定的时间读取。;  """, dest='tailLines', type=int, required=False)),
            (['--since-seconds'], dict(help="""(int) 返回相对于当前时间之前sinceSeconds之内的日志。;  """, dest='sinceSeconds', type=int, required=False)),
            (['--limit-bytes'], dict(help="""(int) 限制返回的日志文件内容字节数，取值范围 [1-4]KB，最大 4KB.;  """, dest='limitBytes', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询单个容器日志;  ''',
        description='''
            查询单个容器日志; 

            示例: jdc nativecontainer get-logs  --container-id xxx
        ''',
    )
    def get_logs(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.GetLogsRequest import GetLogsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetLogsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--image'], dict(help="""(string) 镜像名称 </br> 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 </br> </br> repository长度最大256个字符，tag最大128个字符，registry最大255个字符 </br> 下载镜像超时时间：10分钟 """, dest='image',  required=True)),
            (['--secret'], dict(help="""(string) 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret """, dest='secret',  required=False)),
            (['--command'], dict(help="""(array: string) 容器启动执行的命令, 如果不指定默认是镜像的ENTRYPOINT. 数组字符总长度范围：[0-256] """, dest='command',  required=False)),
            (['--args'], dict(help="""(array: string) 容器启动执行命令的参数, 如果不指定默认是镜像的CMD. 数组字符总长度范围：[0-2048] """, dest='args',  required=False)),
            (['--tty'], dict(help="""(bool) 容器是否分配tty。默认不分配 """, dest='tty',  required=False)),
            (['--working-dir'], dict(help="""(string) 容器的工作目录。如果不指定，默认是根目录（/），必须是绝对路径。字符长度范围：[0-1024] """, dest='workingDir',  required=False)),
            (['--envs'], dict(help="""(array: envVar) 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；</br> 最大100对 """, dest='envs',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 重置原生容器，对已有原生容器使用新的镜像重置。; 原容器 id 不变，不涉及计费变动，暂不支持修改实例类型，不会改变原生容器所在的物理节点，也不支持修改已经使用的系统盘和数据盘以及网络相关参数。; - 镜像;     - 容器的镜像通过镜像名称来确定;     - nginx:tag 或 mysql/mysql-server:tag 这样命名的镜像表示 docker hub 官方镜像;     - container-registry/image:tag 这样命名的镜像表示私有仓储的镜像;     - 私有仓储必须兼容 docker registry 认证机制，并通过 secret 来保存机密信息; - 其他;     - rebuild 之前容器必须处于关闭状态;     - rebuild 完成后，容器仍为关闭状态;  ''',
        description='''
            重置原生容器，对已有原生容器使用新的镜像重置。; 原容器 id 不变，不涉及计费变动，暂不支持修改实例类型，不会改变原生容器所在的物理节点，也不支持修改已经使用的系统盘和数据盘以及网络相关参数。; - 镜像;     - 容器的镜像通过镜像名称来确定;     - nginx:tag 或 mysql/mysql-server:tag 这样命名的镜像表示 docker hub 官方镜像;     - container-registry/image:tag 这样命名的镜像表示私有仓储的镜像;     - 私有仓储必须兼容 docker registry 认证机制，并通过 secret 来保存机密信息; - 其他;     - rebuild 之前容器必须处于关闭状态;     - rebuild 完成后，容器仍为关闭状态; 

            示例: jdc nativecontainer rebuild-container  --container-id xxx --image xxx
        ''',
    )
    def rebuild_container(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.RebuildContainerRequest import RebuildContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = RebuildContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--instance-type'], dict(help="""(string) 新实例类型，不可与原实例类型相同 """, dest='instanceType',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 调整原生容器实例类型配置。; - 原生容器状态为停止;; - 支持升配、降配；**不支持原有规格**; - 计费类型不变;     - 包年包月：需要计算配置差价，如果所选配置价格高，需要补齐到期前的差价，到期时间不变；如果所选配置价格低，需要延长到期时间;     - 按配置：按照所选规格，进行计费;  ''',
        description='''
            调整原生容器实例类型配置。; - 原生容器状态为停止;; - 支持升配、降配；**不支持原有规格**; - 计费类型不变;     - 包年包月：需要计算配置差价，如果所选配置价格高，需要补齐到期前的差价，到期时间不变；如果所选配置价格低，需要延长到期时间;     - 按配置：按照所选规格，进行计费; 

            示例: jdc nativecontainer resize-container  --container-id xxx --instance-type xxx
        ''',
    )
    def resize_container(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.ResizeContainerRequest import ResizeContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ResizeContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--command'], dict(help="""(array: string) 执行命令 """, dest='command',  required=False)),
            (['--tty'], dict(help="""(bool) 执行命令是否添加tty """, dest='tty',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建exec;  ''',
        description='''
            创建exec; 

            示例: jdc nativecontainer exec-create  --container-id xxx
        ''',
    )
    def exec_create(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.ExecCreateRequest import ExecCreateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ExecCreateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--exec-id'], dict(help="""(string) exec ID """, dest='execId',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取exec退出码;  ''',
        description='''
            获取exec退出码; 

            示例: jdc nativecontainer exec-get-exit-code  --container-id xxx --exec-id xxx
        ''',
    )
    def exec_get_exit_code(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.ExecGetExitCodeRequest import ExecGetExitCodeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ExecGetExitCodeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId',  required=True)),
            (['--height'], dict(help="""(int) tty row """, dest='height', type=int, required=True)),
            (['--width'], dict(help="""(int) tty column """, dest='width', type=int, required=True)),
            (['--exec-id'], dict(help="""(string) exec ID """, dest='execId',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 调整TTY大小;  ''',
        description='''
            调整TTY大小; 

            示例: jdc nativecontainer resize-tty  --container-id xxx --height 0 --width 0
        ''',
    )
    def resize_tty(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.ResizeTTYRequest import ResizeTTYRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ResizeTTYRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--filters'], dict(help="""(array: filter) instanceTypes - 实例规格，精确匹配，支持多个; az - 可用区，精确匹配，支持多个;  """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询实例规格信息列表;  ''',
        description='''
            查询实例规格信息列表; 

            示例: jdc nativecontainer describe-instance-types 
        ''',
    )
    def describe_instance_types(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DescribeInstanceTypesRequest import DescribeInstanceTypesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeInstanceTypesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--resource-type'], dict(help="""(string) resourceType - 资源类型，支持 [container, pod, secret];  """, dest='resourceType',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询资源的配额，支持：原生容器 pod 和 secret.;  ''',
        description='''
            查询资源的配额，支持：原生容器 pod 和 secret.; 

            示例: jdc nativecontainer describe-quota  --resource-type xxx
        ''',
    )
    def describe_quota(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DescribeQuotaRequest import DescribeQuotaRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeQuotaRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为20；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) name - secret名称，支持模糊搜索;  """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询 secret 列表。<br> ; 此接口支持分页查询，默认每页20条。;  ''',
        description='''
            查询 secret 列表。<br> ; 此接口支持分页查询，默认每页20条。; 

            示例: jdc nativecontainer describe-secrets 
        ''',
    )
    def describe_secrets(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DescribeSecretsRequest import DescribeSecretsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--name'], dict(help="""(string) 镜像仓库认证信息名称，不能重复;  """, dest='name',  required=True)),
            (['--secret-type'], dict(help="""(string) 镜像仓库认证信息类型，目前仅支持：docker-registry 类型，用来和docker registry认证的类型。;  """, dest='secretType',  required=True)),
            (['--data'], dict(help="""(dockerRegistryData) 镜像仓库认证信息数据。<br>; 必须包含server、username、password 字段，email 字段是可选的。<br>;  """, dest='data',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建一个 secret，用于存放镜像仓库认证信息。;  ''',
        description='''
            创建一个 secret，用于存放镜像仓库认证信息。; 

            示例: jdc nativecontainer create-secret  --name xxx --secret-type xxx --data {"":""}
        ''',
    )
    def create_secret(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.CreateSecretRequest import CreateSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--name'], dict(help="""(string) Secret Name """, dest='name',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询单个 secret 详情;  ''',
        description='''
            查询单个 secret 详情; 

            示例: jdc nativecontainer describe-secret  --name xxx
        ''',
    )
    def describe_secret(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DescribeSecretRequest import DescribeSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId',  required=False)),
            (['--name'], dict(help="""(string) Secret Name """, dest='name',  required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除单个 secret;  ''',
        description='''
            删除单个 secret; 

            示例: jdc nativecontainer delete-secret  --name xxx
        ''',
    )
    def delete_secret(self):
        client_factory = ClientFactory('nativecontainer')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nativecontainer.apis.DeleteSecretRequest import DeleteSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)



    @expose(
        arguments=[
            (['--region-id'], dict(help='(string) region id', dest='regionId', choices=['cn-north-1', 'cn-east-1', 'cn-east-2', 'cn-south-1'], required=False)),
            (['--container-id'], dict(help='(string) container id', dest='containerId', required=True)),
            (['--exec-id'], dict(help='(string) exec id', dest='execId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 在容器中执行命令 ''',
        description='''
            在容器中执行命令.

            示例: jdc nativecontainer exec-start --container-id xxx --exec-id xxx
        '''
    )
    def exec_start(self):
        profile_region_id = ProfileManager().load_current_profile().region_id
        region_id = self.app.pargs.regionId if self.app.pargs.regionId else profile_region_id
        headers = collect_user_headers(self.app)
        exec_start(self.app, 'nativecontainer', headers, region_id, self.app.pargs.containerId, self.app.pargs.execId)

    @expose(
        arguments=[
            (['--region-id'], dict(help='(string) region id', dest='regionId', choices=['cn-north-1', 'cn-east-1', 'cn-east-2', 'cn-south-1'], required=False)),
            (['--container-id'], dict(help='(string) container id', dest='containerId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 绑定输入输出到容器 ''',
        description='''
            绑定输入输出到容器。

            示例: jdc nativecontainer attach --container-id xxx
        '''
    )
    def attach(self):
        profile_region_id = ProfileManager().load_current_profile().region_id
        region_id = self.app.pargs.regionId if self.app.pargs.regionId else profile_region_id
        headers = collect_user_headers(self.app)
        attach(self.app, 'nativecontainer', headers, region_id, self.app.pargs.containerId)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-containers','create-containers','describe-container','delete-container','start-container','stop-container','modify-container-attribute','associate-elastic-ip','disassociate-elastic-ip','get-logs','rebuild-container','resize-container','exec-create','exec-get-exit-code','resize-tty','describe-instance-types','describe-quota','describe-secrets','create-secret','describe-secret','delete-secret',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串.

            示例: jdc nativecontainer generate-skeleton --api describeContainer
        ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('nativecontainer', self.app.pargs.api)
        skeleton.show()


