# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.controllers.websocket.exec_start_request import exec_start
from jdcloud_cli.controllers.websocket.attach_request import attach
from jdcloud_cli.controllers.websocket.exec_create_request import ExecCreateRequest
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class NcController(BaseController):
    class Meta:
        label = 'nc'
        help = '使用该子命令操作nc相关资源'
        description = '''
        nc cli 子命令，可以使用该子命令操作nc相关资源。
        OpenAPI文档地址为：https://www.jdcloud.com/help/detail/378/isCatalog/0
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--resource-type'], dict(help="""(string) 资源类型  container：用户能创建的容器的配额  secret：用户能创建的secret的配额 """, dest='resourceType', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询资源的配额 ''',
        description='''
            查询资源的配额

            示例: jdc nc describe-quota  --resource-type xxx
        ''',
    )
    def describe_quota(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.DescribeQuotaRequest import DescribeQuotaRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeQuotaRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为20；取值范围[10, 100] """, dest='pageSize', required=False)),
            (['--filters'], dict(help="""(array: filter) containerId - 实例ID，精确匹配，支持多个; privateIpAddress - 主网卡IP地址，模糊匹配，支持单个; az - 可用区，精确匹配，支持多个; vpcId - 私有网络ID，精确匹配，支持多个; status - 容器状态，精确匹配，支持多个; name - 实例名称，模糊匹配，支持单个; subnetId - 镜像ID，模糊匹配，支持单个;  """, dest='filters', required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询容器列表 ''',
        description='''
            查询容器列表

            示例: jdc nc describe-containers 
        ''',
    )
    def describe_containers(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.DescribeContainersRequest import DescribeContainersRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeContainersRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-spec'], dict(help="""(containerSpec) 创建容器规格 """, dest='containerSpec', required=False)),
            (['--max-count'], dict(help="""(int) 购买实例数量；取值范围：[1,100] """, dest='maxCount', required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建一台或多台指定配置的实例 ''',
        description='''
            创建一台或多台指定配置的实例

            示例: jdc nc create-containers 
        ''',
    )
    def create_containers(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.CreateContainersRequest import CreateContainersRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateContainersRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询容器详情 ''',
        description='''
            查询容器详情

            示例: jdc nc describe-container  --container-id xxx
        ''',
    )
    def describe_container(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.DescribeContainerRequest import DescribeContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除单个实例 ''',
        description='''
            删除单个实例

            示例: jdc nc delete-container  --container-id xxx
        ''',
    )
    def delete_container(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.DeleteContainerRequest import DeleteContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启动单个实例 ''',
        description='''
            启动单个实例

            示例: jdc nc start-container  --container-id xxx
        ''',
    )
    def start_container(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.StartContainerRequest import StartContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StartContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 停止单个实例 ''',
        description='''
            停止单个实例

            示例: jdc nc stop-container  --container-id xxx
        ''',
    )
    def stop_container(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.StopContainerRequest import StopContainerRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = StopContainerRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId', required=True)),
            (['--name'], dict(help="""(string) 容器名称 """, dest='name', required=False)),
            (['--description'], dict(help="""(string) 容器描述；和description必须要指定一个 """, dest='description', required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改容器属性 ''',
        description='''
            修改容器属性

            示例: jdc nc modify-container-attribute  --container-id xxx
        ''',
    )
    def modify_container_attribute(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.ModifyContainerAttributeRequest import ModifyContainerAttributeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ModifyContainerAttributeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId', required=True)),
            (['--elastic-ip-id'], dict(help="""(string) 弹性IP ID """, dest='elasticIpId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 容器绑定公网IP 绑定的是主网卡、主内网IP对应的弹性IP ''',
        description='''
            容器绑定公网IP 绑定的是主网卡、主内网IP对应的弹性IP

            示例: jdc nc associate-elastic-ip  --container-id xxx --elastic-ip-id xxx
        ''',
    )
    def associate_elastic_ip(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.AssociateElasticIpRequest import AssociateElasticIpRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = AssociateElasticIpRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId', required=True)),
            (['--elastic-ip-id'], dict(help="""(string) 弹性IP ID """, dest='elasticIpId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 容器解绑公网IP 解绑的是主网卡、主内网IP对应的弹性IP ''',
        description='''
            容器解绑公网IP 解绑的是主网卡、主内网IP对应的弹性IP

            示例: jdc nc disassociate-elastic-ip  --container-id xxx --elastic-ip-id xxx
        ''',
    )
    def disassociate_elastic_ip(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.DisassociateElasticIpRequest import DisassociateElasticIpRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisassociateElasticIpRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--container-id'], dict(help="""(string) Container ID """, dest='containerId', required=True)),
            (['--tail-lines'], dict(help="""(int) NA """, dest='tailLines', required=False)),
            (['--since-seconds'], dict(help="""(int) NA """, dest='sinceSeconds', required=False)),
            (['--limit-bytes'], dict(help="""(int) NA """, dest='limitBytes', required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询容器日志 ''',
        description='''
            查询容器日志

            示例: jdc nc get-logs  --container-id xxx
        ''',
    )
    def get_logs(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.GetLogsRequest import GetLogsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetLogsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为20；取值范围[10, 100] """, dest='pageSize', required=False)),
            (['--filters'], dict(help="""(array: filter) name - secret名称，支持模糊搜索;  """, dest='filters', required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询secret列表 ''',
        description='''
            查询secret列表

            示例: jdc nc describe-secrets 
        ''',
    )
    def describe_secrets(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.DescribeSecretsRequest import DescribeSecretsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--name'], dict(help="""(string) 机密数据名称，不能重复 """, dest='name', required=True)),
            (['--secret-type'], dict(help="""(string) 私密数据的类型，目前仅支持如下类型：docker-registry：用来和docker registry认证的类型 """, dest='secretType', required=True)),
            (['--data'], dict(help="""(dockerRegistryData) 机密的数据 """, dest='data', required=False)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建 secret ''',
        description='''
            创建 secret

            示例: jdc nc create-secret  --name xxx --secret-type xxx
        ''',
    )
    def create_secret(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.CreateSecretRequest import CreateSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--name'], dict(help="""(string) Secret Name """, dest='name', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询 secret 详情 ''',
        description='''
            查询 secret 详情

            示例: jdc nc describe-secret  --name xxx
        ''',
    )
    def describe_secret(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.DescribeSecretRequest import DescribeSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) Region ID """, dest='regionId', required=False)),
            (['--name'], dict(help="""(string) Secret Name """, dest='name', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除 secret ''',
        description='''
            删除 secret

            示例: jdc nc delete-secret  --name xxx
        ''',
    )
    def delete_secret(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.nc.apis.DeleteSecretRequest import DeleteSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print '{"error":"This api is not supported, please use the newer version"}'
        except Exception as e:
            print e.message



    @expose(
        arguments=[
            (['--region-id'], dict(help='(string) region id', dest='regionId', default='cn-north-1', required=False)),
            (['--container-id'], dict(help='(string) container id', dest='containerId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 为容器创建一个执行环境 ''',
        description='''
            为容器创建一个执行环境.

            示例: jdc nc exec-create --container-id xxx
        '''
    )
    def exec_create(self):
        client_factory = ClientFactory('nc')
        client = client_factory.get(self.app)
        if client is None:
            return

        params_dict = collect_user_args(self.app)
        req = ExecCreateRequest(params_dict)
        resp = client.send(req)
        Printer.print_result(resp)

    @expose(
        arguments=[
            (['--region-id'], dict(help='(string) region id', dest='regionId', default='cn-north-1', required=False)),
            (['--container-id'], dict(help='(string) container id', dest='containerId', required=True)),
            (['--exec-id'], dict(help='(string) exec id', dest='execId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 在容器中执行命令 ''',
        description='''
            在容器中执行命令.

            示例: jdc nc exec-start --container-id xxx --exec-id xxx
        '''
    )
    def exec_start(self):
        exec_start(self.app, self.app.pargs.regionId, self.app.pargs.containerId, self.app.pargs.execId)

    @expose(
        arguments=[
            (['--region-id'], dict(help='(string) region id', dest='regionId', default='cn-north-1', required=False)),
            (['--container-id'], dict(help='(string) container id', dest='containerId', required=True)),
            (['--input-json'], dict(help='(json) 以JSON字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式：--input-json file:///xxxx.json', dest='input_json', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 绑定输入输出到容器 ''',
        description='''
            绑定输入输出到容器。

            示例: jdc nc attach --container-id xxx
        '''
    )
    def attach(self):
        attach(self.app, self.app.pargs.regionId, self.app.pargs.containerId)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-quota','describe-containers','create-containers','describe-container','delete-container','start-container','stop-container','modify-container-attribute','associate-elastic-ip','disassociate-elastic-ip','get-logs','describe-secrets','create-secret','describe-secret','delete-secret',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串.

            示例: jdc nc generate-skeleton --api describeContainer
        ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('nc', self.app.pargs.api)
        skeleton.show()