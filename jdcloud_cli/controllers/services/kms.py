# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class KmsController(BaseController):
    class Meta:
        label = 'kms'
        help = '密钥管理服务'
        description = '''
        kms cli 子命令，基于硬件保护密钥的安全数据托管服务。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/key-management-service/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取密钥列表 ''',
        description='''
            获取密钥列表。

            示例: jdc kms describe-key-list 
        ''',
    )
    def describe_key_list(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DescribeKeyListRequest import DescribeKeyListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeKeyListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-cfg'], dict(help="""(keyCfg) NA """, dest='keyCfg',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建一个CMK（用户主密钥），默认为启用状态 ''',
        description='''
            创建一个CMK（用户主密钥），默认为启用状态。

            示例: jdc kms create-key  --key-cfg '{"":""}'
        ''',
    )
    def create_key(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.CreateKeyRequest import CreateKeyRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateKeyRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取密钥详情 ''',
        description='''
            获取密钥详情。

            示例: jdc kms describe-key  --key-id xxx
        ''',
    )
    def describe_key(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DescribeKeyRequest import DescribeKeyRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeKeyRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--key-cfg'], dict(help="""(keyCfg) NA """, dest='keyCfg',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' -   修改对称密钥配置，包括key的名称、用途、是否自动轮换和轮换周期等;; -   修改非对称密钥配置，包括key的名称、用途等。;  ''',
        description='''
            -   修改对称密钥配置，包括key的名称、用途、是否自动轮换和轮换周期等;; -   修改非对称密钥配置，包括key的名称、用途等。; 。

            示例: jdc kms update-key-description  --key-id xxx --key-cfg '{"":""}'
        ''',
    )
    def update_key_description(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.UpdateKeyDescriptionRequest import UpdateKeyDescriptionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateKeyDescriptionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用当前状态为`已禁用`的密钥 ''',
        description='''
            启用当前状态为`已禁用`的密钥。

            示例: jdc kms enable-key  --key-id xxx
        ''',
    )
    def enable_key(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.EnableKeyRequest import EnableKeyRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = EnableKeyRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 禁用当前状态为`已启用`的密钥 ''',
        description='''
            禁用当前状态为`已启用`的密钥。

            示例: jdc kms disable-key  --key-id xxx
        ''',
    )
    def disable_key(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DisableKeyRequest import DisableKeyRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisableKeyRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--delay-days'], dict(help="""(int) 延迟删除时间，单位（天），默认为7天；支持时间范围：7~30天 """, dest='delayDays', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 计划在以后的是个时间点删除密钥，默认为7天 ''',
        description='''
            计划在以后的是个时间点删除密钥，默认为7天。

            示例: jdc kms schedule-key-deletion  --key-id xxx
        ''',
    )
    def schedule_key_deletion(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.ScheduleKeyDeletionRequest import ScheduleKeyDeletionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ScheduleKeyDeletionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 取消删除密钥 ''',
        description='''
            取消删除密钥。

            示例: jdc kms cancel-key-deletion  --key-id xxx
        ''',
    )
    def cancel_key_deletion(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.CancelKeyDeletionRequest import CancelKeyDeletionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CancelKeyDeletionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 立即轮换密钥，自动轮换周期顺延-支持对称密钥 ''',
        description='''
            立即轮换密钥，自动轮换周期顺延-支持对称密钥。

            示例: jdc kms key-rotation  --key-id xxx
        ''',
    )
    def key_rotation(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.KeyRotationRequest import KeyRotationRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = KeyRotationRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--plaintext'], dict(help="""(string) 明文数据 Base64-encoded binary data object """, dest='plaintext',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 使用密钥对数据进行加密，针对非对称密钥：使用公钥进行加密，仅支持RSA_PKCS1_PADDING填充方式，最大加密数据长度为245字节 ''',
        description='''
            使用密钥对数据进行加密，针对非对称密钥：使用公钥进行加密，仅支持RSA_PKCS1_PADDING填充方式，最大加密数据长度为245字节。

            示例: jdc kms encrypt  --key-id xxx
        ''',
    )
    def encrypt(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.EncryptRequest import EncryptRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = EncryptRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--ciphertext-blob'], dict(help="""(string) 密文数据 Base64-encoded binary data object """, dest='ciphertextBlob',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 使用密钥对数据进行解密，针对非对称密钥：使用私钥进行加密 ''',
        description='''
            使用密钥对数据进行解密，针对非对称密钥：使用私钥进行加密。

            示例: jdc kms decrypt  --key-id xxx
        ''',
    )
    def decrypt(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DecryptRequest import DecryptRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DecryptRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取非对称密钥的公钥 ''',
        description='''
            获取非对称密钥的公钥。

            示例: jdc kms get-public-key  --key-id xxx
        ''',
    )
    def get_public_key(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.GetPublicKeyRequest import GetPublicKeyRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GetPublicKeyRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--plaintext'], dict(help="""(string) 需要签名的数据 Base64-encoded binary data object """, dest='plaintext',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 使用非对称密钥的私钥签名,签名算法仅支持RSA_PKCS1_PADDING填充方式,最大签名数据长度为4K字节 ''',
        description='''
            使用非对称密钥的私钥签名,签名算法仅支持RSA_PKCS1_PADDING填充方式,最大签名数据长度为4K字节。

            示例: jdc kms sign  --key-id xxx
        ''',
    )
    def sign(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.SignRequest import SignRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = SignRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--plaintext'], dict(help="""(string) 需要签名的数据 Base64-encoded binary data object """, dest='plaintext',  required=False)),
            (['--signature'], dict(help="""(string) 签名 """, dest='signature',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 使用非对称密钥的公钥验证签名 ''',
        description='''
            使用非对称密钥的公钥验证签名。

            示例: jdc kms validate  --key-id xxx
        ''',
    )
    def validate(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.ValidateRequest import ValidateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ValidateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 从KMS中获取一对数据密钥的明文/密文 ''',
        description='''
            从KMS中获取一对数据密钥的明文/密文。

            示例: jdc kms generate-data-key  --key-id xxx
        ''',
    )
    def generate_data_key(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.GenerateDataKeyRequest import GenerateDataKeyRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = GenerateDataKeyRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取版本详情 ''',
        description='''
            获取版本详情。

            示例: jdc kms describe-key-detail  --key-id xxx
        ''',
    )
    def describe_key_detail(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DescribeKeyDetailRequest import DescribeKeyDetailRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeKeyDetailRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--version'], dict(help="""(string) 密钥版本 """, dest='version',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用指定版本密钥 ''',
        description='''
            启用指定版本密钥。

            示例: jdc kms enable-key-version  --key-id xxx --version xxx
        ''',
    )
    def enable_key_version(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.EnableKeyVersionRequest import EnableKeyVersionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = EnableKeyVersionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--version'], dict(help="""(string) 密钥版本 """, dest='version',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 禁用指定版本密钥 ''',
        description='''
            禁用指定版本密钥。

            示例: jdc kms disable-key-version  --key-id xxx --version xxx
        ''',
    )
    def disable_key_version(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DisableKeyVersionRequest import DisableKeyVersionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisableKeyVersionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--version'], dict(help="""(string) 密钥版本 """, dest='version',  required=True)),
            (['--delay-days'], dict(help="""(int) 延迟删除时间，单位（天），默认为7天；支持时间范围：7~30天 """, dest='delayDays', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 计划在以后的是个时间点删除指定版本密钥，默认为7天 ''',
        description='''
            计划在以后的是个时间点删除指定版本密钥，默认为7天。

            示例: jdc kms schedule-key-version-deletion  --key-id xxx --version xxx
        ''',
    )
    def schedule_key_version_deletion(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.ScheduleKeyVersionDeletionRequest import ScheduleKeyVersionDeletionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ScheduleKeyVersionDeletionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--key-id'], dict(help="""(string) 密钥ID """, dest='keyId',  required=True)),
            (['--version'], dict(help="""(string) 密钥版本 """, dest='version',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 取消删除指定版本密钥 ''',
        description='''
            取消删除指定版本密钥。

            示例: jdc kms cancel-key-version-deletion  --key-id xxx --version xxx
        ''',
    )
    def cancel_key_version_deletion(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.CancelKeyVersionDeletionRequest import CancelKeyVersionDeletionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CancelKeyVersionDeletionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取机密列表 ''',
        description='''
            获取机密列表。

            示例: jdc kms describe-secret-list 
        ''',
    )
    def describe_secret_list(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DescribeSecretListRequest import DescribeSecretListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-cfg'], dict(help="""(secretCfg) NA """, dest='secretCfg',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建机密 ''',
        description='''
            创建机密。

            示例: jdc kms create-secret  --secret-cfg '{"":""}'
        ''',
    )
    def create_secret(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.CreateSecretRequest import CreateSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-package'], dict(help="""(string) 密钥包的内容 """, dest='secretPackage',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 导入机密 ''',
        description='''
            导入机密。

            示例: jdc kms import-secret 
        ''',
    )
    def import_secret(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.ImportSecretRequest import ImportSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ImportSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为10；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取机密详情 ''',
        description='''
            获取机密详情。

            示例: jdc kms describe-secret-version-list  --secret-id xxx
        ''',
    )
    def describe_secret_version_list(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DescribeSecretVersionListRequest import DescribeSecretVersionListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretVersionListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--secret-desc-cfg'], dict(help="""(secretDescCfg) NA """, dest='secretDescCfg',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改机密描述 ''',
        description='''
            修改机密描述。

            示例: jdc kms update-secret  --secret-id xxx --secret-desc-cfg '{"":""}'
        ''',
    )
    def update_secret(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.UpdateSecretRequest import UpdateSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用机密 ''',
        description='''
            启用机密。

            示例: jdc kms enable-secret  --secret-id xxx
        ''',
    )
    def enable_secret(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.EnableSecretRequest import EnableSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = EnableSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 禁用机密 ''',
        description='''
            禁用机密。

            示例: jdc kms disable-secret  --secret-id xxx
        ''',
    )
    def disable_secret(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DisableSecretRequest import DisableSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisableSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除机密 ''',
        description='''
            删除机密。

            示例: jdc kms delete-secret  --secret-id xxx
        ''',
    )
    def delete_secret(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DeleteSecretRequest import DeleteSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--secret-version-cfg'], dict(help="""(secretVersionCfg) NA """, dest='secretVersionCfg',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建机密新的版本，默认为已启用状态 ''',
        description='''
            创建机密新的版本，默认为已启用状态。

            示例: jdc kms create-secret-version  --secret-id xxx --secret-version-cfg '{"":""}'
        ''',
    )
    def create_secret_version(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.CreateSecretVersionRequest import CreateSecretVersionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateSecretVersionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 导出机密 ''',
        description='''
            导出机密。

            示例: jdc kms export-secret  --secret-id xxx
        ''',
    )
    def export_secret(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.ExportSecretRequest import ExportSecretRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ExportSecretRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--version'], dict(help="""(string) 机密版本 """, dest='version',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取指定机密版本的详细信息 ''',
        description='''
            获取指定机密版本的详细信息。

            示例: jdc kms describe-secret-version-info  --secret-id xxx --version xxx
        ''',
    )
    def describe_secret_version_info(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DescribeSecretVersionInfoRequest import DescribeSecretVersionInfoRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeSecretVersionInfoRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--version'], dict(help="""(string) 机密版本 """, dest='version',  required=True)),
            (['--secret-time-cfg'], dict(help="""(secretTimeCfg) NA """, dest='secretTimeCfg',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改机密指定版本配置 ''',
        description='''
            修改机密指定版本配置。

            示例: jdc kms update-secret-version  --secret-id xxx --version xxx --secret-time-cfg '{"":""}'
        ''',
    )
    def update_secret_version(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.UpdateSecretVersionRequest import UpdateSecretVersionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateSecretVersionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--version'], dict(help="""(string) 机密版本 """, dest='version',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用指定版本机密 ''',
        description='''
            启用指定版本机密。

            示例: jdc kms enable-secret-version  --secret-id xxx --version xxx
        ''',
    )
    def enable_secret_version(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.EnableSecretVersionRequest import EnableSecretVersionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = EnableSecretVersionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--version'], dict(help="""(string) 机密版本 """, dest='version',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 禁用指定版本机密 ''',
        description='''
            禁用指定版本机密。

            示例: jdc kms disable-secret-version  --secret-id xxx --version xxx
        ''',
    )
    def disable_secret_version(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DisableSecretVersionRequest import DisableSecretVersionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisableSecretVersionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--secret-id'], dict(help="""(string) 机密ID """, dest='secretId',  required=True)),
            (['--version'], dict(help="""(string) 机密版本 """, dest='version',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除指定版本机密 ''',
        description='''
            删除指定版本机密。

            示例: jdc kms delete-secret-version  --secret-id xxx --version xxx
        ''',
    )
    def delete_secret_version(self):
        client_factory = ClientFactory('kms')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.kms.apis.DeleteSecretVersionRequest import DeleteSecretVersionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteSecretVersionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-key-list','create-key','describe-key','update-key-description','enable-key','disable-key','schedule-key-deletion','cancel-key-deletion','key-rotation','encrypt','decrypt','get-public-key','sign','validate','generate-data-key','describe-key-detail','enable-key-version','disable-key-version','schedule-key-version-deletion','cancel-key-version-deletion','describe-secret-list','create-secret','import-secret','describe-secret-version-list','update-secret','enable-secret','disable-secret','delete-secret','create-secret-version','export-secret','describe-secret-version-info','update-secret-version','enable-secret-version','disable-secret-version','delete-secret-version',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('kms', self.app.pargs.api)
        skeleton.show()
