# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class MonitorController(BaseController):
    class Meta:
        label = 'monitor'
        help = 'JCLOUD MONITOR API'
        description = '''
        monitor cli 子命令，monitor API。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/monitoring/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--service-code'], dict(help="""(string) 产品线 """, dest='serviceCode',  required=False)),
            (['--resource-id'], dict(help="""(string) 资源Id """, dest='resourceId',  required=False)),
            (['--resource-id-list'], dict(help="""(array: string) resourceId列表 """, dest='resourceIdList',  required=False)),
            (['--alarm-id'], dict(help="""(string) 规则Id """, dest='alarmId',  required=False)),
            (['--alarming'], dict(help="""(int) 正在报警, 取值为1 """, dest='alarming', type=int, required=False)),
            (['--service-code-list'], dict(help="""(array: string) 产品线列表 """, dest='serviceCodeList',  required=False)),
            (['--start-time'], dict(help="""(string) 开始时间 """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 结束时间 """, dest='endTime',  required=False)),
            (['--rule-type'], dict(help="""(int) 规则类型,默认查询1， 1表示资源监控，6表示站点监控,7表示可用性监控 """, dest='ruleType', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 服务码或资源Id列表; filter name 为serviceCodes表示查询多个产品线的规则; filter name 为resourceIds表示查询多个资源的规则 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询报警历史; 检索条件组合优先级从高到低为; 1. alarmId; 2. serviceCode; 2.1 serviceCode + resourceId; 2.2 serviceCode + resourceIds; 3. serviceCodes; 4. 用户所有规则 ''',
        description='''
            查询报警历史; 检索条件组合优先级从高到低为; 1. alarmId; 2. serviceCode; 2.1 serviceCode + resourceId; 2.2 serviceCode + resourceIds; 3. serviceCodes; 4. 用户所有规则。

            示例: jdc monitor describe-alarm-history 
        ''',
    )
    def describe_alarm_history(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DescribeAlarmHistoryRequest import DescribeAlarmHistoryRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeAlarmHistoryRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--service-code'], dict(help="""(string) 产品名称 """, dest='serviceCode',  required=False)),
            (['--resource-id'], dict(help="""(string) 资源ID """, dest='resourceId',  required=False)),
            (['--rule-type'], dict(help="""(int) 规则类型, 1表示资源监控，6表示站点监控,7表示可用性监控 """, dest='ruleType', type=int, required=False)),
            (['--status'], dict(help="""(int) 规则报警状态, 1：正常, 2：报警，4：数据不足 """, dest='status', type=int, required=False)),
            (['--enabled'], dict(help="""(int) 规则状态：1为启用，0为禁用 """, dest='enabled', type=int, required=False)),
            (['--is-alarming'], dict(help="""(int) 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效 """, dest='isAlarming', type=int, required=False)),
            (['--alarm-id'], dict(help="""(string) 规则的id """, dest='alarmId',  required=False)),
            (['--filters'], dict(help="""(array: filter) 服务码或资源Id列表; filter name 为serviceCodes表示查询多个产品线的规则; filter name 为resourceIds表示查询多个资源的规则 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询规则, 查询参数组合及优先级从高到低为：; 1：alarmId不为空; 2：serviceCode不为空; 2.1：serviceCode + resourceId; 2.2: serviceCode + resourceIds; 3：serviceCodes不为空; 4: 所有规则 ''',
        description='''
            查询规则, 查询参数组合及优先级从高到低为：; 1：alarmId不为空; 2：serviceCode不为空; 2.1：serviceCode + resourceId; 2.2: serviceCode + resourceIds; 3：serviceCodes不为空; 4: 所有规则。

            示例: jdc monitor describe-alarms 
        ''',
    )
    def describe_alarms(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DescribeAlarmsRequest import DescribeAlarmsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeAlarmsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--client-token'], dict(help="""(string) 幂等性校验参数,最长36位 """, dest='clientToken',  required=True)),
            (['--create-alarm-spec'], dict(help="""(createAlarmParam) NA """, dest='createAlarmSpec',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建报警规则，可以为某一个实例创建报警规则，也可以为多个实例同时创建报警规则。 ''',
        description='''
            创建报警规则，可以为某一个实例创建报警规则，也可以为多个实例同时创建报警规则。。

            示例: jdc monitor create-alarm  --client-token xxx --create-alarm-spec {"":""}
        ''',
    )
    def create_alarm(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.CreateAlarmRequest import CreateAlarmRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateAlarmRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--alarm-id'], dict(help="""(string) 规则id """, dest='alarmId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询规则详情 ''',
        description='''
            查询规则详情。

            示例: jdc monitor describe-alarms-by-id  --alarm-id xxx
        ''',
    )
    def describe_alarms_by_id(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DescribeAlarmsByIDRequest import DescribeAlarmsByIDRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeAlarmsByIDRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--alarm-id'], dict(help="""(string) 规则id """, dest='alarmId',  required=True)),
            (['--contacts'], dict(help="""(array: baseContact) 通知联系人 """, dest='contacts',  required=False)),
            (['--rule'], dict(help="""(baseRule) NA """, dest='rule',  required=True)),
            (['--web-hook-content'], dict(help="""(string) 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook """, dest='webHookContent',  required=False)),
            (['--web-hook-protocol'], dict(help="""(string) webHook协议 """, dest='webHookProtocol',  required=False)),
            (['--web-hook-secret'], dict(help="""(string) 回调secret，用户请求签名，防伪造 """, dest='webHookSecret',  required=False)),
            (['--web-hook-url'], dict(help="""(string) 回调url """, dest='webHookUrl',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改已创建的报警规则 ''',
        description='''
            修改已创建的报警规则。

            示例: jdc monitor update-alarm  --alarm-id xxx --rule {"":""}
        ''',
    )
    def update_alarm(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.UpdateAlarmRequest import UpdateAlarmRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = UpdateAlarmRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--alarm-id'], dict(help="""(string) 规则id """, dest='alarmId',  required=True)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--reference-type'], dict(help="""(int) 联系人类型。0,联系人分组; 1,联系人 """, dest='referenceType', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询规则的报警联系人 ''',
        description='''
            查询规则的报警联系人。

            示例: jdc monitor describe-alarm-contacts  --alarm-id xxx
        ''',
    )
    def describe_alarm_contacts(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DescribeAlarmContactsRequest import DescribeAlarmContactsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeAlarmContactsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) region """, dest='regionId',  required=False)),
            (['--alarm-id'], dict(help="""(string) 规则 id """, dest='alarmId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 禁用报警规则。报警规则禁用后，将停止探测实例的监控项数据。 ''',
        description='''
            禁用报警规则。报警规则禁用后，将停止探测实例的监控项数据。。

            示例: jdc monitor disable-alarm  --alarm-id xxx
        ''',
    )
    def disable_alarm(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DisableAlarmRequest import DisableAlarmRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DisableAlarmRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--alarm-id'], dict(help="""(string) 规则id """, dest='alarmId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用报警规则，当客户的报警规则处于停止状态时，可以使用此接口启用报警规则。 ''',
        description='''
            启用报警规则，当客户的报警规则处于停止状态时，可以使用此接口启用报警规则。。

            示例: jdc monitor enable-alarm  --alarm-id xxx
        ''',
    )
    def enable_alarm(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.EnableAlarmRequest import EnableAlarmRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = EnableAlarmRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--service-code'], dict(help="""(string) 产品线 """, dest='serviceCode',  required=False)),
            (['--resource-id'], dict(help="""(string) 资源Id """, dest='resourceId',  required=False)),
            (['--resource-id-list'], dict(help="""(array: string) resourceId列表 """, dest='resourceIdList',  required=False)),
            (['--alarm-id'], dict(help="""(string) 规则Id """, dest='alarmId',  required=False)),
            (['--alarming'], dict(help="""(int) 正在报警, 取值为1 """, dest='alarming', type=int, required=False)),
            (['--service-code-list'], dict(help="""(array: string) 产品线列表 """, dest='serviceCodeList',  required=False)),
            (['--start-time'], dict(help="""(string) 开始时间 """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 结束时间 """, dest='endTime',  required=False)),
            (['--rule-type'], dict(help="""(int) 规则类型,默认查询1， 1表示资源监控，6表示站点监控,7表示可用性监控 """, dest='ruleType', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) 服务码或资源Id列表; filter name 为serviceCodes表示查询多个产品线的规则; filter name 为resourceIds表示查询多个资源的规则 """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询报警历史; 检索条件组合优先级从高到低为; 1. alarmId; 2. serviceCode; 2.1 serviceCode + resourceId; 2.2 serviceCode + resourceIds; 3. serviceCodes; 4. 用户所有规则 ''',
        description='''
            查询报警历史; 检索条件组合优先级从高到低为; 1. alarmId; 2. serviceCode; 2.1 serviceCode + resourceId; 2.2 serviceCode + resourceIds; 3. serviceCodes; 4. 用户所有规则。

            示例: jdc monitor describe-alarm-history-all-region 
        ''',
    )
    def describe_alarm_history_all_region(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DescribeAlarmHistoryAllRegionRequest import DescribeAlarmHistoryAllRegionRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeAlarmHistoryAllRegionRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) region """, dest='regionId',  required=False)),
            (['--ids'], dict(help="""(string) ids,多个id用|分隔 """, dest='ids',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除自定义监控规则 ''',
        description='''
            删除自定义监控规则。

            示例: jdc monitor delete-alarms-cm  --ids xxx
        ''',
    )
    def delete_alarms_cm(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DeleteAlarmsCmRequest import DeleteAlarmsCmRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteAlarmsCmRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--service-code'], dict(help="""(string) 资源的类型，取值vm, lb, ip, database 等 """, dest='serviceCode',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 根据产品线查询可用监控项列表,metric介绍：<a href="https://docs.jdcloud.com/cn/monitoring/metrics">Metrics</a> ''',
        description='''
            根据产品线查询可用监控项列表,metric介绍：<a href="https://docs.jdcloud.com/cn/monitoring/metrics">Metrics</a>。

            示例: jdc monitor describe-metrics  --service-code xxx
        ''',
    )
    def describe_metrics(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DescribeMetricsRequest import DescribeMetricsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeMetricsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--service-code'], dict(help="""(string) 资源的类型，取值vm, lb, ip, database 等 """, dest='serviceCode',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询可用创建监控规则的指标列表,metric介绍：<a href="https://docs.jdcloud.com/cn/monitoring/metrics">Metrics</a> ''',
        description='''
            查询可用创建监控规则的指标列表,metric介绍：<a href="https://docs.jdcloud.com/cn/monitoring/metrics">Metrics</a>。

            示例: jdc monitor describe-metrics-for-create-alarm 
        ''',
    )
    def describe_metrics_for_create_alarm(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DescribeMetricsForCreateAlarmRequest import DescribeMetricsForCreateAlarmRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeMetricsForCreateAlarmRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--metric'], dict(help="""(string) 监控项英文标识(id) """, dest='metric',  required=True)),
            (['--service-code'], dict(help="""(string) 资源的类型，取值vm, lb, ip, database 等 """, dest='serviceCode',  required=True)),
            (['--resource-id'], dict(help="""(string) 资源的uuid，支持多个resourceId批量查询，每个id用竖线'|'分隔。 如：id1|id2|id3|id4 """, dest='resourceId',  required=True)),
            (['--tags'], dict(help="""(array: tagFilter) 自定义标签 """, dest='tags',  required=False)),
            (['--start-time'], dict(help="""(string) 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd'T'HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d） """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd'T'HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出） """, dest='endTime',  required=False)),
            (['--time-interval'], dict(help="""(string) 查询的时间间隔，最大不超过30天，支持分钟级别,小时级别，天级别，例如：1m、1h、1d """, dest='timeInterval',  required=False)),
            (['--aggr-type'], dict(help="""(string) 聚合方式：max avg min等,用于不同维度之间聚合 """, dest='aggrType',  required=False)),
            (['--down-aggr-type'], dict(help="""(string) 聚合方式：max avg min等,用于将维度内一个周期数据聚合为一个点的聚合方式 """, dest='downAggrType',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看某资源的最后一个点,metric介绍：<a href="https://docs.jdcloud.com/cn/monitoring/metrics">Metrics</a> ''',
        description='''
            查看某资源的最后一个点,metric介绍：<a href="https://docs.jdcloud.com/cn/monitoring/metrics">Metrics</a>。

            示例: jdc monitor last-downsample  --metric xxx --service-code xxx --resource-id xxx
        ''',
    )
    def last_downsample(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.LastDownsampleRequest import LastDownsampleRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = LastDownsampleRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 Id """, dest='regionId',  required=False)),
            (['--metric'], dict(help="""(string) 监控项英文标识(id) """, dest='metric',  required=True)),
            (['--aggr-type'], dict(help="""(string) 聚合方式，默认等于downSampleType或avg，可选值参考http://opentsdb.net/docs/build/html/user_guide/query/aggregators.html?highlight=zimsum#available-aggregators """, dest='aggrType',  required=False)),
            (['--down-sample-type'], dict(help="""(string) 采样方式，默认等于aggrType或avg，可选值参考http://opentsdb.net/docs/build/html/user_guide/query/aggregators.html?highlight=avg#available-aggregators """, dest='downSampleType',  required=False)),
            (['--start-time'], dict(help="""(string) 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd'T'HH:mm:ssZ """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd'T'HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出） """, dest='endTime',  required=False)),
            (['--time-interval'], dict(help="""(string) 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval默认为1h，当前时间往 前1h """, dest='timeInterval',  required=False)),
            (['--tags'], dict(help="""(array: tagFilter) 自定义标签/tag；至少要传一个tag，且tag.Values不为空 """, dest='tags',  required=False)),
            (['--group-by'], dict(help="""(bool) 是否对查询的tags分组 """, dest='groupBy',  required=False)),
            (['--rate'], dict(help="""(bool) 是否求速率 """, dest='rate',  required=False)),
            (['--service-code'], dict(help="""(string) 资源的类型，取值vm, lb, ip, database 等 """, dest='serviceCode',  required=True)),
            (['--resource-id'], dict(help="""(string) 资源的uuid """, dest='resourceId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看某资源多个监控项数据，metric介绍1：<a href="https://docs.jdcloud.com/cn/monitoring/metrics">Metrics</a> ''',
        description='''
            查看某资源多个监控项数据，metric介绍1：<a href="https://docs.jdcloud.com/cn/monitoring/metrics">Metrics</a>。

            示例: jdc monitor describe-metric-data  --metric xxx --service-code xxx --resource-id xxx
        ''',
    )
    def describe_metric_data(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.DescribeMetricDataRequest import DescribeMetricDataRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeMetricDataRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--metric-data-list'], dict(help="""(array: metricDataCm) 数据参数 """, dest='metricDataList',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 该接口为自定义监控数据上报的接口，方便您将自己采集的时序数据上报到云监控。不同region域名上报不同region的数据，参考：<a href="https://docs.jdcloud.com/cn/monitoring/reporting-monitoring-data">调用说明</a>可上报原始数据和已聚合的统计数据。支持批量上报方式。单次请求最多包含 50 个数据点；数据大小不超过 256k。 ''',
        description='''
            该接口为自定义监控数据上报的接口，方便您将自己采集的时序数据上报到云监控。不同region域名上报不同region的数据，参考：<a href="https://docs.jdcloud.com/cn/monitoring/reporting-monitoring-data">调用说明</a>可上报原始数据和已聚合的统计数据。支持批量上报方式。单次请求最多包含 50 个数据点；数据大小不超过 256k。。

            示例: jdc monitor put-metric-data 
        ''',
    )
    def put_metric_data(self):
        client_factory = ClientFactory('monitor')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.monitor.apis.PutMetricDataRequest import PutMetricDataRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = PutMetricDataRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-alarm-history','describe-alarms','create-alarm','describe-alarms-by-id','update-alarm','describe-alarm-contacts','disable-alarm','enable-alarm','describe-alarm-history-all-region','delete-alarms-cm','describe-metrics','describe-metrics-for-create-alarm','last-downsample','describe-metric-data','put-metric-data',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('monitor', self.app.pargs.api)
        skeleton.show()
