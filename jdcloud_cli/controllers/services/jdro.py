# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class JdroController(BaseController):
    class Meta:
        label = 'jdro'
        help = '资源编排'
        description = '''
        jdro cli 子命令，资源编排。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/resource-orchestration/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--product'], dict(help="""(string) 产品线类型，比如 VM """, dest='product',  required=False)),
            (['--search'], dict(help="""(string) 搜索的内容 """, dest='search',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询支持的资源列表 ''',
        description='''
            查询支持的资源列表。

            示例: jdc jdro describe-resource-type-list 
        ''',
    )
    def describe_resource_type_list(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.DescribeResourceTypeListRequest import DescribeResourceTypeListRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeResourceTypeListRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--resource-type'], dict(help="""(string) 资源类型 """, dest='resourceType',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询支持的资源结构详情 ''',
        description='''
            查询支持的资源结构详情。

            示例: jdc jdro describe-resource-type-specification  --resource-type xxx
        ''',
    )
    def describe_resource_type_specification(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.DescribeResourceTypeSpecificationRequest import DescribeResourceTypeSpecificationRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeResourceTypeSpecificationRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--stack-name'], dict(help="""(string) 资源栈名称 """, dest='stackName',  required=False)),
            (['--action'], dict(help="""(string) 资源栈正在执行的动作 """, dest='action',  required=False)),
            (['--status'], dict(help="""(string) 资源栈正在执行的动作的状态 """, dest='status',  required=False)),
            (['--create-start-time'], dict(help="""(string) 创建开始时间 """, dest='createStartTime',  required=False)),
            (['--create-end-time'], dict(help="""(string) 创建结束时间 """, dest='createEndTime',  required=False)),
            (['--update-start-time'], dict(help="""(string) 更新开始时间 """, dest='updateStartTime',  required=False)),
            (['--update-end-time'], dict(help="""(string) 更新结束时间 """, dest='updateEndTime',  required=False)),
            (['--sort-field'], dict(help="""(string) 排序字段, createtime, updatetime """, dest='sortField',  required=False)),
            (['--sort-by'], dict(help="""(string) 排序方式，asc，desc """, dest='sortBy',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询资源栈列表 ''',
        description='''
            查询资源栈列表。

            示例: jdc jdro describe-stacks 
        ''',
    )
    def describe_stacks(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.DescribeStacksRequest import DescribeStacksRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeStacksRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--environment'], dict(help="""(environment) NA """, dest='environment',  required=True)),
            (['--template'], dict(help="""(object) 模板, JSON对象 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建资源栈 ''',
        description='''
            创建资源栈。

            示例: jdc jdro create-stack  --environment '{"":""}' --template '{"":""}'
        ''',
    )
    def create_stack(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.CreateStackRequest import CreateStackRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateStackRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--stack-id'], dict(help="""(string) 资源栈 ID """, dest='stackId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询资源栈详情 ''',
        description='''
            查询资源栈详情。

            示例: jdc jdro describe-stack  --stack-id xxx
        ''',
    )
    def describe_stack(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.DescribeStackRequest import DescribeStackRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeStackRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--stack-id'], dict(help="""(string) 资源栈 ID """, dest='stackId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除资源栈 ''',
        description='''
            删除资源栈。

            示例: jdc jdro delete-stack  --stack-id xxx
        ''',
    )
    def delete_stack(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.DeleteStackRequest import DeleteStackRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteStackRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--stack-id'], dict(help="""(string) 资源栈 ID """, dest='stackId',  required=True)),
            (['--environment'], dict(help="""(environment) NA """, dest='environment',  required=True)),
            (['--template'], dict(help="""(object) 模板, JSON对象 """, dest='template',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建更改集 ''',
        description='''
            创建更改集。

            示例: jdc jdro create-change-set  --stack-id xxx --environment '{"":""}' --template '{"":""}'
        ''',
    )
    def create_change_set(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.CreateChangeSetRequest import CreateChangeSetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateChangeSetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--stack-id'], dict(help="""(string) 资源栈 ID """, dest='stackId',  required=True)),
            (['--changeset-id'], dict(help="""(string) 更改集 ID """, dest='changesetId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 执行更改集 ''',
        description='''
            执行更改集。

            示例: jdc jdro execute-change-set  --stack-id xxx --changeset-id xxx
        ''',
    )
    def execute_change_set(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.ExecuteChangeSetRequest import ExecuteChangeSetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ExecuteChangeSetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--stack-id'], dict(help="""(string) 资源栈 ID """, dest='stackId',  required=True)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--start-time'], dict(help="""(string) 事件开始时间 """, dest='startTime',  required=False)),
            (['--end-time'], dict(help="""(string) 事件结束时间 """, dest='endTime',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询资源栈事件列表 ''',
        description='''
            查询资源栈事件列表。

            示例: jdc jdro describe-stack-events  --stack-id xxx
        ''',
    )
    def describe_stack_events(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.DescribeStackEventsRequest import DescribeStackEventsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeStackEventsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--stack-id'], dict(help="""(string) 资源栈 ID """, dest='stackId',  required=True)),
            (['--page-number'], dict(help="""(int) 当前所在页，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 页面大小，默认为20；取值范围[1, 100] """, dest='pageSize', type=int, required=False)),
            (['--search'], dict(help="""(string) 按照京东云产品线名称或者资源逻辑ID进行模糊搜索 """, dest='search',  required=False)),
            (['--product'], dict(help="""(string) 只按照京东云产品线名称进行模糊搜索，比如VM，Disk等 """, dest='product',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询资源栈中资源列表 ''',
        description='''
            查询资源栈中资源列表。

            示例: jdc jdro describe-stack-resources  --stack-id xxx
        ''',
    )
    def describe_stack_resources(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.DescribeStackResourcesRequest import DescribeStackResourcesRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeStackResourcesRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--stack-id'], dict(help="""(string) 资源栈 ID """, dest='stackId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询资源栈使用的模板 ''',
        description='''
            查询资源栈使用的模板。

            示例: jdc jdro describe-stack-template  --stack-id xxx
        ''',
    )
    def describe_stack_template(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.DescribeStackTemplateRequest import DescribeStackTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeStackTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域 ID """, dest='regionId',  required=False)),
            (['--environment'], dict(help="""(environment) NA """, dest='environment',  required=False)),
            (['--template'], dict(help="""(object) 模板 """, dest='template',  required=True)),
            (['--validate-mode'], dict(help="""(string) 可取值:(validateTemplate (检测模板), validateStack (检测模板和environment)) 默认validateTemplate """, dest='validateMode',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 模板校验 ''',
        description='''
            模板校验。

            示例: jdc jdro validate-template  --template '{"":""}'
        ''',
    )
    def validate_template(self):
        client_factory = ClientFactory('jdro')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.jdro.apis.ValidateTemplateRequest import ValidateTemplateRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ValidateTemplateRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-resource-type-list','describe-resource-type-specification','describe-stacks','create-stack','describe-stack','delete-stack','create-change-set','execute-change-set','describe-stack-events','describe-stack-resources','describe-stack-template','validate-template',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('jdro', self.app.pargs.api)
        skeleton.show()
