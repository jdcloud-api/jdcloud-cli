# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class DomainserviceController(BaseController):
    class Meta:
        label = 'domainservice'
        help = '京东云解析OpenAPI接口'
        description = '''
        domainservice cli 子命令，京东云解析OpenAPI接口。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/xxx/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 分页参数，页的序号，默认是1 """, dest='pageNumber', type=int, required=True)),
            (['--page-size'], dict(help="""(int) 分页参数，每页含有的结果的数目，默认是10 """, dest='pageSize', type=int, required=True)),
            (['--start-time'], dict(help="""(string) 记录的起始时间，格式：UTC时间例如2017-11-10T23:00:00Z """, dest='startTime',  required=True)),
            (['--end-time'], dict(help="""(string) 记录的终止时间，格式：UTC时间例如2017-11-10T23:00:00Z """, dest='endTime',  required=True)),
            (['--key-word'], dict(help="""(string) 日志需要匹配的关键词 """, dest='keyWord',  required=False)),
            (['--success'], dict(help="""(bool) 日志里面的结果是成功还是失败 """, dest='success',  required=False)),
            (['--type'], dict(help="""(int) 日志的类型 """, dest='type', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看用户在云解析服务下的操作记录 ''',
        description='''
            查看用户在云解析服务下的操作记录。

            示例: jdc domainservice describe-action-log  --page-number 0 --page-size 0 --start-time xxx --end-time xxx
        ''',
    )
    def describe_action_log(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeActionLogRequest import DescribeActionLogRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeActionLogRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 分页查询时查询的每页的序号，起始值为1，默认为1 """, dest='pageNumber', type=int, required=True)),
            (['--page-size'], dict(help="""(int) 分页查询时设置的每页行数，默认为10 """, dest='pageSize', type=int, required=True)),
            (['--domain-name'], dict(help="""(string) 关键字，按照”%domainName%”模式匹配主域名 """, dest='domainName',  required=False)),
            (['--domain-id'], dict(help="""(int) 域名ID。不为0时，只查此domainId的域名 """, dest='domainId', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 获取用户所属的主域名列表。   ; 请在调用域名相关的接口之前，调用此接口获取相关的domainId和domainName。  ; 主域名的相关概念，请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/product-overview">云解析文档</a>;  ''',
        description='''
            获取用户所属的主域名列表。   ; 请在调用域名相关的接口之前，调用此接口获取相关的domainId和domainName。  ; 主域名的相关概念，请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/product-overview">云解析文档</a>; 。

            示例: jdc domainservice describe-domains  --page-number 0 --page-size 0
        ''',
    )
    def describe_domains(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeDomainsRequest import DescribeDomainsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeDomainsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--pack-id'], dict(help="""(int) 主域名的套餐类型, 免费:0 企业版:1 企业高级版:2 """, dest='packId', type=int, required=True)),
            (['--domain-name'], dict(help="""(string) 要添加的主域名 """, dest='domainName',  required=True)),
            (['--domain-id'], dict(help="""(int) 主域名的ID，升级套餐必填，请使用describeDomains获取 """, dest='domainId', type=int, required=False)),
            (['--buy-type'], dict(help="""(int) 新购买:1、升级:3，收费套餐的域名必填 """, dest='buyType', type=int, required=False)),
            (['--time-span'], dict(help="""(int) 取值1，2，3 ，含义：时长，收费套餐的域名必填 """, dest='timeSpan', type=int, required=False)),
            (['--time-unit'], dict(help="""(int) 时间单位，收费套餐的域名必填，1：小时，2：天，3：月，4：年 """, dest='timeUnit', type=int, required=False)),
            (['--billing-type'], dict(help="""(int) 计费类型，可以不传此参数。 """, dest='billingType', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加主域名  ; 如何添加免费域名，详细情况请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/domainadd">文档</a>; 添加收费域名，请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/purchase-process">文档</a>，; 添加收费域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情。;  ''',
        description='''
            添加主域名  ; 如何添加免费域名，详细情况请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/domainadd">文档</a>; 添加收费域名，请查阅<a href="https://docs.jdcloud.com/cn/jd-cloud-dns/purchase-process">文档</a>，; 添加收费域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情。; 。

            示例: jdc domainservice create-domain  --pack-id 0 --domain-name xxx
        ''',
    )
    def create_domain(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.CreateDomainRequest import CreateDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--domain-name'], dict(help="""(string) 需要修改的主域名，请使用describeDomains接口获取 """, dest='domainName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改主域名 ''',
        description='''
            修改主域名。

            示例: jdc domainservice modify-domain  --domain-id xxx --domain-name xxx
        ''',
    )
    def modify_domain(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.ModifyDomainRequest import ModifyDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ModifyDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除主域名 ''',
        description='''
            删除主域名。

            示例: jdc domainservice delete-domain  --domain-id xxx
        ''',
    )
    def delete_domain(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DeleteDomainRequest import DeleteDomainRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteDomainRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--domain-name'], dict(help="""(string) 查询的主域名，请使用describeDomains接口获取 """, dest='domainName',  required=True)),
            (['--start'], dict(help="""(string) 查询时间段的起始时间, UTC时间格式，例如2017-11-10T23:00:00Z """, dest='start',  required=True)),
            (['--end'], dict(help="""(string) 查询时间段的终止时间, UTC时间格式，例如2017-11-10T23:00:00Z """, dest='end',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看主域名的解析次数 ''',
        description='''
            查看主域名的解析次数。

            示例: jdc domainservice describe-domain-query-count  --domain-id xxx --domain-name xxx --start xxx --end xxx
        ''',
    )
    def describe_domain_query_count(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeDomainQueryCountRequest import DescribeDomainQueryCountRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeDomainQueryCountRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--domain-name'], dict(help="""(string) 主域名，请使用describeDomains接口获取 """, dest='domainName',  required=True)),
            (['--start'], dict(help="""(string) 时间段的起始时间, UTC时间格式，例如2017-11-10T23:00:00Z """, dest='start',  required=True)),
            (['--end'], dict(help="""(string) 时间段的终止时间, UTC时间格式，例如2017-11-10T23:00:00Z """, dest='end',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看域名的查询流量 ''',
        description='''
            查看域名的查询流量。

            示例: jdc domainservice describe-domain-query-traffic  --domain-id xxx --domain-name xxx --start xxx --end xxx
        ''',
    )
    def describe_domain_query_traffic(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeDomainQueryTrafficRequest import DescribeDomainQueryTrafficRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeDomainQueryTrafficRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--page-number'], dict(help="""(int) 当前页数，起始值为1，默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页查询时设置的每页行数, 默认为10 """, dest='pageSize', type=int, required=False)),
            (['--search'], dict(help="""(string) 关键字，按照”%search%”模式匹配解析记录的主机记录 """, dest='search',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询主域名的解析记录。  ; 在使用解析记录相关的接口之前，请调用此接口获取解析记录的列表。;  ''',
        description='''
            查询主域名的解析记录。  ; 在使用解析记录相关的接口之前，请调用此接口获取解析记录的列表。; 。

            示例: jdc domainservice describe-resource-record  --domain-id xxx
        ''',
    )
    def describe_resource_record(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeResourceRecordRequest import DescribeResourceRecordRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeResourceRecordRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--req'], dict(help="""(addRR) RR参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加主域名的解析记录 ''',
        description='''
            添加主域名的解析记录。

            示例: jdc domainservice create-resource-record  --domain-id xxx --req '{"":""}'
        ''',
    )
    def create_resource_record(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.CreateResourceRecordRequest import CreateResourceRecordRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateResourceRecordRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--resource-record-id'], dict(help="""(string) 解析记录ID，请使用describeResourceRecord接口获取。 """, dest='resourceRecordId',  required=True)),
            (['--req'], dict(help="""(updateRR) updateRR参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 修改主域名的某个解析记录 ''',
        description='''
            修改主域名的某个解析记录。

            示例: jdc domainservice modify-resource-record  --domain-id xxx --resource-record-id xxx --req '{"":""}'
        ''',
    )
    def modify_resource_record(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.ModifyResourceRecordRequest import ModifyResourceRecordRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ModifyResourceRecordRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--resource-record-id'], dict(help="""(string) 解析记录ID，请使用describeResourceRecord接口获取。 """, dest='resourceRecordId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除主域名下的解析记录 ''',
        description='''
            删除主域名下的解析记录。

            示例: jdc domainservice delete-resource-record  --domain-id xxx --resource-record-id xxx
        ''',
    )
    def delete_resource_record(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DeleteResourceRecordRequest import DeleteResourceRecordRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteResourceRecordRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--resource-record-id'], dict(help="""(string) 解析记录ID，请使用describeResourceRecord接口获取。 """, dest='resourceRecordId',  required=True)),
            (['--action'], dict(help="""(string) 要修改的状态，enable:启用 disable:停用 """, dest='action',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 启用、停用主域名下的解析记录 ''',
        description='''
            启用、停用主域名下的解析记录。

            示例: jdc domainservice modify-resource-record-status  --domain-id xxx --resource-record-id xxx --action xxx
        ''',
    )
    def modify_resource_record_status(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.ModifyResourceRecordStatusRequest import ModifyResourceRecordStatusRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ModifyResourceRecordStatusRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--load-mode'], dict(help="""(int) 展示方式，暂时不使用 """, dest='loadMode', type=int, required=False)),
            (['--pack-id'], dict(help="""(int) 套餐ID，0->免费版 1->企业版 2->企业高级版 """, dest='packId', type=int, required=True)),
            (['--view-id'], dict(help="""(int) view ID，默认为-1 """, dest='viewId', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询云解析所有的基础解析线路。  ; 在使用解析线路的参数之前，请调用此接口获取解析线路的ID。;  ''',
        description='''
            查询云解析所有的基础解析线路。  ; 在使用解析线路的参数之前，请调用此接口获取解析线路的ID。; 。

            示例: jdc domainservice describe-view-tree  --domain-id xxx --pack-id 0 --view-id 0
        ''',
    )
    def describe_view_tree(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeViewTreeRequest import DescribeViewTreeRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeViewTreeRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--req'], dict(help="""(array: batchSetDNS) 需要设置的解析记录列表 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 同一个主域名下，批量新增或者批量更新导入解析记录。; 如果解析记录的ID为0，是新增解析记录，如果不为0，则是更新解析记录。;  ''',
        description='''
            同一个主域名下，批量新增或者批量更新导入解析记录。; 如果解析记录的ID为0，是新增解析记录，如果不为0，则是更新解析记录。; 。

            示例: jdc domainservice batch-set-resource-records  --domain-id xxx --req ['{"":""}']
        ''',
    )
    def batch_set_resource_records(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.BatchSetResourceRecordsRequest import BatchSetResourceRecordsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = BatchSetResourceRecordsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--view-id'], dict(help="""(int) 自定义线路ID """, dest='viewId', type=int, required=True)),
            (['--view-name'], dict(help="""(string) 自定义线路名称, 最多64个字节，允许：数字、字母、下划线，-，中文 """, dest='viewName',  required=False)),
            (['--page-number'], dict(help="""(int) 分页参数，页的序号 """, dest='pageNumber', type=int, required=True)),
            (['--page-size'], dict(help="""(int) 分页参数，每页含有的结果的数目 """, dest='pageSize', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询主域名的自定义解析线路 ''',
        description='''
            查询主域名的自定义解析线路。

            示例: jdc domainservice describe-user-view  --domain-id xxx --view-id 0 --page-number 0 --page-size 0
        ''',
    )
    def describe_user_view(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeUserViewRequest import DescribeUserViewRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeUserViewRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--req'], dict(help="""(addView) 添加自定义线路的参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加主域名的自定义解析线路 ''',
        description='''
            添加主域名的自定义解析线路。

            示例: jdc domainservice create-user-view  --domain-id xxx --req '{"":""}'
        ''',
    )
    def create_user_view(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.CreateUserViewRequest import CreateUserViewRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateUserViewRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--req'], dict(help="""(delView) 删除自定义线路的参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除主域名的自定义解析线路 ''',
        description='''
            删除主域名的自定义解析线路。

            示例: jdc domainservice delete-user-view  --domain-id xxx --req '{"":""}'
        ''',
    )
    def delete_user_view(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DeleteUserViewRequest import DeleteUserViewRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteUserViewRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--view-id'], dict(help="""(int) 自定义线路ID """, dest='viewId', type=int, required=True)),
            (['--view-name'], dict(help="""(string) 自定义线路名称, 最多64个字节，允许：数字、字母、下划线，-，中文 """, dest='viewName',  required=False)),
            (['--page-number'], dict(help="""(int) 分页参数，页的序号, 默认为1 """, dest='pageNumber', type=int, required=True)),
            (['--page-size'], dict(help="""(int) 分页参数，每页含有的结果的数目，默认为10 """, dest='pageSize', type=int, required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询主域名的自定义解析线路的IP段 ''',
        description='''
            查询主域名的自定义解析线路的IP段。

            示例: jdc domainservice describe-user-view-ip  --domain-id xxx --view-id 0 --page-number 0 --page-size 0
        ''',
    )
    def describe_user_view_ip(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeUserViewIPRequest import DescribeUserViewIPRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeUserViewIPRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--req'], dict(help="""(addViewIP) 添加域名的自定义解析线路的IP段的参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加主域名的自定义解析线路的IP段 ''',
        description='''
            添加主域名的自定义解析线路的IP段。

            示例: jdc domainservice create-user-view-ip  --domain-id xxx --req '{"":""}'
        ''',
    )
    def create_user_view_ip(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.CreateUserViewIPRequest import CreateUserViewIPRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateUserViewIPRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--req'], dict(help="""(delViewIP) 删除域名的自定义解析线路的IP段的参数 """, dest='req',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 删除主域名的自定义解析线路的IP段 ''',
        description='''
            删除主域名的自定义解析线路的IP段。

            示例: jdc domainservice delete-user-view-ip  --domain-id xxx --req '{"":""}'
        ''',
    )
    def delete_user_view_ip(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DeleteUserViewIPRequest import DeleteUserViewIPRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteUserViewIPRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--page-index'], dict(help="""(int) 当前页数，起始值为1，默认为1 """, dest='pageIndex', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页查询时设置的每页行数 """, dest='pageSize', type=int, required=False)),
            (['--search-value'], dict(help="""(string) 查询的值 """, dest='searchValue',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查看主域名的监控项的配置以及状态 ''',
        description='''
            查看主域名的监控项的配置以及状态。

            示例: jdc domainservice describe-monitor  --domain-id xxx
        ''',
    )
    def describe_monitor(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeMonitorRequest import DescribeMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--sub-domain-name'], dict(help="""(string) 子域名 """, dest='subDomainName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加子域名的监控项，默认把子域名的所有监控项都添加上监控 ''',
        description='''
            添加子域名的监控项，默认把子域名的所有监控项都添加上监控。

            示例: jdc domainservice create-monitor  --domain-id xxx --sub-domain-name xxx
        ''',
    )
    def create_monitor(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.CreateMonitorRequest import CreateMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--update-monitor'], dict(help="""(updateMonitor) 监控项设置信息 """, dest='updateMonitor',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 域名的监控项修改 ''',
        description='''
            域名的监控项修改。

            示例: jdc domainservice modify-monitor  --domain-id xxx --update-monitor '{"":""}'
        ''',
    )
    def modify_monitor(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.ModifyMonitorRequest import ModifyMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ModifyMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--sub-domain-name'], dict(help="""(string) 子域名 """, dest='subDomainName',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询子域名的可用监控对象 ''',
        description='''
            查询子域名的可用监控对象。

            示例: jdc domainservice describe-monitor-target  --domain-id xxx --sub-domain-name xxx
        ''',
    )
    def describe_monitor_target(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeMonitorTargetRequest import DescribeMonitorTargetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeMonitorTargetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--sub-domain-name'], dict(help="""(string) 子域名 """, dest='subDomainName',  required=True)),
            (['--targets'], dict(help="""(array: string) 子域名可用监控对象的数组 """, dest='targets',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 添加子域名的某些特定监控对象为监控项 ''',
        description='''
            添加子域名的某些特定监控对象为监控项。

            示例: jdc domainservice create-monitor-target  --domain-id xxx --sub-domain-name xxx
        ''',
    )
    def create_monitor_target(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.CreateMonitorTargetRequest import CreateMonitorTargetRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateMonitorTargetRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--monitor-id'], dict(help="""(string) 监控项ID，请使用describeMonitor接口获取。 """, dest='monitorId',  required=True)),
            (['--action'], dict(help="""(string) 暂停stop, 开启start, 手动恢复recover，手动切换switch，手动恢复和手动切换时候不支持批量操作 """, dest='action',  required=True)),
            (['--switch-target'], dict(help="""(string) 监控项的主机值, 手动切换时必填 """, dest='switchTarget',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 监控项的操作集合，包括：暂停，启动, 手动恢复, 手动切换 ''',
        description='''
            监控项的操作集合，包括：暂停，启动, 手动恢复, 手动切换。

            示例: jdc domainservice modify-monitor-status  --domain-id xxx --monitor-id xxx --action xxx
        ''',
    )
    def modify_monitor_status(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.ModifyMonitorStatusRequest import ModifyMonitorStatusRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = ModifyMonitorStatusRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--monitor-id'], dict(help="""(string) 监控项ID，请使用describeMonitor接口获取。 """, dest='monitorId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 监控项的删除 ''',
        description='''
            监控项的删除。

            示例: jdc domainservice delete-monitor  --domain-id xxx --monitor-id xxx
        ''',
    )
    def delete_monitor(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DeleteMonitorRequest import DeleteMonitorRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DeleteMonitorRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 实例所属的地域ID """, dest='regionId',  required=False)),
            (['--domain-id'], dict(help="""(string) 域名ID，请使用describeDomains接口获取。 """, dest='domainId',  required=True)),
            (['--page-index'], dict(help="""(int) 当前页数，起始值为1，默认为1 """, dest='pageIndex', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页查询时设置的每页行数 """, dest='pageSize', type=int, required=False)),
            (['--search-value'], dict(help="""(string) 关键字 """, dest='searchValue',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 主域名的监控项的报警信息 ''',
        description='''
            主域名的监控项的报警信息。

            示例: jdc domainservice describe-monitor-alarm  --domain-id xxx
        ''',
    )
    def describe_monitor_alarm(self):
        client_factory = ClientFactory('domainservice')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.domainservice.apis.DescribeMonitorAlarmRequest import DescribeMonitorAlarmRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeMonitorAlarmRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-action-log','describe-domains','create-domain','modify-domain','delete-domain','describe-domain-query-count','describe-domain-query-traffic','describe-resource-record','create-resource-record','modify-resource-record','delete-resource-record','modify-resource-record-status','describe-view-tree','batch-set-resource-records','describe-user-view','create-user-view','delete-user-view','describe-user-view-ip','create-user-view-ip','delete-user-view-ip','describe-monitor','create-monitor','modify-monitor','describe-monitor-target','create-monitor-target','modify-monitor-status','delete-monitor','describe-monitor-alarm',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('domainservice', self.app.pargs.api)
        skeleton.show()
