# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from argparse import RawTextHelpFormatter
from jdcloud_cli.cement.ext.ext_argparse import expose
from jdcloud_cli.controllers.base_controller import BaseController
from jdcloud_cli.client_factory import ClientFactory
from jdcloud_cli.parameter_builder import collect_user_args, collect_user_headers
from jdcloud_cli.printer import Printer
from jdcloud_cli.skeleton import Skeleton


class DeployController(BaseController):
    class Meta:
        label = 'deploy'
        help = '云部署'
        description = '''
        deploy cli 子命令，云部署应用、部署组、部署任务相关的接口。
        OpenAPI文档地址为：https://docs.jdcloud.com/cn/codedeploy/api/overview
        '''
        stacked_on = 'base'
        stacked_type = 'nested'

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为20；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) appId - 应用ID，精确匹配; appName - 应用名，精确匹配; platform - 部署平台，精确匹配;  """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量查询应用的信息，此接口支持分页查询，默认每页20条 ''',
        description='''
            批量查询应用的信息，此接口支持分页查询，默认每页20条。

            示例: jdc deploy describe-apps 
        ''',
    )
    def describe_apps(self):
        client_factory = ClientFactory('deploy')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.deploy.apis.DescribeAppsRequest import DescribeAppsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeAppsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--app-id'], dict(help="""(string) App Id """, dest='appId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询一个应用的信息 ''',
        description='''
            查询一个应用的信息。

            示例: jdc deploy describe-app  --app-id xxx
        ''',
    )
    def describe_app(self):
        client_factory = ClientFactory('deploy')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.deploy.apis.DescribeAppRequest import DescribeAppRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeAppRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--group-id'], dict(help="""(string) 部署组ID，部署组的唯一标识 """, dest='groupId',  required=True)),
            (['--desc'], dict(help="""(string) 描述 """, dest='desc',  required=False)),
            (['--deploy-source'], dict(help="""(int) 部署来源：1url，2云编译，3云存储 """, dest='deploySource', type=int, required=True)),
            (['--deploy-cmd'], dict(help="""(string) 部署操作 """, dest='deployCmd',  required=False)),
            (['--cmd-source'], dict(help="""(int) 1使用输入的操作，2使用程序自带操作 """, dest='cmdSource', type=int, required=False)),
            (['--cmd-type'], dict(help="""(int) 部署操作展示格式：1form,2ymal """, dest='cmdType', type=int, required=False)),
            (['--product-type'], dict(help="""(int) 项目类型 1tomcat,2 """, dest='productType', type=int, required=False)),
            (['--download-url'], dict(help="""(string) 下载url """, dest='downloadUrl',  required=False)),
            (['--md5'], dict(help="""(string) md5 """, dest='md5',  required=False)),
            (['--compile-project'], dict(help="""(string) 云编译项目名 """, dest='compileProject',  required=False)),
            (['--compile-series'], dict(help="""(string) 云编译构建序号 """, dest='compileSeries',  required=False)),
            (['--oss-space'], dict(help="""(string) 云存储空间 """, dest='ossSpace',  required=False)),
            (['--oss-dir'], dict(help="""(string) 云存储目录 """, dest='ossDir',  required=False)),
            (['--file-type'], dict(help="""(int) 文件类型：1.tar，2.zip,3.tar.gz """, dest='fileType', type=int, required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 创建部署任务 ''',
        description='''
            创建部署任务。

            示例: jdc deploy create-deploy  --group-id xxx --deploy-source 0
        ''',
    )
    def create_deploy(self):
        client_factory = ClientFactory('deploy')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.deploy.apis.CreateDeployRequest import CreateDeployRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = CreateDeployRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--deploy-id'], dict(help="""(string) Deploy Id """, dest='deployId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询一个部署任务详情 ''',
        description='''
            查询一个部署任务详情。

            示例: jdc deploy describe-deploy  --deploy-id xxx
        ''',
    )
    def describe_deploy(self):
        client_factory = ClientFactory('deploy')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.deploy.apis.DescribeDeployRequest import DescribeDeployRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeDeployRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--page-number'], dict(help="""(int) 页码；默认为1 """, dest='pageNumber', type=int, required=False)),
            (['--page-size'], dict(help="""(int) 分页大小；默认为20；取值范围[10, 100] """, dest='pageSize', type=int, required=False)),
            (['--filters'], dict(help="""(array: filter) appId - 应用ID，精确匹配; groupId - 部署组ID，精确匹配; groupName - 部署组名，精确匹配;  """, dest='filters',  required=False)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 批量查询部署组的信息，此接口支持分页查询，默认每页20条 ''',
        description='''
            批量查询部署组的信息，此接口支持分页查询，默认每页20条。

            示例: jdc deploy describe-groups 
        ''',
    )
    def describe_groups(self):
        client_factory = ClientFactory('deploy')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.deploy.apis.DescribeGroupsRequest import DescribeGroupsRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeGroupsRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--region-id'], dict(help="""(string) 地域ID """, dest='regionId',  required=False)),
            (['--group-id'], dict(help="""(string) Group Id """, dest='groupId',  required=True)),
            (['--input-json'], dict(help='(json) 以json字符串或文件绝对路径形式作为输入参数。\n字符串方式举例：--input-json \'{"field":"value"}\';\n文件格式举例：--input-json file:///xxxx.json', dest='input_json', required=False)),
            (['--headers'], dict(help="""(json) 用户自定义Header，举例：'{"x-jdcloud-security-token":"abc","test":"123"}'""", dest='headers', required=False)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 查询一个部署组的信息 ''',
        description='''
            查询一个部署组的信息。

            示例: jdc deploy describe-group  --group-id xxx
        ''',
    )
    def describe_group(self):
        client_factory = ClientFactory('deploy')
        client = client_factory.get(self.app)
        if client is None:
            return

        try:
            from jdcloud_sdk.services.deploy.apis.DescribeGroupRequest import DescribeGroupRequest
            params_dict = collect_user_args(self.app)
            headers = collect_user_headers(self.app)
            req = DescribeGroupRequest(params_dict, headers)
            resp = client.send(req)
            Printer.print_result(resp)
        except ImportError:
            print('{"error":"This api is not supported, please use the newer version"}')
        except Exception as e:
            print(e)

    @expose(
        arguments=[
            (['--api'], dict(help="""(string) api name """, choices=['describe-apps','describe-app','create-deploy','describe-deploy','describe-groups','describe-group',], required=True)),
        ],
        formatter_class=RawTextHelpFormatter,
        help=''' 生成单个API接口的json骨架空字符串 ''',
        description='''
            生成单个API接口的json骨架空字符串。

            示例: jdc nc generate-skeleton --api describeContainer ''',
    )
    def generate_skeleton(self):
        skeleton = Skeleton('deploy', self.app.pargs.api)
        skeleton.show()
